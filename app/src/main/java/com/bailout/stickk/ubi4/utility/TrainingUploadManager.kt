package com.bailout.stickk.ubi4.utility

import android.content.Context
import android.util.Log
import android.widget.Toast
import com.bailout.stickk.ubi4.data.repository.Ubi4TrainingRepository
import com.bailout.stickk.ubi4.persistence.preference.PreferenceKeysUBI4
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.Job
import kotlinx.coroutines.channels.BufferOverflow
import kotlinx.coroutines.flow.MutableSharedFlow
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import java.io.File
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Locale

object TrainingUploadManager {

    /** –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ */
    enum class State { IDLE, RUNNING, EXPORTING, DONE, ERROR }

    /** –§–ª–æ—É –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (0‚Äì100%) */
    val stateFlow = MutableStateFlow(State.IDLE)
    val progressFlow = MutableSharedFlow<Int>(
        replay = 1,
        extraBufferCapacity = 64,
        onBufferOverflow = BufferOverflow.DROP_OLDEST
    )

    fun launch(
        context: Context,
        repo: Ubi4TrainingRepository,
        token: String,
        serial: String,
        selectedEmg8Files: List<File>
    ): Job {
        // 1. –ë–µ—Ä—ë–º –ø–∞–ø–∫—É externalFilesDir
        val dir = context.getExternalFilesDir(null)
            ?: throw IllegalStateException("External storage unavailable")

        // 2. –§–æ—Ä–º–∏—Ä—É–µ–º List<Pair<emg8, emg8.data_passport>> —Ç–æ–ª—å–∫–æ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        val pairs: List<Pair<File, File>> = selectedEmg8Files.mapNotNull { emg ->
            val passport = File(dir, "${emg.name}.data_passport")
            if (passport.exists()) {
                emg to passport
            } else {
                Log.w("TrainingUploadManager", "–ù–µ –Ω–∞–π–¥–µ–Ω passport –¥–ª—è ${emg.name}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                null
            }
        }

        // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø—É—Å—Ç–æ ‚Äî –Ω–µ—á–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
        if (pairs.isEmpty()) {
            Log.e("TrainingUploadManager", "–ò–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö .emg8 –Ω–∏ –æ–¥–Ω–∞ –ø–∞—Ä–∞ (emg8 + passport) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–∞–∑—É –æ—Ç–º–µ–Ω—ë–Ω–Ω—ã–π Job
            return Job().apply { cancel() }
        }

        // 3. –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ—Ä—É—Ç–∏–Ω—É –¥–ª—è upload ‚Üí download ‚Üí —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞
        return CoroutineScope(Dispatchers.IO).launch {
            try {
                // ‚îÄ‚îÄ‚îÄ 3.1. –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ RUNNING ‚îÄ‚îÄ‚îÄ
                stateFlow.value = State.RUNNING

                // ‚îÄ‚îÄ‚îÄ 3.2. –í—ã–∑—ã–≤–∞–µ–º uploadTrainingData, –ø–µ—Ä–µ–¥–∞–≤–∞—è —Å—Ä–∞–∑—É –≤—Å–µ –ø–∞—Ä—ã ‚îÄ‚îÄ‚îÄ
                //      repo.uploadTrainingData —Å–∞–º –æ—Ç–ø—Ä–∞–≤–∏—Ç multipart —Å–æ –≤—Å–µ–º–∏ –ø–∞—Ä–∞–º–∏
                val checkpoint: String = repo.uploadTrainingData(
                    token  = token,
                    serial = serial,
                    pairs  = pairs
                ) { rawSseLine ->
                    // SSE-—Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ "data: 37" –∏–ª–∏ JSON "data: {\"message\":\"ckpt_123\"}"
                    rawSseLine
                        .removePrefix("data:")
                        .trim()
                        .toIntOrNull()
                        ?.let { progressFlow.tryEmit(it.coerceIn(0, 100)) }
                }

                Log.d("TrainingUploadManager", "–ü–æ–ª—É—á–∏–ª–∏ checkpoint = $checkpoint")

                // ‚îÄ‚îÄ‚îÄ 3.3. –ú–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ EXPORTING ‚îÄ‚îÄ‚îÄ
                stateFlow.value = State.EXPORTING

                // ‚îÄ‚îÄ‚îÄ 3.4. –°–∫–∞—á–∏–≤–∞–µ–º –∞—Ä—Ö–∏–≤ –∏ —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º:
                //      –í–ê–ñ–ù–û: —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ **–Ω–µ –º–µ–Ω—è–µ–º**, –æ–Ω —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –≤–∞—à–∏–º:
                //      suspend fun downloadAndUnpackCheckpoint(token, checkpoint, outputDir): Pair<File, List<File>>
                val (zipFile, unpackedFiles) = repo.downloadAndUnpackCheckpoint(
                    token      = token,
                    checkpoint = checkpoint,
                    outputDir  = dir
                )

                // ‚îÄ‚îÄ‚îÄ 3.5. –ù–∞—Ö–æ–¥–∏–º —Å—Ä–µ–¥–∏ unpackedFiles .ckpt –∏ .bin ‚îÄ‚îÄ‚îÄ
                val ckptSrc: File = unpackedFiles.first { it.extension == "ckpt" }
                val binSrc : File = unpackedFiles.first { it.extension == "bin"  }

                // ‚îÄ‚îÄ‚îÄ 3.6. –§–æ—Ä–º–∏—Ä—É–µ–º timestamp (–µ—Å–ª–∏ –≤ –∏–º–µ–Ω–∏ .ckpt –µ—Å—Ç—å ‚Äú_<—á–∏—Å–ª–æ —Å–µ–∫—É–Ω–¥>‚Äù, –ø–∞—Ä—Å–∏–º,
                // otherwise ‚Äî fallback –Ω–∞ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É) ‚îÄ‚îÄ‚îÄ
                val ts: String = run {
                    val fallback = SimpleDateFormat("MM-dd_HH-mm-ss", Locale.getDefault())
                        .format(Date())
                    Regex("_(\\d{9,})\$").find(ckptSrc.nameWithoutExtension)
                        ?.groupValues?.get(1)
                        ?.toLongOrNull()
                        ?.let { secs ->
                            SimpleDateFormat("MM-dd_HH-mm-ss", Locale.getDefault())
                                .format(Date(secs * 1000))
                        } ?: fallback
                }

                // ‚îÄ‚îÄ‚îÄ 3.7. –ë–µ—Ä—ë–º —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä —á–µ–∫–ø–æ–∏–Ω—Ç–∞ –∏–∑ SharedPreferences ‚îÄ‚îÄ‚îÄ
                val nextNum = getNextCheckpointNumber(context)

                // ‚îÄ‚îÄ‚îÄ 3.8. –ö–æ–ø–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –Ω–æ–≤—ã–µ –∏–º–µ–Ω–∞:
                //      checkpoint_‚Ññ<nextNum>_<ts>.ckpt
                //      params_<ts>.bin
                val ckptDst = File(dir, "checkpoint_‚Ññ${nextNum}_$ts.ckpt")
                val binDst  = File(dir, "params_$ts.bin")
                ckptSrc.copyTo(ckptDst, overwrite = true)
                binSrc.copyTo(binDst, overwrite = true)

                // ‚îÄ‚îÄ‚îÄ 3.9. –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π .zip –∏ –≤—Å–µ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã ‚îÄ‚îÄ‚îÄ
                zipFile.delete()
                unpackedFiles.forEach { it.delete() }

                // ‚îÄ‚îÄ‚îÄ 3.10. –í—Å—ë —É—Å–ø–µ—à–Ω–æ ‚îÄ‚îÄ‚îÄ
                stateFlow.value = State.DONE
                progressFlow.tryEmit(100)
                withContext(Dispatchers.Main) {
                    Toast.makeText(
                        context,
                        "–ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ üéâ (checkpoint=$checkpoint)",
                        Toast.LENGTH_SHORT
                    ).show()
                }
            }
            catch (e: Throwable) {
                Log.e("TrainingUploadManager", "pipeline error", e)
                stateFlow.value = State.ERROR
                withContext(Dispatchers.Main) {
                    Toast.makeText(
                        context,
                        "–û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è: ${e.message}",
                        Toast.LENGTH_LONG
                    ).show()
                }
            }
        }
    }

    /**
     * –ë–µ—Ä—ë—Ç –∏–∑ SharedPreferences —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ KEY_CHECKPOINT_NUMBER (–ø–æ –∏–º–µ–Ω–∏ TRAINING_PREFS),
     * –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç—Ç–æ —á–∏—Å–ª–æ –∏ —Ç—É—Ç –∂–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –µ–≥–æ –Ω–∞ +1.
     */
    private fun getNextCheckpointNumber(ctx: Context): Int =
        ctx.getSharedPreferences(PreferenceKeysUBI4.TRAINING_PREFS, Context.MODE_PRIVATE).run {
            val cur = getInt(PreferenceKeysUBI4.KEY_CHECKPOINT_NUMBER, 1)
            edit().putInt(PreferenceKeysUBI4.KEY_CHECKPOINT_NUMBER, cur + 1).apply()
            cur
        }
}