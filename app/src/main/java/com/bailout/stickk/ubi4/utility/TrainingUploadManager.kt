package com.bailout.stickk.ubi4.utility

import android.util.Log

import android.content.Context
import android.widget.Toast
import com.bailout.stickk.ubi4.data.repository.Ubi4TrainingRepository
import com.bailout.stickk.ubi4.persistence.preference.PreferenceKeysUBI4
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import kotlinx.coroutines.flow.MutableSharedFlow
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.channels.BufferOverflow
import okhttp3.MediaType.Companion.toMediaTypeOrNull
import okhttp3.MultipartBody
import okhttp3.RequestBody.Companion.asRequestBody
import kotlinx.serialization.json.Json
import kotlinx.serialization.json.jsonObject
import kotlinx.serialization.json.jsonPrimitive
import java.io.File
import java.io.IOException
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Locale

object TrainingUploadManager {

    /** –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ */
    enum class State { IDLE, RUNNING, EXPORTING, DONE, ERROR }

    /** –ø—É–±–ª–∏—á–Ω—ã–µ —Ñ–ª–æ—É –¥–ª—è UI */
    val stateFlow = MutableStateFlow(State.IDLE)
    val progressFlow = MutableSharedFlow<Int>(
        replay = 1,
        extraBufferCapacity = 100,
        onBufferOverflow = BufferOverflow.DROP_OLDEST
    )

    /** –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –Ω–æ–º–µ—Ä —á–µ–∫–ø–æ–∏–Ω—Ç–∞ –≤ SharedPreferences */
    private fun getNextCheckpointNumber(context: Context): Int {
        val prefs = context.getSharedPreferences(PreferenceKeysUBI4.TRAINING_PREFS, Context.MODE_PRIVATE)
        val current = prefs.getInt(PreferenceKeysUBI4.KEY_CHECKPOINT_NUMBER, 1)
        prefs.edit().putInt(PreferenceKeysUBI4.KEY_CHECKPOINT_NUMBER, current + 1).apply()
        return current
    }

    /** –ó–∞–ø—É—Å–∫–∞–µ—Ç pipeline: upload SSE ‚Üí download ZIP ‚Üí —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ */
    fun launch(
        context: Context,
        repo: Ubi4TrainingRepository,
        token: String,
        serial: String
    ) = CoroutineScope(Dispatchers.IO).launch {
        val dir = context.getExternalFilesDir(null) ?: error("External storage unavailable")
        Log.d("TrainingUploadManager", "Working directory: ${dir.absolutePath}")
        dir.listFiles()?.forEach { Log.d("TrainingUploadManager", "Found file in dir: ${it.name}") }

        // 1) –°—Ç–∞—Ä—Ç—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        stateFlow.value = State.RUNNING

        // –§–æ—Ä–º–∏—Ä—É–µ–º multipart
        val serialPart = MultipartBody.Part.createFormData("serial", serial)
        // –¥–∞–Ω–Ω—ã–µ: .emg8 –∏ –ø–∞—Å–ø–æ—Ä—Ç
        val dataFile = dir.listFiles()?.filter { it.name.endsWith(".emg8") }?.maxByOrNull { it.lastModified() }
            ?: error("log-file not found")
        Log.d("TrainingUploadManager", "Data file: ${dataFile.absolutePath}")
        val passportFile = File(dir, "${dataFile.name}.data_passport").takeIf { it.exists() }
            ?: error("passport not found")
        Log.d("TrainingUploadManager", "Passport file: ${passportFile.absolutePath}")

        val files = listOf(
            MultipartBody.Part.createFormData(
                "files", dataFile.name,
                dataFile.asRequestBody("application/octet-stream".toMediaTypeOrNull())
            ),
            MultipartBody.Part.createFormData(
                "files", passportFile.name,
                passportFile.asRequestBody("application/octet-stream".toMediaTypeOrNull())
            )
        )

        try {
            // 2) –í—ã–ø–æ–ª–Ω—è–µ–º upload –∏ —á–∏—Ç–∞–µ–º SSE
            val resp = repo.api.uploadTrainingData(token, serialPart, files)
            if (!resp.isSuccessful) throw IOException("Upload failed ${resp.code()}")

            val source = resp.body()?.source() ?: error("empty body")
            var lastCheckpoint: String? = null

            while (true) {
                val raw = try { source.readUtf8LineStrict() }
                catch (e: java.io.EOFException) { break }

                // –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∞, –Ω–∞—á–∏–Ω–∞—é—â–∞—è—Å—è —Å "data:"
                if (!raw.startsWith("data:")) continue

                val payload = raw.removePrefix("data:").trim()
                if (payload.startsWith("{")) {
                    // JSON —Å –ø–æ–ª–µ–º message
                    lastCheckpoint = Json.parseToJsonElement(payload)
                        .jsonObject["message"]?.jsonPrimitive?.content
                    Log.d("TrainingUploadManager", "Extracted lastCheckpoint = $lastCheckpoint")
                } else {
                    // —á–∏—Å–ª–æ–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å
                    payload.toIntOrNull()?.let { progressFlow.tryEmit(it) }
                }
            }

            val checkpoint = lastCheckpoint ?: throw IOException("No checkpoint received")

            // 3) –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º UI –Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç
            stateFlow.value = State.EXPORTING

            // 4) –°–∫–∞—á–∏–≤–∞–µ–º –∏ —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º ZIP
            val (zipFile, unpacked) = repo.downloadAndUnpackCheckpoint(token, checkpoint, dir)
            Log.d("TrainingUploadManager", "Downloaded zip: ${zipFile.absolutePath}")
            Log.d("TrainingUploadManager", "Unpacked files: ${unpacked.joinToString { it.name }}")

            // –£–¥–∞–ª—è–µ–º ZIP
            zipFile.delete()

            // –ò–∑–≤–ª–µ–∫–∞–µ–º .ckpt –∏ .bin
            val ckptSrc = unpacked.first { it.extension == "ckpt" }
            val binSrc  = unpacked.first { it.extension == "bin" }

            // timestamp –∏–∑ epoch‚Äë—Å–µ–∫—É–Ω–¥ –≤ –∏–º–µ–Ω–∏ ckpt
            val epochStr = Regex("_(\\d{9,})$").find(ckptSrc.nameWithoutExtension)?.groupValues?.get(1)
            val formatter = SimpleDateFormat("MM-dd_HH-mm-ss", Locale.getDefault())
            val ts = epochStr
                ?.toLongOrNull()
                ?.let { secs -> formatter.format(Date(secs * 1000)) }
                ?: formatter.format(Date())
            val num = getNextCheckpointNumber(context)
            val destDir = dir

            // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º
            val ckptDst = File(destDir, "checkpoint_‚Ññ${num}_$ts.ckpt")
            val binDst  = File(destDir, "params_$ts.bin")
            Log.d("TrainingUploadManager", "Renaming checkpoint: ${ckptSrc.absolutePath} -> ${ckptDst.absolutePath}")
            Log.d("TrainingUploadManager", "Renaming params: ${binSrc.absolutePath} -> ${binDst.absolutePath}")
            ckptSrc.copyTo(ckptDst, overwrite = true)
            binSrc.copyTo(binDst, overwrite = true)
            Log.d("TrainingUploadManager", "Checkpoint saved to: ${ckptDst.absolutePath}")
            Log.d("TrainingUploadManager", "Params saved to: ${binDst.absolutePath}")

            // –ß–∏—Å—Ç–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            unpacked.forEach {
                Log.d("TrainingUploadManager", "Deleting temp file: ${it.absolutePath}")
                it.delete()
            }

            // 5) –£—Å–ø–µ—Ö
            stateFlow.value = State.DONE
            progressFlow.tryEmit(100)
            withContext(Dispatchers.Main) {
                Toast.makeText(context, "–ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ üéâ", Toast.LENGTH_SHORT).show()
            }

        } catch (e: Throwable) {
            Log.e("TrainingUploadManager", "Error during training upload pipeline", e)
            stateFlow.value = State.ERROR
            withContext(Dispatchers.Main) {
                Toast.makeText(context, "–û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è: ${e.message}", Toast.LENGTH_LONG).show()
            }
        }
    }
}