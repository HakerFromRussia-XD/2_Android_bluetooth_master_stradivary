Index: app/src/main/java/me/start/motorica/new_electronic_by_Rodeon/ui/activities/main/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n@file:Suppress(\"SameParameterValue\")\r\n\r\npackage me.start.motorica.new_electronic_by_Rodeon.ui.activities.main\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.bluetooth.BluetoothAdapter\r\nimport android.bluetooth.BluetoothAdapter.LeScanCallback\r\nimport android.bluetooth.BluetoothGattCharacteristic\r\nimport android.bluetooth.BluetoothGattService\r\nimport android.bluetooth.BluetoothManager\r\nimport android.content.*\r\nimport android.nfc.NfcAdapter\r\nimport android.os.*\r\nimport android.view.View\r\nimport android.view.WindowManager\r\nimport android.widget.ExpandableListView\r\nimport android.widget.SimpleExpandableListAdapter\r\nimport android.widget.Toast\r\nimport androidx.fragment.app.DialogFragment\r\nimport io.reactivex.android.schedulers.AndroidSchedulers\r\nimport kotlinx.android.synthetic.main.activity_main.*\r\nimport kotlinx.android.synthetic.main.layout_advanced_settings.*\r\nimport kotlinx.android.synthetic.main.layout_chart.*\r\nimport kotlinx.android.synthetic.main.layout_gestures.*\r\nimport me.start.motorica.R\r\nimport me.start.motorica.new_electronic_by_Rodeon.ble.BluetoothLeService\r\nimport me.start.motorica.new_electronic_by_Rodeon.ble.ConstantManager.*\r\nimport me.start.motorica.new_electronic_by_Rodeon.ble.SampleGattAttributes.*\r\nimport me.start.motorica.new_electronic_by_Rodeon.compose.BaseActivity\r\nimport me.start.motorica.new_electronic_by_Rodeon.compose.qualifiers.RequirePresenter\r\nimport me.start.motorica.new_electronic_by_Rodeon.events.rx.RxUpdateMainEvent\r\nimport me.start.motorica.new_electronic_by_Rodeon.persistence.preference.PreferenceKeys\r\nimport me.start.motorica.new_electronic_by_Rodeon.presenters.MainPresenter\r\nimport me.start.motorica.new_electronic_by_Rodeon.ui.adapters.SectionsPagerAdapter\r\nimport me.start.motorica.new_electronic_by_Rodeon.ui.adapters.SectionsPagerAdapterMonograb\r\nimport me.start.motorica.new_electronic_by_Rodeon.ui.adapters.SectionsPagerAdapterMonograbWithAdvancedSettings\r\nimport me.start.motorica.new_electronic_by_Rodeon.ui.adapters.SectionsPagerAdapterWithAdvancedSettings\r\nimport me.start.motorica.new_electronic_by_Rodeon.ui.fragments.main.*\r\nimport me.start.motorica.new_electronic_by_Rodeon.utils.NavigationUtils\r\nimport me.start.motorica.new_electronic_by_Rodeon.viewTypes.MainActivityView\r\nimport timber.log.Timber\r\nimport java.util.*\r\nimport java.util.concurrent.atomic.AtomicInteger\r\nimport kotlin.collections.ArrayList\r\nimport kotlin.experimental.xor\r\n\r\n@Suppress(\"SameParameterValue\", \"SameParameterValue\", \"DEPRECATION\")\r\n@RequirePresenter(MainPresenter::class)\r\nopen class MainActivity() : BaseActivity<MainPresenter, MainActivityView>(), MainActivityView, Parcelable {\r\n\r\n  private var sensorsDataThreadFlag: Boolean = true\r\n  var reconnectThreadFlag: Boolean = false\r\n  private var reconnectThread: Thread? = null\r\n  private var mScanning = false\r\n  private var mBluetoothAdapter: BluetoothAdapter? = null\r\n\r\n  private var mDeviceName: String? = null\r\n  var mDeviceAddress: String? = null\r\n  var mDeviceType: String? = null\r\n  private var mBluetoothLeService: BluetoothLeService? = null\r\n  private var mGattCharacteristics = ArrayList<ArrayList<BluetoothGattCharacteristic>>()\r\n  private var mGattServicesList: ExpandableListView? = null\r\n  private var mConnectView: View? = null\r\n  private var mDisconnectView: View? = null\r\n  private var mConnected = false\r\n  private var mNotifyCharacteristic: BluetoothGattCharacteristic? = null\r\n  private var mCharacteristic: BluetoothGattCharacteristic? = null\r\n  private var dataSens1 = 0x00\r\n  private var dataSens2 = 0x00\r\n  private var mSettings: SharedPreferences? = null\r\n  private var askAboutUpdate: Boolean = true\r\n  private var progressUpdate: Int = 0\r\n\r\n  private var state = 0\r\n  private var subscribeThread: Thread? = null\r\n  private var mNumberGesture = 0\r\n  // 3D\r\n  var firstRead = true\r\n  private var speedFinger = 0\r\n  // Очередь для задачь работы с BLE\r\n  private val queue = me.start.motorica.new_electronic_by_Rodeon.services.receivers.BlockingQueue()\r\n  private var readDataFlag = true\r\n  private var globalSemaphore = false // флаг, который преостанавливает отправку новой команды, пока ответ на предыдущую не пришёл\r\n  private var endFlag = false\r\n  //  private var showAdvancedSettings = false\r\n  private var swapOpenCloseButton = false\r\n  var setReverseNum = 0\r\n  var setOneChannelNum = 0\r\n  var firstReadCalibrationStatus: Boolean = true\r\n\r\n  private  var countCommand: AtomicInteger = AtomicInteger()\r\n  private var actionState = READ\r\n  var savingSettingsWhenModified = true//продакшн false\r\n  var lockWriteBeforeFirstRead = false //продакшн true    переменная, необходимая для ожидания первого пришедшего ответа от устройства на\r\n  var lockChangeTelemetryNumber = true //продакшн true    переменная, для разового изменения серийника телеметрии\r\n  private var enableInterfaceStatus: Boolean = false\r\n  // отправленный запрос чтения. Если не ожидать её, то поток чтения не перезамускается\r\n  internal var locate = \"\"\r\n\r\n  private val listName = \"NAME\"\r\n  private val listUUID = \"UUID\"\r\n\r\n  // Code to manage Service lifecycle.\r\n  private val mServiceConnection: ServiceConnection = object : ServiceConnection {\r\n    override fun onServiceConnected(componentName: ComponentName, service: IBinder) {\r\n      mBluetoothLeService = (service as BluetoothLeService.LocalBinder).service\r\n      if (!mBluetoothLeService?.initialize()!!) {\r\n        Timber.e(\"Unable to initialize Bluetooth\")\r\n        finish()\r\n      }\r\n      // Automatically connects to the device upon successful start-up initialization.\r\n      mBluetoothLeService?.connect(mDeviceAddress)\r\n      if (mDeviceType!!.contains(EXTRAS_DEVICE_TYPE) || mDeviceType!!.contains(EXTRAS_DEVICE_TYPE_2) || mDeviceType!!.contains(EXTRAS_DEVICE_TYPE_3)\r\n              || mDeviceType!!.contains(DEVICE_TYPE_4))\r\n      {} else {\r\n        mainactivity_navi.visibility = View.GONE\r\n      }\r\n    }\r\n\r\n    override fun onServiceDisconnected(componentName: ComponentName) {\r\n      mBluetoothLeService = null\r\n    }\r\n  }\r\n\r\n  private var gestureTable: Array<Array<Array<Int>>> = Array(7) { Array(2) { Array(6) { 0 } } }\r\n  private var byteEnabledGesture: Byte = 1 // байт по маске показывающий единицами, какие из жестов сконфигурированы и доступны для использования\r\n  private var byteActiveGesture: Byte = 0 // номер активного в данный момент жеста 0-7\r\n  private var byteSideHand: Byte = 0 //  0-left 1-right\r\n  var calibrationStage: Int = 0 // состояния калибровки протеза 0-не откалиброван  1-калибруется  2-откалиброван  |  для запуска калибровки пишем !0\r\n  var telemetryNumber: String = \"\" // состояния калибровки протеза 0-не откалиброван  1-калибруется  2-откалиброван  |  для запуска калибровки пишем !0\r\n  private var firstShowPreloaderCalibration: Boolean = true // нужна для одиночного показа уведомления о начале калибровки\r\n  private var firstHidePreloaderCalibration: Boolean = true // нужна для скрытия уведомления о начале калибровки\r\n  private lateinit var dialog: DialogFragment\r\n\r\n  // Handles various events fired by the Service.\r\n  // ACTION_GATT_CONNECTED: connected to a GATT server.\r\n  // ACTION_GATT_DISCONNECTED: disconnected from a GATT server.\r\n  // ACTION_GATT_SERVICES_DISCOVERED: discovered GATT services.\r\n  // ACTION_DATA_AVAILABLE: received data from the device.  This can be a result of read\r\n  //                        or notification operations.\r\n  private val mGattUpdateReceiver: BroadcastReceiver = object : BroadcastReceiver() {\r\n    override fun onReceive(context: Context, intent: Intent) {\r\n      val action = intent.action\r\n      when {\r\n        BluetoothLeService.ACTION_GATT_CONNECTED == action -> {\r\n          //connected state\r\n//          mConnected = true\r\n//          mConnectView!!.visibility = View.VISIBLE\r\n//          mDisconnectView!!.visibility = View.GONE\r\n          System.err.println(\"DeviceControlActivity------->   момент индикации коннекта\")\r\n          Toast.makeText(context, \"подключение установлено к $mDeviceAddress\", Toast.LENGTH_SHORT).show()\r\n          reconnectThreadFlag = false\r\n          invalidateOptionsMenu()\r\n        }\r\n        BluetoothLeService.ACTION_GATT_DISCONNECTED == action -> {\r\n          //disconnected state\r\n          mConnected = false\r\n          mConnectView!!.visibility = View.GONE\r\n          mDisconnectView!!.visibility = View.VISIBLE\r\n          System.err.println(\"DeviceControlActivity------->   момент индикации дисконнекта\")\r\n          invalidateOptionsMenu()\r\n          clearUI()\r\n\r\n          if(!reconnectThreadFlag && !mScanning){\r\n            reconnectThreadFlag = true\r\n            reconnectThread()\r\n            System.err.println(\"scanLeDevice------->  запуск сканирования из ACTION_GATT_DISCONNECTED\")\r\n          }\r\n        }\r\n        BluetoothLeService.ACTION_GATT_SERVICES_DISCOVERED == action -> {\r\n          System.err.println(\"DeviceControlActivity------->   ACTION_GATT_SERVICES_DISCOVERED\")\r\n          mConnected = true\r\n          mConnectView!!.visibility = View.VISIBLE\r\n          mDisconnectView!!.visibility = View.GONE\r\n          if (mBluetoothLeService != null) {\r\n            displayGattServices(mBluetoothLeService!!.supportedGattServices)\r\n          }\r\n        }\r\n\r\n        BluetoothLeService.ACTION_DATA_AVAILABLE == action -> {\r\n          if ((mDeviceType!!.contains(EXTRAS_DEVICE_TYPE)) || (mDeviceType!!.contains(EXTRAS_DEVICE_TYPE_2)) || (mDeviceType!!.contains(EXTRAS_DEVICE_TYPE_3))) { // новая схема обработки данных\r\n            displayData(intent.getByteArrayExtra(BluetoothLeService.FESTO_A_DATA))\r\n            intent.getStringExtra(BluetoothLeService.ACTION_STATE)?.let { setActionState(it) }\r\n//              System.err.println(\"попадаем сюда\")\r\n          } else {\r\n            if (mDeviceType!!.contains(DEVICE_TYPE_4)) {\r\n              //TODO прописать новую функцию обработки пришедших данных\r\n              if(intent.getByteArrayExtra(BluetoothLeService.MIO_DATA_NEW) != null) displayDataNew(intent.getByteArrayExtra(BluetoothLeService.MIO_DATA_NEW))\r\n              if(intent.getByteArrayExtra(BluetoothLeService.SENS_VERSION_NEW_DATA) != null) displayDataSensAndBMSVersionNew(intent.getByteArrayExtra(BluetoothLeService.SENS_VERSION_NEW_DATA))\r\n              if(intent.getByteArrayExtra(BluetoothLeService.OPEN_THRESHOLD_NEW_DATA) != null) displayDataOpenThresholdNew(intent.getByteArrayExtra(BluetoothLeService.OPEN_THRESHOLD_NEW_DATA))\r\n              if(intent.getByteArrayExtra(BluetoothLeService.CLOSE_THRESHOLD_NEW_DATA) != null) displayDataCloseThresholdNew(intent.getByteArrayExtra(BluetoothLeService.CLOSE_THRESHOLD_NEW_DATA))\r\n              if(intent.getByteArrayExtra(BluetoothLeService.SENS_OPTIONS_NEW_DATA) != null) displayDataSensOptionsNew(intent.getByteArrayExtra(BluetoothLeService.SENS_OPTIONS_NEW_DATA))\r\n              if(intent.getByteArrayExtra(BluetoothLeService.SET_GESTURE_NEW_DATA) != null) displayDataSetGestureNew(intent.getByteArrayExtra(BluetoothLeService.SET_GESTURE_NEW_DATA))\r\n              if(intent.getByteArrayExtra(BluetoothLeService.SET_REVERSE_NEW_DATA) != null) displayDataSetReverseNew(intent.getByteArrayExtra(BluetoothLeService.SET_REVERSE_NEW_DATA))\r\n              if(intent.getByteArrayExtra(BluetoothLeService.ADD_GESTURE_NEW_DATA) != null) displayDataAddGestureNew(intent.getByteArrayExtra(BluetoothLeService.ADD_GESTURE_NEW_DATA))\r\n              if(intent.getByteArrayExtra(BluetoothLeService.TELEMETRY_NUMBER_NEW_DATA) != null) displayDataTelemetryNumberNew(intent.getByteArrayExtra(BluetoothLeService.TELEMETRY_NUMBER_NEW_DATA))\r\n              if(intent.getByteArrayExtra(BluetoothLeService.CALIBRATION_NEW_DATA) != null) {\r\n                intent.getStringExtra(BluetoothLeService.ACTION_STATE)?.let { setActionState(it) }\r\n                displayDataCalibrationNew(intent.getByteArrayExtra(BluetoothLeService.CALIBRATION_NEW_DATA))\r\n              }\r\n              if(intent.getByteArrayExtra(BluetoothLeService.SET_ONE_CHANNEL_NEW_DATA) != null) displayDataSetOneChannelNew(intent.getByteArrayExtra(BluetoothLeService.SET_ONE_CHANNEL_NEW_DATA))\r\n              if(intent.getByteArrayExtra(BluetoothLeService.STATUS_CALIBRATION_NEW_DATA) != null) displayDataStatusCalibrationNew(intent.getByteArrayExtra(BluetoothLeService.STATUS_CALIBRATION_NEW_DATA))\r\n              if(intent.getByteArrayExtra(BluetoothLeService.SHUTDOWN_CURRENT_NEW_DATA) != null) displayDataShutdownCurrentNew(intent.getByteArrayExtra(BluetoothLeService.SHUTDOWN_CURRENT_NEW_DATA))\r\n            } else {\r\n              displayData(intent.getByteArrayExtra(BluetoothLeService.MIO_DATA))\r\n            }\r\n          }\r\n           //вывод на график данных из характеристики показаний пульса\r\n          displayDataWriteOpen(intent.getByteArrayExtra(BluetoothLeService.OPEN_MOTOR_DATA))\r\n          displayDataWriteOpen(intent.getByteArrayExtra(BluetoothLeService.CLOSE_MOTOR_DATA))\r\n          setSensorsDataThreadFlag(intent.getBooleanExtra(BluetoothLeService.SENSORS_DATA_THREAD_FLAG, true))\r\n        }\r\n      }\r\n    }\r\n  }\r\n  @SuppressLint(\"SetTextI18n\")\r\n  private fun displayData(data: ByteArray?) {\r\n    if (data != null){\r\n//      System.err.println(\"BluetoothLeService-------------> прошли первый иф \")\r\n//      System.err.println(\"============================================\")\r\n//      for (bite in data) {\r\n//        System.err.println(\"BluetoothLeService-------------> байт: $bite  size: ${data.size}\")\r\n//      }\r\n      if (castUnsignedCharToInt(data[0]) != 0xAA) {\r\n//        System.err.println(\"BluetoothLeService-------------> прошли второй иф\")\r\n//        System.err.println(\"data.size: \" + data.size)\r\n        if (data.size == 3) {\r\n//          System.err.println(\"mDeviceAddress-------------> прошли третий иф. Распарсили нотификацию\")\r\n          if (castUnsignedCharToInt(data[0]) == 1) {\r\n//            System.err.println(\"mDeviceAddress-------------> штатный режим работы\")\r\n          } else if (castUnsignedCharToInt(data[0]) == 2) {\r\n            if (askAboutUpdate) {\r\n              openFragmentQuestion()\r\n              askAboutUpdate = false\r\n            }\r\n//            System.err.println(\"mDeviceAddress-------------> вывести сообщение о готовности обновления\")\r\n          } else if (castUnsignedCharToInt(data[0]) in 3..102) {\r\n            progressUpdate = (castUnsignedCharToInt(data[0]) - 2)\r\n//            System.err.println(\"mDeviceAddress-------------> процент обновления  \" + (castUnsignedCharToInt(data[0])-2)  + \"%\")\r\n          }\r\n          dataSens1 = castUnsignedCharToInt(data[1])\r\n          dataSens2 = castUnsignedCharToInt(data[2])\r\n          savingSettingsWhenModified = true\r\n        } else if (data.size == 10) {\r\n          if (castUnsignedCharToInt(data[0]) == 1) {\r\n//            System.err.println(\"mDeviceAddress-------------> штатный режим работы\")\r\n          } else if (castUnsignedCharToInt(data[0]) == 2) {\r\n            if (askAboutUpdate) {\r\n              openFragmentQuestion()\r\n              askAboutUpdate = false\r\n            }\r\n//            System.err.println(\"mDeviceAddress-------------> вывести сообщение о готовности обновления\")\r\n          } else if (castUnsignedCharToInt(data[0]) in 3..102) {\r\n            progressUpdate = (castUnsignedCharToInt(data[0]) - 2)\r\n//            System.err.println(\"mDeviceAddress-------------> процент обновления  \" + (castUnsignedCharToInt(data[0])-2) + \"%\")\r\n          }\r\n          dataSens1 = castUnsignedCharToInt(data[1])\r\n          dataSens2 = castUnsignedCharToInt(data[2])\r\n          if (castUnsignedCharToInt(data[3]) != mSettings!!.getInt(PreferenceKeys.DRIVER_NUM, 0)) {\r\n            saveInt(mDeviceAddress + PreferenceKeys.DRIVER_NUM, castUnsignedCharToInt(data[3]))\r\n          }\r\n          if (castUnsignedCharToInt(data[4]) != mSettings!!.getInt(PreferenceKeys.BMS_NUM, 0)) {\r\n            saveInt(mDeviceAddress + PreferenceKeys.BMS_NUM, castUnsignedCharToInt(data[4]))\r\n          }\r\n          if (castUnsignedCharToInt(data[5]) != mSettings!!.getInt(PreferenceKeys.SENS_NUM, 0)) {\r\n            saveInt(mDeviceAddress + PreferenceKeys.SENS_NUM, castUnsignedCharToInt(data[5]))\r\n          }\r\n          if (castUnsignedCharToInt(data[6]) != mSettings!!.getInt(PreferenceKeys.OPEN_CH_NUM, 0)) {\r\n            saveInt(mDeviceAddress + PreferenceKeys.OPEN_CH_NUM, castUnsignedCharToInt(data[6]))\r\n          }\r\n          if (castUnsignedCharToInt(data[7]) != mSettings!!.getInt(PreferenceKeys.CLOSE_CH_NUM, 0)) {\r\n            saveInt(mDeviceAddress + PreferenceKeys.CLOSE_CH_NUM, castUnsignedCharToInt(data[7]))\r\n          }\r\n          if (castUnsignedCharToInt(data[8]) != mSettings!!.getInt(PreferenceKeys.CORRELATOR_NOISE_THRESHOLD_1_NUM, 0)) {\r\n            saveInt(mDeviceAddress + PreferenceKeys.CORRELATOR_NOISE_THRESHOLD_1_NUM, castUnsignedCharToInt(data[8]))\r\n          }\r\n          if (castUnsignedCharToInt(data[9]) != mSettings!!.getInt(PreferenceKeys.CORRELATOR_NOISE_THRESHOLD_2_NUM, 0)) {\r\n            saveInt(mDeviceAddress + PreferenceKeys.CORRELATOR_NOISE_THRESHOLD_2_NUM, castUnsignedCharToInt(data[9]))\r\n          }\r\n        }\r\n        lockWriteBeforeFirstRead = false\r\n      } else {\r\n        if(countCommand.get() > 0) {\r\n          countCommand.get().dec()\r\n          System.err.println(\"Decrement counter: ${countCommand.get()}\")\r\n        }\r\n        if (countCommand.get() == 0) {\r\n          globalSemaphore = false\r\n          readDataFlag = true\r\n          runReadData()\r\n        }\r\n      }\r\n    }\r\n  }\r\n  private fun displayDataNew(data: ByteArray?) {\r\n    if (data != null) {\r\n        if (data.size == 2) {\r\n          dataSens1 = castUnsignedCharToInt(data[0])\r\n          dataSens2 = castUnsignedCharToInt(data[1])\r\n          savingSettingsWhenModified = true\r\n        }\r\n      lockWriteBeforeFirstRead = false\r\n    }\r\n  }\r\n  private fun displayDataSensAndBMSVersionNew(data: ByteArray?) {\r\n    if (data != null) {\r\n      saveInt(mDeviceAddress + PreferenceKeys.SENS_NUM, castUnsignedCharToInt(data[0]))\r\n      saveInt(mDeviceAddress + PreferenceKeys.BMS_NUM, 100)\r\n      globalSemaphore = true\r\n    }\r\n  }\r\n  private fun displayDataOpenThresholdNew(data: ByteArray?) {\r\n    if (data != null) {\r\n      saveInt(mDeviceAddress + PreferenceKeys.OPEN_CH_NUM, castUnsignedCharToInt(data[0]))\r\n      globalSemaphore = true\r\n      System.err.println(\"---> Принятые данные порога: \" + data[0])\r\n    }\r\n  }\r\n  private fun displayDataCloseThresholdNew(data: ByteArray?) {\r\n    if (data != null) {\r\n      saveInt(mDeviceAddress + PreferenceKeys.CLOSE_CH_NUM, castUnsignedCharToInt(data[0]))\r\n      globalSemaphore = true\r\n    }\r\n  }\r\n  private fun displayDataSensOptionsNew(data: ByteArray?) {\r\n    if (data != null) {\r\n      saveInt(mDeviceAddress + PreferenceKeys.CORRELATOR_NOISE_THRESHOLD_1_NUM, castUnsignedCharToInt(data[0]))\r\n      saveInt(mDeviceAddress + PreferenceKeys.CORRELATOR_NOISE_THRESHOLD_2_NUM, castUnsignedCharToInt(data[13]))\r\n      globalSemaphore = true\r\n    }\r\n  }\r\n  private fun displayDataSetGestureNew(data: ByteArray?) {\r\n    if (data != null) {\r\n      saveInt(mDeviceAddress + PreferenceKeys.SELECT_GESTURE_NUM, castUnsignedCharToInt(data[0]) + 1)\r\n      System.err.println(\"---> Принятые данные активного жеста: \" + (data[0] + 1))\r\n      globalSemaphore = true\r\n    }\r\n  }\r\n  private fun displayDataSetReverseNew(data: ByteArray?) {\r\n    if (data != null) {\r\n      setReverseNum = castUnsignedCharToInt(data[0])\r\n      globalSemaphore = true\r\n    }\r\n  }\r\n  private fun displayDataAddGestureNew(data: ByteArray?) {\r\n    if (data != null) {\r\n      System.err.println(\"Данные data.size = \" + data.size)\r\n      if (data.size == 87) {\r\n        for (i in 0 until 7) {\r\n          for (j in 0 until 2) {\r\n            for (k in 0 until 6) {\r\n              gestureTable[i][j][k] = castUnsignedCharToInt(data[i * 12 + j * 6 + k])\r\n              if(k == 4) { gestureTable[i][j][k] = ((88 - castUnsignedCharToInt(data[i * 12 + j * 6 + k])).toFloat()/100*91).toInt()-52 }\r\n              if(k == 5) { gestureTable[i][j][k] = (( castUnsignedCharToInt(data[i * 12 + j * 6 + k])).toFloat()/100*90).toInt() }\r\n            }\r\n          }\r\n        }\r\n        byteEnabledGesture = castUnsignedCharToInt(data[84]).toByte()\r\n        byteActiveGesture = castUnsignedCharToInt(data[85]).toByte()\r\n\r\n        saveGestureState()\r\n      }\r\n\r\n      for (i in 0 until 7) {\r\n        System.err.println(\"Данные жеста №$i\")\r\n        for (j in 0 until 2) {\r\n          System.err.println(\"Данные схвата №$j\")\r\n          for (k in 0 until 6) {\r\n            System.err.println(\"Данные пальца №$k   Данные:\" + gestureTable[i][j][k])\r\n          }\r\n        }\r\n      }\r\n      System.err.println(\"Данные byteEnabledGesture   Данные:$byteEnabledGesture\")\r\n      System.err.println(\"Данные byteActiveGesture   Данные:$byteActiveGesture\")\r\n      globalSemaphore = true\r\n    }\r\n  }\r\n  private fun displayDataTelemetryNumberNew(data: ByteArray?) {\r\n    if (data != null) {\r\n      telemetryNumber = \"\"\r\n      for (i in data.indices) {\r\n        telemetryNumber += data[i].toChar()\r\n      }\r\n      System.err.println(\"Принятые данные телеметрии: $telemetryNumber\")\r\n      globalSemaphore = true\r\n    }\r\n  }\r\n  private fun displayDataSetOneChannelNew(data: ByteArray?) {\r\n    if (data != null) {\r\n      setOneChannelNum = castUnsignedCharToInt(data[0])\r\n      globalSemaphore = true\r\n    }\r\n  }\r\n  private fun displayDataCalibrationNew(data: ByteArray?) {\r\n    if (data != null) {\r\n      if (actionState.equals(READ)) {\r\n        if (firstReadCalibrationStatus) {\r\n          calibrationStage = castUnsignedCharToInt(data[0])\r\n          System.err.println(\"---> чтение глобальной калибровки: $calibrationStage\")\r\n          firstReadCalibrationStatus = false\r\n        }\r\n      }\r\n      if (actionState.equals(WRITE)) {\r\n        calibrationStage = castUnsignedCharToInt(data[0])\r\n        if (calibrationStage == 9 || calibrationStage == 10) {// 9 и 10 - это числа отправляемые для калибровки правой и левой руки соответственно\r\n//          openFragmentInfoCalibration()\r\n          RxUpdateMainEvent.getInstance().updateCalibrationStatus(true)\r\n        }\r\n        System.err.println(\"---> запись глобальной калибровки: $calibrationStage\")\r\n      }\r\n      globalSemaphore = true\r\n    }\r\n  }\r\n  private fun displayDataStatusCalibrationNew(data: ByteArray?) {\r\n    if (data != null) {\r\n      var statusCalibration = \"\"\r\n      for (i in data.indices) {\r\n        statusCalibration += \"  \"+data[i]\r\n\r\n//        if (data[i].toInt() == 6) Toast.makeText(this, \"Протез откалиброван!\", Toast.LENGTH_LONG).show() //если палец слишком сильно затянут\r\n//        if (data[i].toInt() == 5) Toast.makeText(this, \"Палец №$i слишком сильно затянут\", Toast.LENGTH_LONG).show() //если палец слишком сильно затянут\r\n//        if (data[i].toInt() == 4) Toast.makeText(this, \"Палец №$i прокручивается\", Toast.LENGTH_LONG).show() //если палец прокручивается\r\n//        if (data[i].toInt() == 3) Toast.makeText(this, \"На пальце №$i отключен энкодер\", Toast.LENGTH_LONG).show() //если на пальце отключен энкодер\r\n//        if (data[i].toInt() == 2) Toast.makeText(this, \"На пальце №$i отключен мотор\", Toast.LENGTH_LONG).show() //если на пальце отключен мотор\r\n      }\r\n      Toast.makeText(this, \"Статус калибровки: $statusCalibration\", Toast.LENGTH_LONG).show()\r\n      saveInt(mDeviceAddress + PreferenceKeys.CALIBRATING_STATUS, 0)\r\n      globalSemaphore = true\r\n    }\r\n  }\r\n  private fun displayDataShutdownCurrentNew(data: ByteArray?) {\r\n    if (data != null) {\r\n      for (i in data.indices) {\r\n        System.err.println(\"Принятые данные состояния токов: \" + data[i] + \"  \" + mDeviceAddress + \"SHUTDOWN_CURRENT_NUM_$i\")\r\n        saveInt(mDeviceAddress + \"SHUTDOWN_CURRENT_NUM_\" + (i + 1), castUnsignedCharToInt(data[i]))\r\n      }\r\n      globalSemaphore = true\r\n    }\r\n  }\r\n  private fun displayDataWriteOpen(data: ByteArray?) {\r\n    if (data != null) {\r\n//      for (bite in data) {\r\n//        System.err.println(\"BluetoothLeService-------------> байт: $bite  size: ${data.size}\")\r\n//      }\r\n      if (data[0].toInt() == 1){ state = 1 }\r\n      if (data[0].toInt() == 0){ state = 2 }\r\n    }\r\n  }\r\n  fun setActionState(value: String) {\r\n    actionState = value\r\n  }\r\n\r\n  constructor(parcel: Parcel) : this() {\r\n    sensorsDataThreadFlag = parcel.readByte() != 0.toByte()\r\n    mDeviceName = parcel.readString()\r\n    mDeviceAddress = parcel.readString()\r\n    mDeviceType = parcel.readString()\r\n    mConnected = parcel.readByte() != 0.toByte()\r\n    mNotifyCharacteristic = parcel.readParcelable(BluetoothGattCharacteristic::class.java.classLoader)\r\n    mCharacteristic = parcel.readParcelable(BluetoothGattCharacteristic::class.java.classLoader)\r\n    dataSens1 = parcel.readInt()\r\n    dataSens2 = parcel.readInt()\r\n    state = parcel.readInt()\r\n  }\r\n\r\n  private fun clearUI() {\r\n    mGattServicesList!!.setAdapter(null as SimpleExpandableListAdapter?)\r\n    enableInterface(false)\r\n  }\r\n\r\n  @SuppressLint(\"CheckResult\", \"NewApi\")\r\n  override fun onCreate(savedInstanceState: Bundle?) {\r\n    super.onCreate(savedInstanceState)\r\n    setContentView(R.layout.activity_main)\r\n    initBaseView(this)\r\n    //changing statusbar\r\n    val window = this.window\r\n    window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS)\r\n    window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS)\r\n    window.statusBarColor = this.resources.getColor(R.color.blueStatusBar, theme)\r\n\r\n    // Initializes a Bluetooth adapter.  For API level 18 and above, get a reference to\r\n    // BluetoothAdapter through BluetoothManager.\r\n    val bluetoothManager = getSystemService(BLUETOOTH_SERVICE) as BluetoothManager\r\n    mBluetoothAdapter = bluetoothManager.adapter\r\n    val gattServiceIntent = Intent(this, BluetoothLeService::class.java)\r\n    bindService(gattServiceIntent, mServiceConnection, BIND_AUTO_CREATE)\r\n    registerReceiver(mGattUpdateReceiver, makeGattUpdateIntentFilter())\r\n\r\n\r\n    locate = Locale.getDefault().toString()\r\n    getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON)\r\n    getWindow().navigationBarColor = resources.getColor(R.color.colorPrimary)\r\n    mSettings = getSharedPreferences(PreferenceKeys.APP_PREFERENCES, Context.MODE_PRIVATE)\r\n\r\n    val intent = intent\r\n    mDeviceName = intent.getStringExtra(EXTRAS_DEVICE_NAME)\r\n    mDeviceAddress = intent.getStringExtra(EXTRAS_DEVICE_ADDRESS)\r\n    presenter.preferenceManager.putString(PreferenceKeys.DEVICE_NAME, mDeviceName.toString())\r\n    presenter.preferenceManager.putString(PreferenceKeys.DEVICE_ADDR, mDeviceAddress.toString())\r\n    saveText(PreferenceKeys.DEVICE_ADDRESS_CONNECTED, mDeviceAddress.toString())\r\n    mDeviceType = intent.getStringExtra(EXTRAS_DEVICE_TYPE)\r\n    System.err.println(\"mDeviceAddress: $mDeviceAddress\")\r\n\r\n    // Sets up UI references.\r\n    mGattServicesList = findViewById(R.id.gatt_services_list)\r\n    mConnectView = findViewById(R.id.connect_view)\r\n    mDisconnectView = findViewById(R.id.disconnect_view)\r\n\r\n    RxUpdateMainEvent.getInstance().gestureStateObservable\r\n            .compose(bindToLifecycle())\r\n            .observeOn(AndroidSchedulers.mainThread())\r\n            .subscribe { parameters ->\r\n              bleCommandConnector(byteArrayOf((parameters.gestureNumber).toByte(), parameters.openStage.toByte(), parameters.closeStage.toByte(), parameters.state.toByte()), ADD_GESTURE, WRITE, 12)\r\n            }\r\n    RxUpdateMainEvent.getInstance().gestureStateWithEncodersObservable\r\n            .compose(bindToLifecycle())\r\n            .observeOn(AndroidSchedulers.mainThread())\r\n            .subscribe { parameters ->\r\n              System.err.println(\"Prishedshie parametri: ${parameters.openStage1.toByte()}\")\r\n              if (parameters.state == 1) {\r\n                runWriteData(byteArrayOf(parameters.openStage1.toByte(), parameters.openStage2.toByte(), parameters.openStage3.toByte(),\r\n                        parameters.openStage4.toByte(), parameters.openStage5.toByte(), parameters.openStage6.toByte()), MOVE_ALL_FINGERS_NEW, WRITE)\r\n              } else {\r\n                runWriteData(byteArrayOf(parameters.closeStage1.toByte(), parameters.closeStage2.toByte(), parameters.closeStage3.toByte(),\r\n                        parameters.closeStage4.toByte(), parameters.closeStage5.toByte(), parameters.closeStage6.toByte()), MOVE_ALL_FINGERS_NEW, WRITE)\r\n              }\r\n              if (parameters.withChangeGesture) {\r\n                System.err.println(\"Prishedshie s izmeneniem gesta v pamiati openStage1: ${parameters.openStage1}    closeStage1: ${parameters.closeStage1}\")\r\n                System.err.println(\"Prishedshie s izmeneniem gesta v pamiati openStage2: ${parameters.openStage2}    closeStage2: ${parameters.closeStage2}\")\r\n                System.err.println(\"Prishedshie s izmeneniem gesta v pamiati openStage3: ${parameters.openStage3}    closeStage3: ${parameters.closeStage3}\")\r\n                System.err.println(\"Prishedshie s izmeneniem gesta v pamiati openStage4: ${parameters.openStage4}    closeStage4: ${parameters.closeStage4}\")\r\n                System.err.println(\"Prishedshie s izmeneniem gesta v pamiati openStage5: ${parameters.openStage5}    closeStage5: ${parameters.closeStage5}\")\r\n                System.err.println(\"Prishedshie s izmeneniem gesta v pamiati openStage6: ${parameters.openStage6}    closeStage6: ${parameters.closeStage6}\")\r\n\r\n                runWriteData(byteArrayOf((parameters.gestureNumber).toByte(),\r\n                        parameters.openStage1.toByte(), parameters.openStage2.toByte(), parameters.openStage3.toByte(),\r\n                        parameters.openStage4.toByte(), parameters.openStage5.toByte(), parameters.openStage6.toByte(),\r\n                        parameters.closeStage1.toByte(), parameters.closeStage2.toByte(), parameters.closeStage3.toByte(),\r\n                        parameters.closeStage4.toByte(), parameters.closeStage5.toByte(), parameters.closeStage6.toByte()), CHANGE_GESTURE_NEW, WRITE)\r\n              }\r\n            }\r\n    RxUpdateMainEvent.getInstance().fingerSpeedObservable\r\n            .compose(bindToLifecycle())\r\n            .observeOn(AndroidSchedulers.mainThread())\r\n            .subscribe { speed ->\r\n              System.err.println(\" MainActivity -----> change gripper. fingerSpeed = $speed\")\r\n              speedFinger = speed\r\n            }\r\n    RxUpdateMainEvent.getInstance().calibratingStatusObservable\r\n            .compose(bindToLifecycle())\r\n            .observeOn(AndroidSchedulers.mainThread())\r\n            .subscribe { _ ->\r\n              openFragmentInfoCalibration()\r\n            }\r\n\r\n    val worker = Thread {\r\n      while (true) {\r\n        val task: Runnable = queue.get()\r\n        task.run()\r\n      }\r\n    }\r\n    worker.start()\r\n\r\n    initUI()\r\n  }\r\n\r\n  private fun initUI() {\r\n    if (mSettings!!.getInt(PreferenceKeys.ADVANCED_SETTINGS, 4) == 1) {\r\n      if ( mDeviceType!!.contains(EXTRAS_DEVICE_TYPE) || mDeviceType!!.contains(EXTRAS_DEVICE_TYPE_2) || mDeviceType!!.contains(EXTRAS_DEVICE_TYPE_3)\r\n              || mDeviceType!!.contains(DEVICE_TYPE_4)) {\r\n        val mSectionsPagerAdapter =  SectionsPagerAdapterWithAdvancedSettings(supportFragmentManager)\r\n        mainactivity_viewpager.adapter = mSectionsPagerAdapter\r\n        mainactivity_navi.setViewPager(mainactivity_viewpager, 1)\r\n      } else {\r\n        val mSectionsPagerAdapter =  SectionsPagerAdapterMonograbWithAdvancedSettings(supportFragmentManager)\r\n        mainactivity_viewpager.adapter = mSectionsPagerAdapter\r\n        mainactivity_navi.setViewPager(mainactivity_viewpager, 0)\r\n      }\r\n      NavigationUtils.showAdvancedSettings = true\r\n    } else {\r\n      if ( mDeviceType!!.contains(EXTRAS_DEVICE_TYPE) || mDeviceType!!.contains(EXTRAS_DEVICE_TYPE_2) || mDeviceType!!.contains(EXTRAS_DEVICE_TYPE_3)\r\n              || mDeviceType!!.contains(DEVICE_TYPE_4)) {\r\n        val mSectionsPagerAdapter =  SectionsPagerAdapter(supportFragmentManager)\r\n        mainactivity_viewpager.adapter = mSectionsPagerAdapter\r\n        mainactivity_navi.setViewPager(mainactivity_viewpager, 1)//здесь можно настроить номер вью из боттом бара, открывающейся при страте приложения\r\n      } else {\r\n        val mSectionsPagerAdapter =  SectionsPagerAdapterMonograb(supportFragmentManager)\r\n        mainactivity_viewpager.adapter = mSectionsPagerAdapter\r\n        mainactivity_navi.setViewPager(mainactivity_viewpager, 0)//здесь можно настроить номер вью из боттом бара, открывающейся при страте приложения\r\n      }\r\n    }\r\n\r\n    mainactivity_viewpager.offscreenPageLimit = 3\r\n    NavigationUtils.setComponents(baseContext, mainactivity_navi)\r\n  }\r\n\r\n  fun showAdvancedSettings(showAdvancedSettings: Boolean) {\r\n    NavigationUtils.showAdvancedSettings = showAdvancedSettings\r\n    if (showAdvancedSettings) {\r\n      saveInt(PreferenceKeys.ADVANCED_SETTINGS, 1)\r\n    }  else {\r\n      saveInt(PreferenceKeys.ADVANCED_SETTINGS, 0)\r\n    }\r\n\r\n\r\n    mainactivity_viewpager.isSaveFromParentEnabled = false\r\n    if (showAdvancedSettings) {\r\n      if (mDeviceType!!.contains(EXTRAS_DEVICE_TYPE) || mDeviceType!!.contains(EXTRAS_DEVICE_TYPE_2) || mDeviceType!!.contains(EXTRAS_DEVICE_TYPE_3)\r\n              || mDeviceType!!.contains(DEVICE_TYPE_4)) {\r\n        val mSectionsPagerAdapter =  SectionsPagerAdapterWithAdvancedSettings(supportFragmentManager)\r\n        mainactivity_viewpager.adapter = mSectionsPagerAdapter\r\n        mainactivity_navi.setViewPager(mainactivity_viewpager, 1)\r\n      } else {\r\n        val mSectionsPagerAdapter =  SectionsPagerAdapterMonograbWithAdvancedSettings(supportFragmentManager)\r\n        mainactivity_viewpager.adapter = mSectionsPagerAdapter\r\n        mainactivity_navi.setViewPager(mainactivity_viewpager, 0)\r\n      }\r\n    } else {\r\n      if ( mDeviceType!!.contains(EXTRAS_DEVICE_TYPE) || mDeviceType!!.contains(EXTRAS_DEVICE_TYPE_2) || mDeviceType!!.contains(EXTRAS_DEVICE_TYPE_3)\r\n              || mDeviceType!!.contains(DEVICE_TYPE_4)) {\r\n        val mSectionsPagerAdapter =  SectionsPagerAdapter(supportFragmentManager)\r\n        mainactivity_viewpager.adapter = mSectionsPagerAdapter\r\n        mainactivity_navi.setViewPager(mainactivity_viewpager, 1)//здесь можно настроить номер вью из боттом бара, открывающейся при страте приложения\r\n      } else {\r\n        val mSectionsPagerAdapter =  SectionsPagerAdapterMonograb(supportFragmentManager)\r\n        mainactivity_viewpager.adapter = mSectionsPagerAdapter\r\n        mainactivity_navi.setViewPager(mainactivity_viewpager, 0)//здесь можно настроить номер вью из боттом бара, открывающейся при страте приложения\r\n      }\r\n    }\r\n\r\n    Toast.makeText(this, \"Advanced settings: $showAdvancedSettings\", Toast.LENGTH_SHORT).show()\r\n\r\n    mainactivity_viewpager.offscreenPageLimit = 3\r\n    NavigationUtils.setComponents(baseContext, mainactivity_navi)\r\n  }\r\n\r\n  override fun onResume() {\r\n    super.onResume()\r\n    // Ensures Bluetooth is enabled on the device.  If Bluetooth is not currently enabled,\r\n    // fire an intent to display a dialog asking the user to grant permission to enable it.\r\n    if (!mBluetoothAdapter!!.isEnabled) {\r\n      val enableBtIntent = Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE)\r\n      startActivityForResult(enableBtIntent, REQUEST_ENABLE_BT)\r\n    }\r\n\r\n    val filter = IntentFilter(NfcAdapter.ACTION_NDEF_DISCOVERED)\r\n    try {\r\n      filter.addDataType(\"waterdays_nfc/*\")\r\n    } catch (e: Exception) {\r\n      e.printStackTrace()\r\n    }\r\n\r\n    val i = Intent(this, javaClass)\r\n    i.flags = Intent.FLAG_ACTIVITY_SINGLE_TOP\r\n\r\n    readDataFlag = true\r\n    //BLE\r\n    if (mBluetoothLeService != null) {\r\n      mDeviceName = presenter.preferenceManager.getString(PreferenceKeys.DEVICE_NAME, DEVICE_NAME)\r\n      mDeviceAddress = presenter.preferenceManager.getString(PreferenceKeys.DEVICE_ADDR, \"7F:D6:3D:68:62:28\")\r\n//      reconnectThreadFlag = true\r\n//      reconnectThread()\r\n    }\r\n  }\r\n  override fun onPause() {\r\n    super.onPause()\r\n    endFlag = true\r\n\r\n  }\r\n  override fun onDestroy() {\r\n    super.onDestroy()\r\n    if (mBluetoothLeService != null) {\r\n      unbindService(mServiceConnection)\r\n      mBluetoothLeService = null\r\n    }\r\n    readDataFlag = false\r\n//    sensorsDataThreadFlag = false\r\n    endFlag = true\r\n    if (mScanning) { mBluetoothAdapter!!.stopLeScan(mLeScanCallback) }\r\n  }\r\n  override fun onNewIntent(intent: Intent) {\r\n    super.onNewIntent(intent)\r\n    setIntent(intent)\r\n  }\r\n\r\n  // Demonstrates how to iterate through the supported GATT Services/Characteristics.\r\n  // In this sample, we populate the data structure that is bound to the ExpandableListView\r\n  // on the UI.\r\n  private fun displayGattServices(gattServices: List<BluetoothGattService>?) {\r\n    System.err.println(\"DeviceControlActivity------->   момент начала выстраивания списка параметров\")\r\n    if (gattServices == null) return\r\n    var uuid: String?\r\n    val unknownServiceString = (\"unknown_service\")\r\n    val unknownCharaString =(\"unknown_characteristic\")\r\n    val gattServiceData = ArrayList<HashMap<String, String?>>()\r\n    val gattCharacteristicData = ArrayList<ArrayList<HashMap<String, String?>>>()\r\n    mGattCharacteristics = java.util.ArrayList()\r\n\r\n\r\n    // Loops through available GATT Services.\r\n    for (gattService in gattServices) {\r\n      val currentServiceData = HashMap<String, String?>()\r\n      uuid = gattService.uuid.toString()\r\n      currentServiceData[listName] = lookup(uuid, unknownServiceString)\r\n      currentServiceData[listUUID] = uuid\r\n      gattServiceData.add(currentServiceData)\r\n      val gattCharacteristicGroupData = ArrayList<HashMap<String, String?>>()\r\n      val gattCharacteristics = gattService.characteristics\r\n      val charas = ArrayList<BluetoothGattCharacteristic>()\r\n\r\n      // Loops through available Characteristics.\r\n      for (gattCharacteristic in gattCharacteristics) {\r\n        charas.add(gattCharacteristic)\r\n        val currentCharaData = HashMap<String, String?>()\r\n        uuid = gattCharacteristic.uuid.toString()\r\n        currentCharaData[listName] = lookup(uuid, unknownCharaString)\r\n        currentCharaData[listUUID] = uuid\r\n        gattCharacteristicGroupData.add(currentCharaData)\r\n        System.err.println(\"------->   ХАРАКТЕРИСТИКА: $uuid\")\r\n      }\r\n      mGattCharacteristics.add(charas)\r\n      gattCharacteristicData.add(gattCharacteristicGroupData)\r\n    }\r\n    val gattServiceAdapter = SimpleExpandableListAdapter(\r\n            this,\r\n            gattServiceData,\r\n            android.R.layout.simple_expandable_list_item_2, arrayOf(listName, listUUID), intArrayOf(android.R.id.text1, android.R.id.text2),\r\n            gattCharacteristicData,\r\n            android.R.layout.simple_expandable_list_item_2, arrayOf(listName, listUUID), intArrayOf(android.R.id.text1, android.R.id.text2))\r\n    mGattServicesList!!.setAdapter(gattServiceAdapter)\r\n    if (mScanning) { scanLeDevice(false) }\r\n    enableInterface(true)\r\n  }\r\n  private fun enableInterface(enabled: Boolean) {\r\n    enableInterfaceStatus = enabled\r\n    close_btn.isEnabled = enabled\r\n    open_btn.isEnabled = enabled\r\n    thresholds_blocking_sw.isEnabled = enabled\r\n    correlator_noise_threshold_1_sb.isEnabled = enabled\r\n    correlator_noise_threshold_2_sb.isEnabled = enabled\r\n    if(enabled) {\r\n      if ( mDeviceType!!.contains(EXTRAS_DEVICE_TYPE) || mDeviceType!!.contains(EXTRAS_DEVICE_TYPE_2) || mDeviceType!!.contains(EXTRAS_DEVICE_TYPE_3) || mDeviceType!!.contains(DEVICE_TYPE_4)) {\r\n        gesture_1_btn?.isEnabled = enabled\r\n        gesture_2_btn?.isEnabled = enabled\r\n        gesture_3_btn?.isEnabled = enabled\r\n        gesture_4_btn?.isEnabled = enabled\r\n        gesture_5_btn?.isEnabled = enabled\r\n        gesture_6_btn?.isEnabled = enabled\r\n        gesture_7_btn?.isEnabled = enabled\r\n        gesture_8_btn?.isEnabled = enabled\r\n        gesture_settings_2_btn?.isEnabled = enabled\r\n        gesture_settings_3_btn?.isEnabled = enabled\r\n        gesture_settings_4_btn?.isEnabled = enabled\r\n        gesture_settings_5_btn?.isEnabled = enabled\r\n        gesture_settings_6_btn?.isEnabled = enabled\r\n        gesture_settings_7_btn?.isEnabled = enabled\r\n        gesture_settings_8_btn?.isEnabled = enabled\r\n        if (mSettings!!.getInt(PreferenceKeys.ADVANCED_SETTINGS, 4) == 1) {\r\n          swap_sensors_sw?.isEnabled = enabled\r\n          swap_open_close_sw?.isEnabled = enabled\r\n          single_channel_control_sw?.isEnabled = enabled\r\n          reset_to_factory_settings_btn?.isEnabled = enabled\r\n          calibration_btn?.isEnabled = enabled\r\n          get_setup_btn?.isEnabled = enabled\r\n          set_setup_btn?.isEnabled = enabled\r\n          shutdown_current_sb?.isEnabled = enabled\r\n        }\r\n      }\r\n      sensorsDataThreadFlag = enabled\r\n      if ( mDeviceType!!.contains(EXTRAS_DEVICE_TYPE) || mDeviceType!!.contains(EXTRAS_DEVICE_TYPE_2) || mDeviceType!!.contains(EXTRAS_DEVICE_TYPE_3)) {\r\n        runReadData()\r\n      } else {\r\n        if (mDeviceType!!.contains(DEVICE_TYPE_4)) {\r\n          runStart()\r\n        } else {\r\n          startSubscribeSensorsDataThread()\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  fun bleCommandConnector(byteArray: ByteArray?, Command: String, typeCommand: String, register: Int) {\r\n    if ( mDeviceType!!.contains(EXTRAS_DEVICE_TYPE) || mDeviceType!!.contains(EXTRAS_DEVICE_TYPE_2)  || mDeviceType!!.contains(EXTRAS_DEVICE_TYPE_3))  {\r\n      val length = byteArray!!.size + 2\r\n      val sendByteMassive = ByteArray(length + 3)\r\n      sendByteMassive[0] = 0xAA.toByte()\r\n      sendByteMassive[1] = 0xAA.toByte()\r\n      sendByteMassive[2] = length.toByte()\r\n      when (register) {\r\n        0 -> {\r\n          sendByteMassive[3] = 0x00\r\n          sendByteMassive[4] = byteArray[0]\r\n          sendByteMassive[5] = crcCalc(sendByteMassive)\r\n        }\r\n        1 -> {\r\n          sendByteMassive[3] = 0x01\r\n          sendByteMassive[4] = byteArray[0]\r\n          sendByteMassive[5] = crcCalc(sendByteMassive)\r\n        }\r\n        3 -> {\r\n          sendByteMassive[3] = 0x03\r\n          sendByteMassive[4] = byteArray[0]\r\n          sendByteMassive[5] = crcCalc(sendByteMassive)\r\n        }\r\n        4 -> {\r\n          sendByteMassive[3] = 0x04\r\n          sendByteMassive[4] = byteArray[0]\r\n          sendByteMassive[5] = crcCalc(sendByteMassive)\r\n        }\r\n        5 -> {\r\n          sendByteMassive[3] = 0x05\r\n          sendByteMassive[4] = byteArray[0]\r\n          sendByteMassive[5] = crcCalc(sendByteMassive)\r\n        }\r\n        6 -> {\r\n          sendByteMassive[3] = 0x06\r\n          sendByteMassive[4] = byteArray[0]\r\n          sendByteMassive[5] = byteArray[1]\r\n          sendByteMassive[6] = crcCalc(sendByteMassive)\r\n        }\r\n        7 -> {\r\n          sendByteMassive[3] = 0x07\r\n          sendByteMassive[4] = byteArray[0]\r\n          sendByteMassive[5] = byteArray[1]\r\n          sendByteMassive[6] = crcCalc(sendByteMassive)\r\n        }\r\n        10 -> {\r\n          sendByteMassive[3] = 10.toByte()\r\n          sendByteMassive[4] = byteArray[0]\r\n          sendByteMassive[5] = crcCalc(sendByteMassive)\r\n        }\r\n        11 -> {\r\n          sendByteMassive[3] = 11.toByte()\r\n          sendByteMassive[4] = byteArray[0]\r\n          sendByteMassive[5] = byteArray[1]\r\n          sendByteMassive[6] = byteArray[2]\r\n          sendByteMassive[7] = crcCalc(sendByteMassive)\r\n        }\r\n        12 -> {\r\n          sendByteMassive[3] = 12.toByte()\r\n          sendByteMassive[4] = byteArray[0]\r\n          sendByteMassive[5] = byteArray[1]\r\n          sendByteMassive[6] = byteArray[2]\r\n          sendByteMassive[7] = byteArray[3]\r\n          sendByteMassive[8] = crcCalc(sendByteMassive)\r\n        }\r\n        13 -> {\r\n          sendByteMassive[3] = 13.toByte()\r\n          sendByteMassive[4] = byteArray[0]\r\n          sendByteMassive[5] = crcCalc(sendByteMassive)\r\n        }\r\n        14 -> {\r\n          sendByteMassive[3] = 14.toByte()\r\n          sendByteMassive[4] = byteArray[0]\r\n          sendByteMassive[5] = crcCalc(sendByteMassive)\r\n        }\r\n        15 -> {\r\n          sendByteMassive[3] = 15.toByte()\r\n          sendByteMassive[4] = byteArray[0]\r\n          sendByteMassive[5] = crcCalc(sendByteMassive)\r\n        }\r\n        16 -> {\r\n          sendByteMassive[3] = 16.toByte()\r\n          sendByteMassive[4] = byteArray[0]\r\n          sendByteMassive[5] = crcCalc(sendByteMassive)\r\n        }\r\n        17 -> { //настройки переключения жестов\r\n          sendByteMassive[3] = 17.toByte()\r\n          sendByteMassive[4] = byteArray[0]\r\n          sendByteMassive[5] = byteArray[1]\r\n          sendByteMassive[6] = byteArray[2]\r\n          sendByteMassive[7] = byteArray[3]\r\n          sendByteMassive[8] = byteArray[4]\r\n          sendByteMassive[9] = crcCalc(sendByteMassive)\r\n        }\r\n        18 -> { //подтверждение перепрошивки\r\n          sendByteMassive[3] = 18.toByte()\r\n          sendByteMassive[4] = byteArray[0]\r\n          sendByteMassive[5] = crcCalc(sendByteMassive)\r\n        }\r\n      }\r\n      readDataFlag = false\r\n      runWriteData(sendByteMassive, FESTO_A_CHARACTERISTIC, WRITE_WR)\r\n    } else {\r\n        bleCommand(byteArray, Command, typeCommand)\r\n        System.err.println(\"Отправили команду! Чтение\")\r\n    }\r\n  }\r\n  fun bleCommand(byteArray: ByteArray?, Command: String, typeCommand: String){\r\n    if (mBluetoothLeService != null) {\r\n      for (i in mGattCharacteristics.indices) {\r\n        for (j in mGattCharacteristics[i].indices) {\r\n          if (mGattCharacteristics[i][j].uuid.toString() == Command) {\r\n            mCharacteristic = mGattCharacteristics[i][j]\r\n            if (typeCommand == WRITE){\r\n              if (mCharacteristic?.properties!! and BluetoothGattCharacteristic.PROPERTY_WRITE > 0) {\r\n                mCharacteristic?.value = byteArray\r\n                mBluetoothLeService?.writeCharacteristic(mCharacteristic)\r\n              }\r\n            }\r\n\r\n            if (typeCommand == WRITE_WR){\r\n              if (mCharacteristic?.properties!! and BluetoothGattCharacteristic.PROPERTY_WRITE_NO_RESPONSE > 0) {\r\n                mCharacteristic?.value = byteArray\r\n                mBluetoothLeService?.writeCharacteristic(mCharacteristic)\r\n                System.err.println(\"bleCommand Write Characteristic\")\r\n              }\r\n            }\r\n\r\n            if (typeCommand == READ){\r\n              if (mCharacteristic?.properties!! and BluetoothGattCharacteristic.PROPERTY_READ > 0) {\r\n                mBluetoothLeService?.readCharacteristic(mCharacteristic)\r\n                System.err.println(\"------->   bleCommand Read Characteristic:  $Command\")\r\n              }\r\n            }\r\n\r\n            if (typeCommand == NOTIFY){\r\n              if (mCharacteristic?.properties!! and BluetoothGattCharacteristic.PROPERTY_NOTIFY > 0) {\r\n                mNotifyCharacteristic = mCharacteristic\r\n                mBluetoothLeService!!.setCharacteristicNotification(\r\n                        mCharacteristic, true)\r\n                System.err.println(\"bleCommand Notify Characteristic\")\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n  }\r\n  private fun reconnectThread() {\r\n    System.err.println(\"reconnectThread started\")\r\n    var j = 1\r\n    reconnectThread = Thread {\r\n      while (reconnectThreadFlag) {\r\n        runOnUiThread {\r\n          if(j % 5 == 0) {\r\n            reconnectThreadFlag = false\r\n            scanLeDevice(true)\r\n            System.err.println(\"DeviceControlActivity------->   Переподключение cо сканированием №$j\")\r\n          } else {\r\n            reconnect()\r\n            System.err.println(\"DeviceControlActivity------->   Переподключение без сканирования №$j\")\r\n          }\r\n          j++\r\n        }\r\n        try {\r\n          Thread.sleep(RECONNECT_BLE_PERIOD.toLong())\r\n        } catch (ignored: Exception) { }\r\n      }\r\n    }\r\n    reconnectThread?.start()\r\n  }\r\n\r\n  private fun startSubscribeSensorsDataThread() {\r\n    subscribeThread = Thread {\r\n      while (sensorsDataThreadFlag) {\r\n        runOnUiThread {\r\n          bleCommand(null, MIO_MEASUREMENT, NOTIFY)\r\n          System.err.println(\"startSubscribeSensorsDataThread попытка подписки\")\r\n        }\r\n        try {\r\n          Thread.sleep(GRAPH_UPDATE_DELAY.toLong())\r\n        } catch (ignored: Exception) { }\r\n      }\r\n    }\r\n    subscribeThread?.start()\r\n  }\r\n  private fun startSubscribeSensorsNewDataThread() {\r\n    subscribeThread = Thread {\r\n      while (sensorsDataThreadFlag) {\r\n        try {\r\n          Thread.sleep(500)\r\n        } catch (ignored: Exception) {}\r\n        runOnUiThread {\r\n          bleCommand(null, MIO_MEASUREMENT_NEW, NOTIFY)\r\n//          System.err.println(\"---> startSubscribeSensorsNewDataThread попытка подписки\")\r\n        }\r\n        try {\r\n          Thread.sleep(GRAPH_UPDATE_DELAY.toLong())\r\n        } catch (ignored: Exception) { }\r\n      }\r\n    }\r\n    subscribeThread?.start()\r\n  }\r\n\r\n  /**\r\n   * Запуск задачи чтения параметров экрана графиков\r\n   */\r\n  private fun runStart() { getStart()?.let { queue.put(it) } }\r\n  open fun getStart(): Runnable? { return Runnable { readStart() } }\r\n  private fun readStart() {\r\n    val info = \"------->   Чтение порогов и версий\"\r\n    var count = 0\r\n    var state = 0 // переключается здесь в потоке\r\n    endFlag = false // меняется на последней стадии машины состояний, служит для немедленного прекращния операции\r\n    globalSemaphore = true // меняется по приходу ответа от подключаемого уст-ва\r\n\r\n    while (!endFlag) {\r\n      if (globalSemaphore) {\r\n        when (state) {\r\n          // ПРАВИЛЬНАЯ ЦЕПЬ ЗАПРОСОВ\r\n          0 -> {\r\n            showToast(\"Старт потока запросов начальных параметров\")\r\n            System.err.println(\"$info = 0\")\r\n            bleCommand(READ_REGISTER, SENS_VERSION_NEW, READ)\r\n            globalSemaphore = false\r\n            state = 1\r\n          }\r\n          1 -> {\r\n            System.err.println(\"$info = 1\")\r\n            bleCommand(READ_REGISTER, OPEN_THRESHOLD_NEW, READ)\r\n            globalSemaphore = false\r\n            state = 2\r\n          }\r\n          2 -> {\r\n            System.err.println(\"$info = 2\")\r\n            bleCommand(READ_REGISTER, CLOSE_THRESHOLD_NEW, READ)\r\n            globalSemaphore = false\r\n            state = 3\r\n          }\r\n          3 -> {\r\n            System.err.println(\"$info = 3\")\r\n            bleCommand(READ_REGISTER, SENS_OPTIONS_NEW, READ)\r\n            globalSemaphore = false\r\n            state = 4\r\n          }\r\n          4 -> {\r\n            System.err.println(\"$info = 4\")\r\n            bleCommand(READ_REGISTER, SET_REVERSE_NEW, READ)\r\n            globalSemaphore = false\r\n            state = 5\r\n          }\r\n          5 -> {\r\n            System.err.println(\"$info = 5\")\r\n            bleCommand(READ_REGISTER, SET_ONE_CHANNEL_NEW, READ)\r\n            globalSemaphore = false\r\n            state = 6\r\n          }\r\n          6 -> {\r\n            System.err.println(\"$info = 6\")\r\n            bleCommand(READ_REGISTER, ADD_GESTURE_NEW, READ)\r\n            globalSemaphore = false\r\n            state = 7  //11 пропустить калибровку //7 - выполнить\r\n          }\r\n\r\n          7 -> {\r\n            System.err.println(\"$info = 7\")\r\n            bleCommand(READ_REGISTER, CALIBRATION_NEW, READ) //TODO тут\r\n            globalSemaphore = false\r\n            state = 8\r\n          }\r\n          8 -> {\r\n            System.err.println(\"$info = 8\")\r\n            if (calibrationStage == 0) {\r\n              state = 9 //9   //TODO вернуть калибровку\r\n            } else {\r\n              if (calibrationStage == 6) {\r\n                state = 14\r\n              } else {\r\n                if (calibrationStage == 2) {\r\n                  state = 10\r\n                } else {\r\n                  if (calibrationStage == 3) {\r\n                    state = 11\r\n                  } else {\r\n                    if (calibrationStage == 4) {\r\n                      state = 12\r\n                    } else {\r\n                      if (calibrationStage == 5) {\r\n                        state = 13\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n\r\n          9 -> {\r\n            System.err.println(\"$info = 9\")\r\n            openFragmentInfoNotCalibration()\r\n            state = 14\r\n          }\r\n          10 -> {\r\n            System.err.println(\"$info = 10\")\r\n            showToast(\"В протезе отключён двигатель одной или нескольких степеней свободы!\")\r\n            state = 14\r\n          }\r\n          11 -> {\r\n            System.err.println(\"$info = 11\")\r\n            showToast(\"В протезе отключён энкодер одной или нескольких степеней свободы!\")\r\n            state = 14\r\n          }\r\n          12 -> {\r\n            System.err.println(\"$info = 12\")\r\n            showToast(\"В протезе нет энкодеров одного или нескольких степеней свободы!\")\r\n            state = 14\r\n          }\r\n          13 -> {\r\n            System.err.println(\"$info = 13\")\r\n            showToast(\"В протезе сильно заьянута одна или несколько степеней свободы!\")\r\n            state = 14\r\n          }\r\n          14 -> {\r\n            System.err.println(\"$info = 14\")\r\n            bleCommand(READ_REGISTER, SHUTDOWN_CURRENT_NEW, READ)\r\n            globalSemaphore = false\r\n            state = 15\r\n          }\r\n          15 -> {\r\n            System.err.println(\"$info = 15\")\r\n            bleCommand(READ_REGISTER, SET_GESTURE_NEW, READ)\r\n            globalSemaphore = false\r\n            state = 0\r\n            endFlag = true\r\n            startSubscribeSensorsNewDataThread()\r\n          }\r\n        }\r\n        count = 0\r\n      } else {\r\n        count++\r\n        if (count == 1000) {\r\n          endFlag = mConnected\r\n          state = 0\r\n          count = 0\r\n        }\r\n      }\r\n      try {\r\n        Thread.sleep(10)\r\n      } catch (ignored: Exception) {\r\n      }\r\n    }\r\n  }\r\n\r\n  fun runWriteData(byteArray: ByteArray?, Command: String, typeCommand: String) { getWriteData(byteArray, Command, typeCommand).let { queue.put(it) } }\r\n  open fun getWriteData(byteArray: ByteArray?, Command: String, typeCommand: String): Runnable { return Runnable { writeData(byteArray, Command, typeCommand) } }\r\n  private fun writeData(byteArray: ByteArray?, Command: String, typeCommand: String) {\r\n    try {\r\n      Thread.sleep(200) // меньше нельзя ставить для работоспособности xiaomi 6 | samsung работает на значении 200\r\n    } catch (ignored: Exception) {}\r\n//    if (countCommand == 1) countCommand = 0\r\n    bleCommand(byteArray, Command, typeCommand)\r\n    incrementCountCommand()\r\n    System.err.println(\"write counter: ${countCommand.get()}\")\r\n    try {\r\n      Thread.sleep(100)\r\n    } catch (ignored: Exception) {}\r\n  }\r\n\r\n  fun runReadDataAllCharacteristics(Command: String) {\r\n    getReadDataAllCharacteristics(Command).let { queue.put(it) }\r\n  }\r\n  open fun getReadDataAllCharacteristics(Command: String): Runnable { return Runnable { readDataAllCharacteristics(Command) } }\r\n  private fun readDataAllCharacteristics(Command: String) {\r\n      System.err.println(\"тык\")\r\n      bleCommand(null, Command, READ)\r\n      try {\r\n        Thread.sleep(100)\r\n      } catch (ignored: Exception) {}\r\n  }\r\n\r\n  private fun runReadData() {\r\n    getReadData().let { queue.put(it) }\r\n  }\r\n  open fun getReadData(): Runnable { return Runnable { readData() } }\r\n  private fun readData() {\r\n    while (readDataFlag) {\r\n      System.err.println(\"read counter: ${countCommand.get()}\")\r\n      bleCommand(null, FESTO_A_CHARACTERISTIC, READ)\r\n      try {\r\n        Thread.sleep(100)\r\n      } catch (ignored: Exception) {}\r\n    }\r\n  }\r\n\r\n  private fun makeGattUpdateIntentFilter(): IntentFilter {\r\n    val intentFilter = IntentFilter()\r\n    intentFilter.addAction(BluetoothLeService.ACTION_GATT_CONNECTED)\r\n    intentFilter.addAction(BluetoothLeService.ACTION_GATT_DISCONNECTED)\r\n    intentFilter.addAction(BluetoothLeService.ACTION_GATT_SERVICES_DISCOVERED)\r\n    intentFilter.addAction(BluetoothLeService.ACTION_DATA_AVAILABLE)\r\n    return intentFilter\r\n  }\r\n\r\n  fun getDataSens1(): Int { return dataSens1 }\r\n  fun getDataSens2(): Int { return dataSens2 }\r\n  fun getMNumberGesture(): Int { return mNumberGesture }\r\n  fun setSensorsDataThreadFlag(value: Boolean){ sensorsDataThreadFlag = value }\r\n  override fun writeToParcel(parcel: Parcel, flags: Int) {\r\n    parcel.writeByte(if (sensorsDataThreadFlag) 1 else 0)\r\n    parcel.writeString(mDeviceName)\r\n    parcel.writeString(mDeviceAddress)\r\n    parcel.writeString(mDeviceType)\r\n    parcel.writeByte(if (mConnected) 1 else 0)\r\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\r\n      parcel.writeParcelable(mNotifyCharacteristic, flags)\r\n    }\r\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\r\n      parcel.writeParcelable(mCharacteristic, flags)\r\n    }\r\n    parcel.writeInt(dataSens1)\r\n    parcel.writeInt(dataSens2)\r\n    parcel.writeInt(state)\r\n  }\r\n\r\n  override fun describeContents(): Int { return 0 }\r\n\r\n  companion object CREATOR : Parcelable.Creator<MainActivity> {\r\n    override fun createFromParcel(parcel: Parcel): MainActivity { return MainActivity(parcel) }\r\n    override fun newArray(size: Int): Array<MainActivity?> { return arrayOfNulls(size) }\r\n  }\r\n\r\n  fun openFragment(numberGesture: Int) {\r\n    dialog = CustomDialogFragment()\r\n    mNumberGesture = numberGesture\r\n    dialog.show(supportFragmentManager, \"custom dialog\")\r\n  }\r\n  private fun openFragmentQuestion() {\r\n    dialog = CustomUpdateDialogFragment()\r\n    dialog.show(supportFragmentManager, \"custom update dialog\")\r\n  }\r\n  fun openFragmentInfoUpdate() {\r\n    dialog = CustomInfoUpdateDialogFragment()\r\n    dialog.show(supportFragmentManager, \"update dialog\")\r\n  }\r\n  private fun openFragmentInfoCalibration() {\r\n    dialog = CustomInfoCalibrationDialogFragment()\r\n    dialog.show(supportFragmentManager, \"calibration dialog\")\r\n  }\r\n  private fun openFragmentInfoNotCalibration() {\r\n    val dialog = CustomInfoNotCalibratedDialogFragment()\r\n    dialog.show(supportFragmentManager, \"update dialog\")\r\n  }\r\n  fun getProgressUpdate(): Int {\r\n    return progressUpdate\r\n  }\r\n  fun showToast(massage: String) {\r\n    runOnUiThread {\r\n      Toast.makeText(this, massage, Toast.LENGTH_SHORT).show()\r\n    }\r\n  }\r\n  override fun initializeUI() {}\r\n\r\n  open fun crcCalc(data: ByteArray): Byte {\r\n    var countLocal = data.size - 1\r\n    val crcTable = byteArrayOf(\r\n            0, 94, 188.toByte(), 226.toByte(), 97, 63, 221.toByte(), 131.toByte(), 194.toByte(), 156.toByte(), 126, 32, 163.toByte(), 253.toByte(), 31, 65,\r\n            157.toByte(), 195.toByte(), 33, 127, 252.toByte(), 162.toByte(), 64, 30, 95, 1, 227.toByte(), 189.toByte(), 62, 96, 130.toByte(), 220.toByte(),\r\n            35, 125, 159.toByte(), 193.toByte(), 66, 28, 254.toByte(), 160.toByte(), 225.toByte(), 191.toByte(), 93, 3, 128.toByte(), 222.toByte(), 60, 98,\r\n            190.toByte(), 224.toByte(), 2, 92, 223.toByte(), 129.toByte(), 99, 61, 124, 34, 192.toByte(), 158.toByte(), 29, 67, 161.toByte(), 255.toByte(),\r\n            70, 24, 250.toByte(), 164.toByte(), 39, 121, 155.toByte(), 197.toByte(), 132.toByte(), 218.toByte(), 56, 102, 229.toByte(), 187.toByte(), 89, 7,\r\n            219.toByte(), 133.toByte(), 103, 57, 186.toByte(), 228.toByte(), 6, 88, 25, 71, 165.toByte(), 251.toByte(), 120, 38, 196.toByte(), 154.toByte(),\r\n            101, 59, 217.toByte(), 135.toByte(), 4, 90, 184.toByte(), 230.toByte(), 167.toByte(), 249.toByte(), 27, 69, 198.toByte(), 152.toByte(), 122, 36,\r\n            248.toByte(), 166.toByte(), 68, 26, 153.toByte(), 199.toByte(), 37, 123, 58, 100, 134.toByte(), 216.toByte(), 91, 5, 231.toByte(), 185.toByte(),\r\n            140.toByte(), 210.toByte(), 48, 110, 237.toByte(), 179.toByte(), 81, 15, 78, 16, 242.toByte(), 172.toByte(), 47, 113, 147.toByte(), 205.toByte(),\r\n            17, 79, 173.toByte(), 243.toByte(), 112, 46, 204.toByte(), 146.toByte(), 211.toByte(), 141.toByte(), 111, 49, 178.toByte(), 236.toByte(), 14, 80,\r\n            175.toByte(), 241.toByte(), 19, 77, 206.toByte(), 144.toByte(), 114, 44, 109, 51, 209.toByte(), 143.toByte(), 12, 82, 176.toByte(), 238.toByte(),\r\n            50, 108, 142.toByte(), 208.toByte(), 83, 13, 239.toByte(), 177.toByte(), 240.toByte(), 174.toByte(), 76, 18, 145.toByte(), 207.toByte(), 45, 115,\r\n            202.toByte(), 148.toByte(), 118, 40, 171.toByte(), 245.toByte(), 23, 73, 8, 86, 180.toByte(), 234.toByte(), 105, 55, 213.toByte(), 139.toByte(),\r\n            87, 9, 235.toByte(), 181.toByte(), 54, 104, 138.toByte(), 212.toByte(), 149.toByte(), 203.toByte(), 41, 119, 244.toByte(), 170.toByte(), 72, 22,\r\n            233.toByte(), 183.toByte(), 85, 11, 136.toByte(), 214.toByte(), 52, 106, 43, 117, 151.toByte(), 201.toByte(), 74, 20, 246.toByte(), 168.toByte(),\r\n            116, 42, 200.toByte(), 150.toByte(), 21, 75, 169.toByte(), 247.toByte(), 182.toByte(), 232.toByte(), 10, 84, 215.toByte(), 137.toByte(), 107, 53\r\n    )\r\n    var result: Byte = 0\r\n    var i = 0\r\n    while (countLocal != 0 ) {\r\n      result = crcTable[castUnsignedCharToInt(result xor data[i])]\r\n      i++\r\n      countLocal--\r\n    }\r\n    return result\r\n  }\r\n\r\n  private fun castUnsignedCharToInt(Ubyte: Byte): Int {\r\n    var cast = Ubyte.toInt()\r\n    if (cast < 0) {\r\n      cast += 256\r\n    }\r\n    return cast\r\n  }\r\n\r\n  private fun saveGestureState() {\r\n    for (i in 0 until 7) {\r\n      saveInt(mDeviceAddress + PreferenceKeys.GESTURE_OPEN_STATE_FINGER_1_NUM + (i + 2), gestureTable[i][0][0])\r\n      saveInt(mDeviceAddress + PreferenceKeys.GESTURE_OPEN_STATE_FINGER_2_NUM + (i + 2), gestureTable[i][0][1])\r\n      saveInt(mDeviceAddress + PreferenceKeys.GESTURE_OPEN_STATE_FINGER_3_NUM + (i + 2), gestureTable[i][0][2])\r\n      saveInt(mDeviceAddress + PreferenceKeys.GESTURE_OPEN_STATE_FINGER_4_NUM + (i + 2), gestureTable[i][0][3])\r\n      saveInt(mDeviceAddress + PreferenceKeys.GESTURE_OPEN_STATE_FINGER_5_NUM + (i + 2), gestureTable[i][0][4])\r\n      saveInt(mDeviceAddress + PreferenceKeys.GESTURE_OPEN_STATE_FINGER_6_NUM + (i + 2), gestureTable[i][0][5])\r\n\r\n      saveInt(mDeviceAddress + PreferenceKeys.GESTURE_CLOSE_STATE_FINGER_1_NUM + (i + 2), gestureTable[i][1][0])\r\n      saveInt(mDeviceAddress + PreferenceKeys.GESTURE_CLOSE_STATE_FINGER_2_NUM + (i + 2), gestureTable[i][1][1])\r\n      saveInt(mDeviceAddress + PreferenceKeys.GESTURE_CLOSE_STATE_FINGER_3_NUM + (i + 2), gestureTable[i][1][2])\r\n      saveInt(mDeviceAddress + PreferenceKeys.GESTURE_CLOSE_STATE_FINGER_4_NUM + (i + 2), gestureTable[i][1][3])\r\n      saveInt(mDeviceAddress + PreferenceKeys.GESTURE_CLOSE_STATE_FINGER_5_NUM + (i + 2), gestureTable[i][1][4])\r\n      saveInt(mDeviceAddress + PreferenceKeys.GESTURE_CLOSE_STATE_FINGER_6_NUM + (i + 2), gestureTable[i][1][5])\r\n    }\r\n  }\r\n  internal fun saveInt(key: String, variable: Int) {\r\n    val editor: SharedPreferences.Editor = mSettings!!.edit()\r\n    editor.putInt(key, variable)\r\n    editor.apply()\r\n  }\r\n  private fun saveText(key: String, text: String) {\r\n    val editor: SharedPreferences.Editor = mSettings!!.edit()\r\n    editor.putString(key, text)\r\n    editor.apply()\r\n  }\r\n\r\n  fun setSwapOpenCloseButton(swap: Boolean) {\r\n    swapOpenCloseButton = swap\r\n    if (swap) {\r\n      saveInt(mDeviceAddress + PreferenceKeys.SWAP_OPEN_CLOSE_NUM, 1)\r\n    } else {\r\n      saveInt(mDeviceAddress + PreferenceKeys.SWAP_OPEN_CLOSE_NUM, 0)\r\n    }\r\n\r\n  }\r\n  fun getSwapOpenCloseButton() : Boolean {\r\n    return swapOpenCloseButton\r\n  }\r\n  private fun incrementCountCommand() {\r\n    countCommand.get().inc() //++\r\n    System.err.println(\"countCommand.get().inc() counter: ${countCommand.get()}\")\r\n  }\r\n  fun offGesturesUIBeforeConnection () {\r\n    gesture_1_btn?.isEnabled = false\r\n    gesture_2_btn?.isEnabled = false\r\n    gesture_3_btn?.isEnabled = false\r\n    gesture_4_btn?.isEnabled = false\r\n    gesture_5_btn?.isEnabled = false\r\n    gesture_6_btn?.isEnabled = false\r\n    gesture_7_btn?.isEnabled = false\r\n    gesture_8_btn?.isEnabled = false\r\n    gesture_settings_2_btn?.isEnabled = false\r\n    gesture_settings_3_btn?.isEnabled = false\r\n    gesture_settings_4_btn?.isEnabled = false\r\n    gesture_settings_5_btn?.isEnabled = false\r\n    gesture_settings_6_btn?.isEnabled = false\r\n    gesture_settings_7_btn?.isEnabled = false\r\n    gesture_settings_8_btn?.isEnabled = false\r\n  }\r\n  fun offSensorsUIBeforeConnection () {\r\n    close_btn?.isEnabled = false\r\n    open_btn?.isEnabled = false\r\n    thresholds_blocking_sw?.isEnabled = false\r\n    correlator_noise_threshold_1_sb?.isEnabled = false\r\n    correlator_noise_threshold_2_sb?.isEnabled = false\r\n  }\r\n\r\n\r\n  private fun reconnect () {\r\n    //полное завершение сеанса связи и создание нового в onResume\r\n    if (mBluetoothLeService != null) {\r\n      unbindService(mServiceConnection)\r\n      mBluetoothLeService = null\r\n    }\r\n\r\n    val gattServiceIntent = Intent(this, BluetoothLeService::class.java)\r\n    bindService(gattServiceIntent, mServiceConnection, BIND_AUTO_CREATE)\r\n\r\n    //BLE\r\n    registerReceiver(mGattUpdateReceiver, makeGattUpdateIntentFilter())\r\n    if (mBluetoothLeService != null) {\r\n      mBluetoothLeService!!.connect(mDeviceAddress)\r\n    }\r\n  }\r\n  /**\r\n   * Запуск/остановка сканирования эфира на наличие BLE устройств\r\n   * @param enable - true запуск | false остановка\r\n   */\r\n  private fun scanLeDevice(enable: Boolean) {\r\n    if (enable) {\r\n      mScanning = true\r\n      mBluetoothAdapter!!.startLeScan(mLeScanCallback)\r\n      System.err.println(\"DeviceControlActivity------->   startLeScan\")\r\n    } else {\r\n      mScanning = false\r\n      mBluetoothAdapter!!.stopLeScan(mLeScanCallback)\r\n      System.err.println(\"DeviceControlActivity------->   stopLeScan\")\r\n    }\r\n  }\r\n  // Device scan callback.\r\n  private val mLeScanCallback = LeScanCallback { device, _, _ ->\r\n    runOnUiThread {\r\n      if (device.name != null) {\r\n        System.err.println(\"------->   ===============найден девайс: \" + device.name + \"==============\")\r\n        System.err.println(\"------->   preferenceManager подключаемся к DEVICE_NAME = $mDeviceName\")\r\n        if (device.name == mDeviceName) {\r\n          System.err.println(\"------->   ==========это нужный нам девайс $device==============\")\r\n          mDeviceAddress = device.toString()\r\n          scanLeDevice(false)\r\n          reconnect()\r\n//          reconnectThreadFlag = true\r\n//          reconnectThread()\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/me/start/motorica/new_electronic_by_Rodeon/ui/activities/main/MainActivity.kt	(revision 3615c65f540b4027489278e08773822984d8530a)
+++ app/src/main/java/me/start/motorica/new_electronic_by_Rodeon/ui/activities/main/MainActivity.kt	(date 1638976859600)
@@ -100,6 +100,7 @@
   var setReverseNum = 0
   var setOneChannelNum = 0
   var firstReadCalibrationStatus: Boolean = true
+  var percentSync: Int = 0
 
   private  var countCommand: AtomicInteger = AtomicInteger()
   private var actionState = READ
@@ -747,11 +748,11 @@
   }
   private fun enableInterface(enabled: Boolean) {
     enableInterfaceStatus = enabled
-    close_btn.isEnabled = enabled
-    open_btn.isEnabled = enabled
-    thresholds_blocking_sw.isEnabled = enabled
-    correlator_noise_threshold_1_sb.isEnabled = enabled
-    correlator_noise_threshold_2_sb.isEnabled = enabled
+    close_btn?.isEnabled = enabled
+    open_btn?.isEnabled = enabled
+    thresholds_blocking_sw?.isEnabled = enabled
+    correlator_noise_threshold_1_sb?.isEnabled = enabled
+    correlator_noise_threshold_2_sb?.isEnabled = enabled
     if(enabled) {
       if ( mDeviceType!!.contains(EXTRAS_DEVICE_TYPE) || mDeviceType!!.contains(EXTRAS_DEVICE_TYPE_2) || mDeviceType!!.contains(EXTRAS_DEVICE_TYPE_3) || mDeviceType!!.contains(DEVICE_TYPE_4)) {
         gesture_1_btn?.isEnabled = enabled
@@ -1015,46 +1016,53 @@
         when (state) {
           // ПРАВИЛЬНАЯ ЦЕПЬ ЗАПРОСОВ
           0 -> {
-            showToast("Старт потока запросов начальных параметров")
+//            showToast("Старт потока запросов начальных параметров")
             System.err.println("$info = 0")
             bleCommand(READ_REGISTER, SENS_VERSION_NEW, READ)
             globalSemaphore = false
+            percentSync = 5
             state = 1
           }
           1 -> {
             System.err.println("$info = 1")
             bleCommand(READ_REGISTER, OPEN_THRESHOLD_NEW, READ)
             globalSemaphore = false
+            percentSync = 15
             state = 2
           }
           2 -> {
             System.err.println("$info = 2")
             bleCommand(READ_REGISTER, CLOSE_THRESHOLD_NEW, READ)
             globalSemaphore = false
+            percentSync = 25
             state = 3
           }
           3 -> {
             System.err.println("$info = 3")
             bleCommand(READ_REGISTER, SENS_OPTIONS_NEW, READ)
             globalSemaphore = false
+            percentSync = 35
             state = 4
           }
           4 -> {
             System.err.println("$info = 4")
             bleCommand(READ_REGISTER, SET_REVERSE_NEW, READ)
             globalSemaphore = false
+            percentSync = 45
             state = 5
           }
           5 -> {
             System.err.println("$info = 5")
             bleCommand(READ_REGISTER, SET_ONE_CHANNEL_NEW, READ)
             globalSemaphore = false
+            percentSync = 55
             state = 6
           }
           6 -> {
             System.err.println("$info = 6")
             bleCommand(READ_REGISTER, ADD_GESTURE_NEW, READ)
             globalSemaphore = false
+            percentSync = 65
             state = 7  //11 пропустить калибровку //7 - выполнить
           }
 
@@ -1062,6 +1070,7 @@
             System.err.println("$info = 7")
             bleCommand(READ_REGISTER, CALIBRATION_NEW, READ) //TODO тут
             globalSemaphore = false
+            percentSync = 75
             state = 8
           }
           8 -> {
@@ -1120,12 +1129,14 @@
             System.err.println("$info = 14")
             bleCommand(READ_REGISTER, SHUTDOWN_CURRENT_NEW, READ)
             globalSemaphore = false
+            percentSync = 85
             state = 15
           }
           15 -> {
             System.err.println("$info = 15")
             bleCommand(READ_REGISTER, SET_GESTURE_NEW, READ)
             globalSemaphore = false
+            percentSync = 100
             state = 0
             endFlag = true
             startSubscribeSensorsNewDataThread()
Index: app/src/main/java/me/start/motorica/new_electronic_by_Rodeon/ui/fragments/main/AdvancedSettingsFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\npackage me.start.motorica.new_electronic_by_Rodeon.ui.fragments.main\r\n\r\nimport android.animation.ObjectAnimator\r\nimport android.annotation.SuppressLint\r\nimport android.content.Context\r\nimport android.content.SharedPreferences\r\nimport android.os.Bundle\r\nimport android.os.Handler\r\nimport android.text.Html\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.SeekBar\r\nimport androidx.fragment.app.Fragment\r\nimport io.reactivex.android.schedulers.AndroidSchedulers\r\nimport me.start.motorica.R\r\nimport me.start.motorica.new_electronic_by_Rodeon.WDApplication\r\nimport me.start.motorica.new_electronic_by_Rodeon.ble.SampleGattAttributes.*\r\nimport me.start.motorica.new_electronic_by_Rodeon.persistence.preference.PreferenceManager\r\nimport me.start.motorica.new_electronic_by_Rodeon.persistence.sqlite.SqliteManager\r\nimport me.start.motorica.new_electronic_by_Rodeon.ui.activities.main.MainActivity\r\nimport kotlinx.android.synthetic.main.layout_advanced_settings.*\r\nimport me.start.motorica.new_electronic_by_Rodeon.ble.ConstantManager\r\nimport me.start.motorica.new_electronic_by_Rodeon.events.rx.RxUpdateMainEvent\r\nimport me.start.motorica.new_electronic_by_Rodeon.persistence.preference.PreferenceKeys\r\nimport javax.inject.Inject\r\n\r\n@Suppress(\"DEPRECATION\")\r\nclass AdvancedSettingsFragment : Fragment() {\r\n\r\n  @Inject\r\n  lateinit var preferenceManager: PreferenceManager\r\n  @Inject\r\n  lateinit var sqliteManager: SqliteManager\r\n\r\n  private var rootView: View? = null\r\n  private var mContext: Context? = null\r\n  private var main: MainActivity? = null\r\n  private var mSettings: SharedPreferences? = null\r\n  private var scale = 0F\r\n  private var mode: Byte = 0x00\r\n  private var sensorGestureSwitching: Byte = 0x00\r\n  private var threadFlag = true\r\n  private var updatingUIThread: Thread? = null\r\n  private var showCalibratingStatus: Boolean = false\r\n\r\n  override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\r\n    val rootView = inflater.inflate(R.layout.layout_advanced_settings, container, false)\r\n    WDApplication.component.inject(this)\r\n    if (activity != null) { main = activity as MainActivity? }\r\n    this.rootView = rootView\r\n    this.mContext = context\r\n    scale = resources.displayMetrics.density\r\n\r\n\r\n\r\n    return rootView\r\n  }\r\n\r\n  override fun onPause() {\r\n    super.onPause()\r\n    threadFlag = false\r\n  }\r\n\r\n  override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n    super.onViewCreated(view, savedInstanceState)\r\n    initializeUI()\r\n    Handler().postDelayed({\r\n      startUpdatingUIThread()\r\n    }, 2000)\r\n\r\n//    RxUpdateMainEvent.getInstance().gestureStateObservable\r\n//            .compose(bindToLifecycle())\r\n//            .observeOn(AndroidSchedulers.mainThread())\r\n//            .subscribe { parameters ->\r\n//            }\r\n  }\r\n\r\n  @SuppressLint(\"SetTextI18n\", \"CheckResult\")\r\n  private fun initializeUI() {\r\n    mSettings = context?.getSharedPreferences(PreferenceKeys.APP_PREFERENCES, Context.MODE_PRIVATE)\r\n    if (main?.locate?.contains(\"ru\")!!) {\r\n      shutdown_current_text_tv?.textSize = 11f\r\n      swap_button_open_close_tv?.textSize = 11f\r\n      single_channel_control_text_tv?.textSize = 11f\r\n      on_off_sensor_gesture_switching_text_tv?.textSize = 11f\r\n      mode_text_tv?.textSize = 11f\r\n      peak_time_text_tv?.textSize = 11f\r\n      downtime_text_tv?.textSize = 11f\r\n      mode_tv?.textSize = 11f\r\n      reset_to_factory_settings_btn?.textSize = 12f\r\n      calibration_btn?.textSize = 12f\r\n      calibration_status_btn?.textSize = 12f\r\n      side_text_tv?.textSize = 11f\r\n      left_right_side_swap_tv?.textSize = 11f\r\n      shutdown_current_1_text_tv?.textSize = 11f\r\n      shutdown_current_2_text_tv?.textSize = 11f\r\n      shutdown_current_3_text_tv?.textSize = 11f\r\n      shutdown_current_4_text_tv?.textSize = 11f\r\n      shutdown_current_5_text_tv?.textSize = 11f\r\n      shutdown_current_6_text_tv?.textSize = 11f\r\n    }\r\n    if (mSettings?.getInt(main?.mDeviceAddress + PreferenceKeys.SWAP_LEFT_RIGHT_SIDE, 1) == 1) {\r\n      left_right_side_swap_sw?.isChecked = true\r\n      left_right_side_swap_tv?.text = Html.fromHtml(getString(R.string.right))\r\n    } else {\r\n      left_right_side_swap_sw?.isChecked = false\r\n      left_right_side_swap_tv?.text = resources.getString(R.string.left)\r\n    }\r\n\r\n\r\n    shutdown_current_sb?.setOnSeekBarChangeListener(object : SeekBar.OnSeekBarChangeListener {\r\n      override fun onProgressChanged(seekBar: SeekBar, progress: Int, fromUser: Boolean) {\r\n        shutdown_current_tv.text = seekBar.progress.toString()\r\n      }\r\n\r\n      override fun onStartTrackingTouch(seekBar: SeekBar) {}\r\n      override fun onStopTrackingTouch(seekBar: SeekBar) {\r\n        if (!main?.lockWriteBeforeFirstRead!!) {\r\n          main?.bleCommandConnector(byteArrayOf(seekBar.progress.toByte()), SHUTDOWN_CURRENT_HDLE, WRITE, 0)\r\n          saveInt(main?.mDeviceAddress + PreferenceKeys.SHUTDOWN_CURRENT_NUM, seekBar.progress)\r\n        }\r\n      }\r\n    })\r\n\r\n    shutdown_current_1_sb?.setOnSeekBarChangeListener(object : SeekBar.OnSeekBarChangeListener {\r\n      override fun onProgressChanged(seekBar: SeekBar, progress: Int, fromUser: Boolean) {\r\n        shutdown_current_1_tv.text = seekBar.progress.toString()\r\n      }\r\n\r\n      override fun onStartTrackingTouch(seekBar: SeekBar) {}\r\n      override fun onStopTrackingTouch(seekBar: SeekBar) {\r\n        if (!main?.lockWriteBeforeFirstRead!!) {\r\n          main?.bleCommandConnector(byteArrayOf(shutdown_current_1_sb?.progress?.toByte()!!, shutdown_current_2_sb?.progress?.toByte()!!,\r\n                                                shutdown_current_3_sb?.progress?.toByte()!!, shutdown_current_4_sb?.progress?.toByte()!!,\r\n                                                shutdown_current_5_sb?.progress?.toByte()!!, shutdown_current_6_sb?.progress?.toByte()!!), SHUTDOWN_CURRENT_NEW, WRITE, 0)\r\n          saveInt(main?.mDeviceAddress + PreferenceKeys.SHUTDOWN_CURRENT_NUM_1, seekBar.progress)\r\n        }\r\n      }\r\n    })\r\n    shutdown_current_2_sb?.setOnSeekBarChangeListener(object : SeekBar.OnSeekBarChangeListener {\r\n      override fun onProgressChanged(seekBar: SeekBar, progress: Int, fromUser: Boolean) {\r\n        shutdown_current_2_tv.text = seekBar.progress.toString()\r\n      }\r\n\r\n      override fun onStartTrackingTouch(seekBar: SeekBar) {}\r\n      override fun onStopTrackingTouch(seekBar: SeekBar) {\r\n        if (!main?.lockWriteBeforeFirstRead!!) {\r\n          main?.bleCommandConnector(byteArrayOf(shutdown_current_1_sb?.progress?.toByte()!!, shutdown_current_2_sb?.progress?.toByte()!!,\r\n                                                shutdown_current_3_sb?.progress?.toByte()!!, shutdown_current_4_sb?.progress?.toByte()!!,\r\n                                                shutdown_current_5_sb?.progress?.toByte()!!, shutdown_current_6_sb?.progress?.toByte()!!), SHUTDOWN_CURRENT_NEW, WRITE, 0)\r\n          saveInt(main?.mDeviceAddress + PreferenceKeys.SHUTDOWN_CURRENT_NUM_2, seekBar.progress)\r\n        }\r\n      }\r\n    })\r\n    shutdown_current_3_sb?.setOnSeekBarChangeListener(object : SeekBar.OnSeekBarChangeListener {\r\n      override fun onProgressChanged(seekBar: SeekBar, progress: Int, fromUser: Boolean) {\r\n        shutdown_current_3_tv.text = seekBar.progress.toString()\r\n      }\r\n\r\n      override fun onStartTrackingTouch(seekBar: SeekBar) {}\r\n      override fun onStopTrackingTouch(seekBar: SeekBar) {\r\n        if (!main?.lockWriteBeforeFirstRead!!) {\r\n          main?.bleCommandConnector(byteArrayOf(shutdown_current_1_sb?.progress?.toByte()!!, shutdown_current_2_sb?.progress?.toByte()!!,\r\n                                                shutdown_current_3_sb?.progress?.toByte()!!, shutdown_current_4_sb?.progress?.toByte()!!,\r\n                                                shutdown_current_5_sb?.progress?.toByte()!!, shutdown_current_6_sb?.progress?.toByte()!!), SHUTDOWN_CURRENT_NEW, WRITE, 0)\r\n          saveInt(main?.mDeviceAddress + PreferenceKeys.SHUTDOWN_CURRENT_NUM_3, seekBar.progress)\r\n        }\r\n      }\r\n    })\r\n    shutdown_current_4_sb?.setOnSeekBarChangeListener(object : SeekBar.OnSeekBarChangeListener {\r\n      override fun onProgressChanged(seekBar: SeekBar, progress: Int, fromUser: Boolean) {\r\n        shutdown_current_4_tv.text = seekBar.progress.toString()\r\n      }\r\n\r\n      override fun onStartTrackingTouch(seekBar: SeekBar) {}\r\n      override fun onStopTrackingTouch(seekBar: SeekBar) {\r\n        if (!main?.lockWriteBeforeFirstRead!!) {\r\n          main?.bleCommandConnector(byteArrayOf(shutdown_current_1_sb?.progress?.toByte()!!, shutdown_current_2_sb?.progress?.toByte()!!,\r\n                                                shutdown_current_3_sb?.progress?.toByte()!!, shutdown_current_4_sb?.progress?.toByte()!!,\r\n                                                shutdown_current_5_sb?.progress?.toByte()!!, shutdown_current_6_sb?.progress?.toByte()!!), SHUTDOWN_CURRENT_NEW, WRITE, 0)\r\n          saveInt(main?.mDeviceAddress + PreferenceKeys.SHUTDOWN_CURRENT_NUM_4, seekBar.progress)\r\n        }\r\n      }\r\n    })\r\n    shutdown_current_5_sb?.setOnSeekBarChangeListener(object : SeekBar.OnSeekBarChangeListener {\r\n      override fun onProgressChanged(seekBar: SeekBar, progress: Int, fromUser: Boolean) {\r\n        shutdown_current_5_tv.text = seekBar.progress.toString()\r\n      }\r\n\r\n      override fun onStartTrackingTouch(seekBar: SeekBar) {}\r\n      override fun onStopTrackingTouch(seekBar: SeekBar) {\r\n        if (!main?.lockWriteBeforeFirstRead!!) {\r\n          main?.bleCommandConnector(byteArrayOf(shutdown_current_1_sb?.progress?.toByte()!!, shutdown_current_2_sb?.progress?.toByte()!!,\r\n                                                shutdown_current_3_sb?.progress?.toByte()!!, shutdown_current_4_sb?.progress?.toByte()!!,\r\n                                                shutdown_current_5_sb?.progress?.toByte()!!, shutdown_current_6_sb?.progress?.toByte()!!), SHUTDOWN_CURRENT_NEW, WRITE, 0)\r\n          saveInt(main?.mDeviceAddress + PreferenceKeys.SHUTDOWN_CURRENT_NUM_5, seekBar.progress)\r\n        }\r\n      }\r\n    })\r\n    shutdown_current_6_sb?.setOnSeekBarChangeListener(object : SeekBar.OnSeekBarChangeListener {\r\n      override fun onProgressChanged(seekBar: SeekBar, progress: Int, fromUser: Boolean) {\r\n        shutdown_current_6_tv.text = seekBar.progress.toString()\r\n      }\r\n\r\n      override fun onStartTrackingTouch(seekBar: SeekBar) {}\r\n      override fun onStopTrackingTouch(seekBar: SeekBar) {\r\n        if (!main?.lockWriteBeforeFirstRead!!) {\r\n          main?.bleCommandConnector(byteArrayOf(shutdown_current_1_sb?.progress?.toByte()!!, shutdown_current_2_sb?.progress?.toByte()!!,\r\n                                                shutdown_current_3_sb?.progress?.toByte()!!, shutdown_current_4_sb?.progress?.toByte()!!,\r\n                                                shutdown_current_5_sb?.progress?.toByte()!!, shutdown_current_6_sb?.progress?.toByte()!!), SHUTDOWN_CURRENT_NEW, WRITE, 0)\r\n          saveInt(main?.mDeviceAddress + PreferenceKeys.SHUTDOWN_CURRENT_NUM_6, seekBar.progress)\r\n        }\r\n      }\r\n    })\r\n\r\n    swap_open_close_sw?.setOnClickListener {\r\n      if (swap_open_close_sw.isChecked) {\r\n        swap_open_close_tv.text = 1.toString()\r\n        main?.setSwapOpenCloseButton(true)\r\n        preferenceManager.putBoolean(main?.mDeviceAddress + PreferenceKeys.SWAP_OPEN_CLOSE_NUM, true)\r\n      } else {\r\n        swap_open_close_tv.text = 0.toString()\r\n        main?.setSwapOpenCloseButton(false)\r\n        preferenceManager.putBoolean(main?.mDeviceAddress + PreferenceKeys.SWAP_OPEN_CLOSE_NUM, false)\r\n      }\r\n    }\r\n    single_channel_control_sw?.setOnClickListener {\r\n      if (!main?.lockWriteBeforeFirstRead!!) {\r\n        if (single_channel_control_sw.isChecked) {\r\n          single_channel_control_tv?.text = 1.toString()\r\n          if (main?.mDeviceType!!.contains(ConstantManager.DEVICE_TYPE_4)) {\r\n            main?.runWriteData(byteArrayOf(0x01), SET_ONE_CHANNEL_NEW, WRITE)\r\n            main?.setOneChannelNum = 1\r\n          } else {\r\n            main?.bleCommandConnector(byteArrayOf(0x01), SET_ONE_CHANNEL, WRITE, 16)\r\n          }\r\n\r\n          preferenceManager.putBoolean(main?.mDeviceAddress + PreferenceKeys.SET_ONE_CHANNEL_NUM, true)\r\n        } else {\r\n          single_channel_control_tv?.text = 0.toString()\r\n          if (main?.mDeviceType!!.contains(ConstantManager.DEVICE_TYPE_4)) {\r\n            main?.runWriteData(byteArrayOf(0x00), SET_ONE_CHANNEL_NEW, WRITE)\r\n            main?.setOneChannelNum = 0\r\n          } else {\r\n            main?.bleCommandConnector(byteArrayOf(0x00), SET_ONE_CHANNEL, WRITE, 16)\r\n          }\r\n          preferenceManager.putBoolean(main?.mDeviceAddress + PreferenceKeys.SET_ONE_CHANNEL_NUM, false)\r\n        }\r\n      }\r\n    }\r\n    on_off_sensor_gesture_switching_sw?.setOnClickListener {\r\n      if (!main?.lockWriteBeforeFirstRead!!) {\r\n        if (on_off_sensor_gesture_switching_sw.isChecked) {\r\n          on_off_sensor_gesture_switching_tv.text = 1.toString()\r\n          sensorGestureSwitching = 0x01\r\n          mode_rl.visibility = View.VISIBLE\r\n          peak_time_rl.visibility = View.VISIBLE\r\n          downtime_rl.visibility = View.VISIBLE\r\n          main?.bleCommandConnector(byteArrayOf(0x00, sensorGestureSwitching, mode, (peak_time_sb.progress+5).toByte(), (downtime_sb?.progress?.plus(5))?.toByte()!!),\r\n                                    SET_CHANGE_GESTURE, WRITE, 17)\r\n//          main?.incrementCountCommand()\r\n          preferenceManager.putBoolean(main?.mDeviceAddress + PreferenceKeys.SET_SENSORS_GESTURE_SWITCHES_NUM, true)\r\n        } else {\r\n          on_off_sensor_gesture_switching_tv.text = 0.toString()\r\n          sensorGestureSwitching = 0x00\r\n          mode_rl.visibility = View.GONE\r\n          peak_time_rl.visibility = View.GONE\r\n          downtime_rl.visibility = View.GONE\r\n          main?.bleCommandConnector(byteArrayOf(0x00, sensorGestureSwitching, mode, (peak_time_sb.progress+5).toByte(), (downtime_sb?.progress?.plus(5))?.toByte()!!),\r\n                                    SET_CHANGE_GESTURE, WRITE, 17)\r\n//          main?.incrementCountCommand()\r\n          preferenceManager.putBoolean(main?.mDeviceAddress + PreferenceKeys.SET_SENSORS_GESTURE_SWITCHES_NUM, false)\r\n        }\r\n      }\r\n    }\r\n    mode_sw?.setOnClickListener {\r\n      if (!main?.lockWriteBeforeFirstRead!!) {\r\n        if (mode_sw.isChecked) {\r\n          mode_tv.text = \"двумя\\nдатчиками\"\r\n          mode = 0x01\r\n          downtime_rl.visibility = View.GONE\r\n          main?.bleCommandConnector(byteArrayOf(0x00, sensorGestureSwitching, mode, (peak_time_sb.progress+5).toByte(), (downtime_sb?.progress?.plus(5))?.toByte()!!),\r\n                                    SET_CHANGE_GESTURE, WRITE, 17)\r\n//          main?.incrementCountCommand()\r\n          preferenceManager.putBoolean(main?.mDeviceAddress + PreferenceKeys.SET_MODE_NUM, true)\r\n        } else {\r\n          mode_tv.text = \"одним\\nдатчиком\"\r\n          mode = 0x00\r\n          downtime_rl.visibility = View.VISIBLE\r\n          main?.bleCommandConnector(byteArrayOf(0x00, sensorGestureSwitching, mode, (peak_time_sb?.progress?.plus(5))?.toByte()!!, (downtime_sb?.progress?.plus(5))?.toByte()!!),\r\n                                    SET_CHANGE_GESTURE, WRITE, 17)\r\n//          main?.incrementCountCommand()\r\n          preferenceManager.putBoolean(main?.mDeviceAddress + PreferenceKeys.SET_MODE_NUM, false)\r\n        }\r\n      }\r\n    }\r\n    get_setup_btn?.setOnClickListener {\r\n//      main?.bleCommandConnector(byteArrayOf(0x00), TELEMETRY_NUMBER_NEW, READ, 17)\r\n//      main?.bleCommandConnector(byteArrayOf(0x00), STATUS_CALIBRATION_NEW, READ, 17)\r\n      main?.bleCommandConnector(byteArrayOf(0x00), SET_GESTURE_NEW, READ, 17)\r\n      main?.lockChangeTelemetryNumber = true\r\n    }\r\n    set_setup_btn?.setOnClickListener {\r\n      main?.bleCommandConnector(telemetry_number_et?.text.toString().toByteArray(Charsets.UTF_8), TELEMETRY_NUMBER_NEW, WRITE, 17)\r\n    }\r\n    main?.telemetryNumber = telemetry_number_et?.text.toString()\r\n    left_right_side_swap_sw?.setOnClickListener{\r\n      if (left_right_side_swap_sw.isChecked) {\r\n        left_right_side_swap_tv.text = Html.fromHtml(getString(R.string.right))\r\n        saveInt(main?.mDeviceAddress + PreferenceKeys.SWAP_LEFT_RIGHT_SIDE, 1)\r\n      } else {\r\n        left_right_side_swap_tv.text = resources.getString(R.string.left)\r\n        saveInt(main?.mDeviceAddress + PreferenceKeys.SWAP_LEFT_RIGHT_SIDE, 0)\r\n      }\r\n    }\r\n    peak_time_sb?.setOnSeekBarChangeListener(object : SeekBar.OnSeekBarChangeListener {\r\n      override fun onProgressChanged(seekBar: SeekBar, progress: Int, fromUser: Boolean) {\r\n        val time: String = when {\r\n          ((seekBar.progress + 5) * 0.05).toString().length == 4 -> {\r\n            ((seekBar.progress + 5) * 0.05).toString() + \"c\"\r\n          }\r\n          ((seekBar.progress + 5) * 0.05).toString().length > 4 -> {\r\n            ((seekBar.progress + 5) * 0.05).toString().substring(0,4) + \"c\"\r\n          }\r\n          else -> {\r\n            ((seekBar.progress + 5) * 0.05).toString() + \"0c\"\r\n          }\r\n        }\r\n        peak_time_tv.text = time\r\n      }\r\n\r\n      override fun onStartTrackingTouch(seekBar: SeekBar) {}\r\n      override fun onStopTrackingTouch(seekBar: SeekBar) {\r\n        if (!main?.lockWriteBeforeFirstRead!!) {\r\n          main?.bleCommandConnector(byteArrayOf(0x00, sensorGestureSwitching, mode, (peak_time_sb.progress+5).toByte(), (downtime_sb?.progress?.plus(5))?.toByte()!!),\r\n                                    SET_CHANGE_GESTURE, WRITE, 17)\r\n          preferenceManager.putInt(main?.mDeviceAddress + PreferenceKeys.SET_PEAK_TIME_NUM, seekBar.progress)\r\n        }\r\n      }\r\n    })\r\n    downtime_sb?.setOnSeekBarChangeListener(object : SeekBar.OnSeekBarChangeListener {\r\n      override fun onProgressChanged(seekBar: SeekBar, progress: Int, fromUser: Boolean) {\r\n        val time: String = when {\r\n            ((seekBar.progress + 5) * 0.05).toString().length == 4 -> {\r\n              ((seekBar.progress + 5) * 0.05).toString() + \"c\"\r\n            }\r\n            ((seekBar.progress + 5) * 0.05).toString().length > 4 -> {\r\n              ((seekBar.progress + 5) * 0.05).toString().substring(0,4) + \"c\"\r\n            }\r\n            else -> {\r\n              ((seekBar.progress + 5) * 0.05).toString() + \"0c\"\r\n            }\r\n        }\r\n        downtime_tv.text = time\r\n      }\r\n\r\n      override fun onStartTrackingTouch(seekBar: SeekBar) {}\r\n      override fun onStopTrackingTouch(seekBar: SeekBar) {\r\n        if (!main?.lockWriteBeforeFirstRead!!) {\r\n          main?.bleCommandConnector(byteArrayOf(0x00, sensorGestureSwitching, mode, (peak_time_sb.progress+5).toByte(), (downtime_sb?.progress?.plus(5))?.toByte()!!),\r\n                                    SET_CHANGE_GESTURE, WRITE, 17)\r\n          preferenceManager.putInt(main?.mDeviceAddress + PreferenceKeys.SET_DOWNTIME_NUM, seekBar.progress)\r\n        }\r\n      }\r\n    })\r\n    reset_to_factory_settings_btn?.setOnClickListener {\r\n      if (!main?.lockWriteBeforeFirstRead!!) {\r\n        System.err.println(\"tuk reset_to_factory_settings_btn\")\r\n        if (main?.mDeviceType!!.contains(ConstantManager.DEVICE_TYPE_4)) {\r\n          main?.runWriteData(byteArrayOf(0x01), RESET_TO_FACTORY_SETTINGS_NEW, WRITE)\r\n        } else {\r\n          main?.bleCommandConnector(byteArrayOf(0x01), RESET_TO_FACTORY_SETTINGS, WRITE, 15)\r\n        }\r\n\r\n\r\n        swap_open_close_tv.text = 0.toString()\r\n        main?.setSwapOpenCloseButton(false)\r\n        preferenceManager.putBoolean(main?.mDeviceAddress + PreferenceKeys.SWAP_OPEN_CLOSE_NUM, false)\r\n\r\n        preferenceManager.putBoolean(main?.mDeviceAddress + PreferenceKeys.SET_REVERSE_NUM, false)\r\n\r\n        swap_open_close_sw.isChecked = false\r\n        swap_open_close_tv.text = 0.toString()\r\n        preferenceManager.putBoolean(main?.mDeviceAddress + PreferenceKeys.SWAP_OPEN_CLOSE_NUM, false)\r\n\r\n        preferenceManager.putInt(main?.mDeviceAddress + PreferenceKeys.SHUTDOWN_CURRENT_NUM, 80)\r\n        ObjectAnimator.ofInt(shutdown_current_sb, \"progress\", preferenceManager.getInt(main?.mDeviceAddress + PreferenceKeys.SHUTDOWN_CURRENT_NUM, 80)).setDuration(200).start()\r\n\r\n        single_channel_control_sw.isChecked = false\r\n        single_channel_control_tv.text = 0.toString()\r\n        preferenceManager.putBoolean(main?.mDeviceAddress + PreferenceKeys.SET_ONE_CHANNEL_NUM, false)\r\n\r\n        on_off_sensor_gesture_switching_sw.isChecked = false\r\n        on_off_sensor_gesture_switching_tv.text = 0.toString()\r\n        sensorGestureSwitching = 0x00\r\n        mode_rl.visibility = View.GONE\r\n        peak_time_rl.visibility = View.GONE\r\n        downtime_rl.visibility = View.GONE\r\n        preferenceManager.putBoolean(main?.mDeviceAddress + PreferenceKeys.SET_SENSORS_GESTURE_SWITCHES_NUM, false)\r\n\r\n\r\n        mode_tv.text = \"одним\\nдатчиком\"\r\n        mode = 0x00\r\n        preferenceManager.putBoolean(main?.mDeviceAddress + PreferenceKeys.SET_MODE_NUM, false)\r\n      }\r\n    }\r\n    calibration_btn?.setOnClickListener {\r\n      System.err.println(\"запись глобальной калибровки тык\")\r\n      if (mSettings!!.getInt(main?.mDeviceAddress + PreferenceKeys.SWAP_LEFT_RIGHT_SIDE, 1) == 1) {\r\n        main?.runWriteData(byteArrayOf(0x09), CALIBRATION_NEW, WRITE)\r\n      } else {\r\n        main?.runWriteData(byteArrayOf(0x0a), CALIBRATION_NEW, WRITE)\r\n      }\r\n      saveInt(main?.mDeviceAddress + PreferenceKeys.CALIBRATING_STATUS, 1)\r\n    }\r\n    calibration_status_btn?. setOnClickListener {\r\n      saveInt(main?.mDeviceAddress + PreferenceKeys.CALIBRATING_STATUS, 1)\r\n      main?.runReadDataAllCharacteristics(STATUS_CALIBRATION_NEW)//bleCommand(ConstantManager.READ_REGISTER, CALIBRATION_NEW, READ)\r\n    }\r\n\r\n    //Скрывает настройки, которые не актуальны для многосхватной бионики\r\n    if ( main?.mDeviceType!!.contains(ConstantManager.EXTRAS_DEVICE_TYPE) || main?.mDeviceType!!.contains(ConstantManager.EXTRAS_DEVICE_TYPE_2) || main?.mDeviceType!!.contains(ConstantManager.EXTRAS_DEVICE_TYPE_3) || main?.mDeviceType!!.contains(ConstantManager.DEVICE_TYPE_4)) {\r\n      shutdown_current_rl?.visibility = View.GONE\r\n    }\r\n    //Скрывает настройки, которые не актуальны для бионик кроме FEST-H\r\n    if ( main?.mDeviceType!!.contains(ConstantManager.DEVICE_TYPE_4) ) { telemetry_rl?.visibility = View.VISIBLE }\r\n    else {\r\n      telemetry_rl?.visibility = View.GONE\r\n      calibration_rl?.visibility = View.GONE\r\n      shutdown_current_1_rl?.visibility = View.GONE\r\n      shutdown_current_2_rl?.visibility = View.GONE\r\n      shutdown_current_3_rl?.visibility = View.GONE\r\n      shutdown_current_4_rl?.visibility = View.GONE\r\n      shutdown_current_5_rl?.visibility = View.GONE\r\n      shutdown_current_6_rl?.visibility = View.GONE\r\n    }\r\n\r\n    swap_open_close_sw?.isChecked = preferenceManager.getBoolean(main?.mDeviceAddress + PreferenceKeys.SWAP_OPEN_CLOSE_NUM, false)\r\n    single_channel_control_sw?.isChecked = preferenceManager.getBoolean(main?.mDeviceAddress + PreferenceKeys.SET_ONE_CHANNEL_NUM, false)\r\n    on_off_sensor_gesture_switching_sw?.isChecked = preferenceManager.getBoolean(main?.mDeviceAddress + PreferenceKeys.SET_SENSORS_GESTURE_SWITCHES_NUM, false)\r\n    mode_sw?.isChecked = preferenceManager.getBoolean(main?.mDeviceAddress + PreferenceKeys.SET_MODE_NUM, false)\r\n    if (preferenceManager.getBoolean(main?.mDeviceAddress + PreferenceKeys.SWAP_OPEN_CLOSE_NUM, false)) swap_open_close_tv?.text = 1.toString()\r\n    if (preferenceManager.getBoolean(main?.mDeviceAddress + PreferenceKeys.SET_ONE_CHANNEL_NUM, false)) single_channel_control_tv?.text = 1.toString()\r\n    if (preferenceManager.getBoolean(main?.mDeviceAddress + PreferenceKeys.SET_SENSORS_GESTURE_SWITCHES_NUM, false)) {\r\n      on_off_sensor_gesture_switching_tv?.text = 1.toString()\r\n      sensorGestureSwitching = 0x01\r\n    } else {\r\n      sensorGestureSwitching = 0x00\r\n      mode_rl?.visibility = View.GONE\r\n      peak_time_rl?.visibility = View.GONE\r\n      downtime_rl?.visibility = View.GONE\r\n    }\r\n    if (preferenceManager.getBoolean(main?.mDeviceAddress + PreferenceKeys.SET_MODE_NUM, false)) {\r\n      mode_tv?.text = \"двумя\\nдатчиками\"\r\n      mode = 0x01\r\n      downtime_rl?.visibility = View.GONE\r\n    } else {\r\n      mode_tv?.text = \"одним\\nдатчиком\"\r\n      mode = 0x00\r\n    }\r\n\r\n    main?.runOnUiThread {\r\n//      System.err.println(\"Принятые данные состояния токов shutdown_current_1_sb: \" + mSettings!!.getInt(main?.mDeviceAddress + PreferenceKeys.SHUTDOWN_CURRENT_NUM_1, 80))\r\n      ObjectAnimator.ofInt(shutdown_current_sb, \"progress\", mSettings!!.getInt(main?.mDeviceAddress + PreferenceKeys.SHUTDOWN_CURRENT_NUM, 80)).setDuration(200).start()\r\n      ObjectAnimator.ofInt(shutdown_current_1_sb, \"progress\", mSettings!!.getInt(main?.mDeviceAddress + PreferenceKeys.SHUTDOWN_CURRENT_NUM_1, 80)).setDuration(200).start()\r\n      ObjectAnimator.ofInt(shutdown_current_2_sb, \"progress\", mSettings!!.getInt(main?.mDeviceAddress + PreferenceKeys.SHUTDOWN_CURRENT_NUM_2, 80)).setDuration(200).start()\r\n      ObjectAnimator.ofInt(shutdown_current_3_sb, \"progress\", mSettings!!.getInt(main?.mDeviceAddress + PreferenceKeys.SHUTDOWN_CURRENT_NUM_3, 80)).setDuration(200).start()\r\n      ObjectAnimator.ofInt(shutdown_current_4_sb, \"progress\", mSettings!!.getInt(main?.mDeviceAddress + PreferenceKeys.SHUTDOWN_CURRENT_NUM_4, 80)).setDuration(200).start()\r\n      ObjectAnimator.ofInt(shutdown_current_5_sb, \"progress\", mSettings!!.getInt(main?.mDeviceAddress + PreferenceKeys.SHUTDOWN_CURRENT_NUM_5, 80)).setDuration(200).start()\r\n      ObjectAnimator.ofInt(shutdown_current_6_sb, \"progress\", mSettings!!.getInt(main?.mDeviceAddress + PreferenceKeys.SHUTDOWN_CURRENT_NUM_6, 80)).setDuration(200).start()\r\n\r\n      ObjectAnimator.ofInt(peak_time_sb, \"progress\", preferenceManager.getInt(main?.mDeviceAddress + PreferenceKeys.SET_PEAK_TIME_NUM, 15)).setDuration(200).start()\r\n      ObjectAnimator.ofInt(downtime_sb, \"progress\", preferenceManager.getInt(main?.mDeviceAddress + PreferenceKeys.SET_DOWNTIME_NUM, 15)).setDuration(200).start()\r\n    }\r\n    shutdown_current_1_tv?.text = mSettings!!.getInt(main?.mDeviceAddress + PreferenceKeys.SHUTDOWN_CURRENT_NUM_1, 80).toString()\r\n    shutdown_current_2_tv?.text = mSettings!!.getInt(main?.mDeviceAddress + PreferenceKeys.SHUTDOWN_CURRENT_NUM_2, 80).toString()\r\n    shutdown_current_3_tv?.text = mSettings!!.getInt(main?.mDeviceAddress + PreferenceKeys.SHUTDOWN_CURRENT_NUM_3, 80).toString()\r\n    shutdown_current_4_tv?.text = mSettings!!.getInt(main?.mDeviceAddress + PreferenceKeys.SHUTDOWN_CURRENT_NUM_4, 80).toString()\r\n    shutdown_current_5_tv?.text = mSettings!!.getInt(main?.mDeviceAddress + PreferenceKeys.SHUTDOWN_CURRENT_NUM_5, 80).toString()\r\n    shutdown_current_6_tv?.text = mSettings!!.getInt(main?.mDeviceAddress + PreferenceKeys.SHUTDOWN_CURRENT_NUM_6, 80).toString()\r\n    shutdown_current_tv?.text = shutdown_current_sb?.progress.toString()\r\n    var time: String = when {\r\n      ((peak_time_sb?.progress?.plus(5))?.times(0.05)).toString().length == 4 -> {\r\n        ((peak_time_sb?.progress?.plus(5))?.times(0.05)).toString() + \"c\"\r\n      }\r\n      ((peak_time_sb?.progress?.plus(5))?.times(0.05)).toString().length > 4 -> {\r\n        ((peak_time_sb?.progress?.plus(5))?.times(0.05)).toString().substring(0,4) + \"c\"\r\n      }\r\n      else -> {\r\n        ((peak_time_sb?.progress?.plus(5))?.times(0.05)).toString() + \"0c\"\r\n      }\r\n    }\r\n    peak_time_tv?.text = time\r\n    time = when {\r\n      ((downtime_sb?.progress?.plus(5))?.times(0.05)).toString().length == 4 -> {\r\n        ((downtime_sb?.progress?.plus(5))?.times(0.05)).toString() + \"c\"\r\n      }\r\n      ((downtime_sb?.progress?.plus(5))?.times(0.05)).toString().length > 4 -> {\r\n        ((downtime_sb?.progress?.plus(5))?.times(0.05)).toString().substring(0,4) + \"c\"\r\n      }\r\n      else -> {\r\n        ((downtime_sb?.progress?.plus(5))?.times(0.05)).toString() + \"0c\"\r\n      }\r\n    }\r\n    downtime_tv?.text = time\r\n  }\r\n\r\n\r\n\r\n  private fun startUpdatingUIThread() {\r\n    updatingUIThread =  Thread {\r\n      while (threadFlag) {\r\n        main?.runOnUiThread {\r\n          if (main?.setOneChannelNum == 1) {\r\n            preferenceManager.putBoolean(main?.mDeviceAddress + PreferenceKeys.SET_ONE_CHANNEL_NUM, true)\r\n          } else {\r\n            preferenceManager.putBoolean(main?.mDeviceAddress + PreferenceKeys.SET_ONE_CHANNEL_NUM, false)\r\n          }\r\n          if (main?.lockChangeTelemetryNumber == true) {\r\n            telemetry_number_et?.setText(main?.telemetryNumber)\r\n            main?.lockChangeTelemetryNumber = false\r\n            System.err.println(\"telemetry_number_et записали принятые данные\")\r\n          }\r\n          //////// блок кода применим только если у нас протез с новым протоколом\r\n          if ( main?.mDeviceType!!.contains(ConstantManager.DEVICE_TYPE_4) ) {\r\n            if (mSettings!!.getInt(main?.mDeviceAddress + PreferenceKeys.CALIBRATING_STATUS, 1) == 1) {\r\n              main?.firstReadCalibrationStatus = true\r\n            }\r\n            if (main?.firstReadCalibrationStatus == true) {\r\n              System.err.println(\"CALIBRATION_NEW запрос данных калибровки\")\r\n              main?.bleCommandConnector(byteArrayOf(0x00), CALIBRATION_NEW, READ, 17)\r\n            }\r\n          }\r\n\r\n          //////\r\n          initializeUI()\r\n        }\r\n        try {\r\n          Thread.sleep(1000)\r\n        } catch (ignored: Exception) {  }\r\n      }\r\n    }\r\n    updatingUIThread?.start()\r\n  }\r\n\r\n  internal fun saveInt(key: String, variable: Int) {\r\n    val editor: SharedPreferences.Editor = mSettings!!.edit()\r\n    editor.putInt(key, variable)\r\n    editor.apply()\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/me/start/motorica/new_electronic_by_Rodeon/ui/fragments/main/AdvancedSettingsFragment.kt	(revision 3615c65f540b4027489278e08773822984d8530a)
+++ app/src/main/java/me/start/motorica/new_electronic_by_Rodeon/ui/fragments/main/AdvancedSettingsFragment.kt	(date 1638980685382)
@@ -309,9 +309,9 @@
       }
     }
     get_setup_btn?.setOnClickListener {
-//      main?.bleCommandConnector(byteArrayOf(0x00), TELEMETRY_NUMBER_NEW, READ, 17)
+      main?.bleCommandConnector(byteArrayOf(0x00), TELEMETRY_NUMBER_NEW, READ, 17)
 //      main?.bleCommandConnector(byteArrayOf(0x00), STATUS_CALIBRATION_NEW, READ, 17)
-      main?.bleCommandConnector(byteArrayOf(0x00), SET_GESTURE_NEW, READ, 17)
+//      main?.bleCommandConnector(byteArrayOf(0x00), SET_GESTURE_NEW, READ, 17)
       main?.lockChangeTelemetryNumber = true
     }
     set_setup_btn?.setOnClickListener {
@@ -536,15 +536,15 @@
             System.err.println("telemetry_number_et записали принятые данные")
           }
           //////// блок кода применим только если у нас протез с новым протоколом
-          if ( main?.mDeviceType!!.contains(ConstantManager.DEVICE_TYPE_4) ) {
-            if (mSettings!!.getInt(main?.mDeviceAddress + PreferenceKeys.CALIBRATING_STATUS, 1) == 1) {
-              main?.firstReadCalibrationStatus = true
-            }
-            if (main?.firstReadCalibrationStatus == true) {
-              System.err.println("CALIBRATION_NEW запрос данных калибровки")
-              main?.bleCommandConnector(byteArrayOf(0x00), CALIBRATION_NEW, READ, 17)
-            }
-          }
+//          if ( main?.mDeviceType!!.contains(ConstantManager.DEVICE_TYPE_4) ) {
+//            if (mSettings!!.getInt(main?.mDeviceAddress + PreferenceKeys.CALIBRATING_STATUS, 1) == 1) {
+//              main?.firstReadCalibrationStatus = true
+//            }
+//            if (main?.firstReadCalibrationStatus == true) {
+//              System.err.println("CALIBRATION_NEW запрос данных калибровки")
+//              main?.bleCommandConnector(byteArrayOf(0x00), CALIBRATION_NEW, READ, 17)
+//            }
+//          }
 
           //////
           initializeUI()
