Index: app/src/main/java/me/start/motorica/new_electronic_by_Rodeon/ui/activities/main/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n@file:Suppress(\"SameParameterValue\")\r\n\r\npackage me.start.motorica.new_electronic_by_Rodeon.ui.activities.main\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.bluetooth.BluetoothAdapter\r\nimport android.bluetooth.BluetoothAdapter.LeScanCallback\r\nimport android.bluetooth.BluetoothGattCharacteristic\r\nimport android.bluetooth.BluetoothGattService\r\nimport android.bluetooth.BluetoothManager\r\nimport android.content.*\r\nimport android.nfc.NfcAdapter\r\nimport android.os.*\r\nimport android.view.View\r\nimport android.view.WindowManager\r\nimport android.widget.ExpandableListView\r\nimport android.widget.SimpleExpandableListAdapter\r\nimport android.widget.Toast\r\nimport androidx.fragment.app.DialogFragment\r\nimport io.reactivex.android.schedulers.AndroidSchedulers\r\nimport kotlinx.android.synthetic.main.activity_main.*\r\nimport kotlinx.android.synthetic.main.layout_advanced_settings.*\r\nimport kotlinx.android.synthetic.main.layout_chart.*\r\nimport kotlinx.android.synthetic.main.layout_gestures.*\r\nimport me.start.motorica.R\r\nimport me.start.motorica.new_electronic_by_Rodeon.ble.BluetoothLeService\r\nimport me.start.motorica.new_electronic_by_Rodeon.ble.ConstantManager.*\r\nimport me.start.motorica.new_electronic_by_Rodeon.ble.SampleGattAttributes.*\r\nimport me.start.motorica.new_electronic_by_Rodeon.compose.BaseActivity\r\nimport me.start.motorica.new_electronic_by_Rodeon.compose.qualifiers.RequirePresenter\r\nimport me.start.motorica.new_electronic_by_Rodeon.events.rx.RxUpdateMainEvent\r\nimport me.start.motorica.new_electronic_by_Rodeon.persistence.preference.PreferenceKeys\r\nimport me.start.motorica.new_electronic_by_Rodeon.presenters.MainPresenter\r\nimport me.start.motorica.new_electronic_by_Rodeon.ui.adapters.SectionsPagerAdapter\r\nimport me.start.motorica.new_electronic_by_Rodeon.ui.adapters.SectionsPagerAdapterMonograb\r\nimport me.start.motorica.new_electronic_by_Rodeon.ui.adapters.SectionsPagerAdapterMonograbWithAdvancedSettings\r\nimport me.start.motorica.new_electronic_by_Rodeon.ui.adapters.SectionsPagerAdapterWithAdvancedSettings\r\nimport me.start.motorica.new_electronic_by_Rodeon.ui.fragments.main.*\r\nimport me.start.motorica.new_electronic_by_Rodeon.utils.NavigationUtils\r\nimport me.start.motorica.new_electronic_by_Rodeon.viewTypes.MainActivityView\r\nimport timber.log.Timber\r\nimport java.util.*\r\nimport java.util.concurrent.atomic.AtomicInteger\r\nimport kotlin.collections.ArrayList\r\nimport kotlin.experimental.xor\r\n\r\n@Suppress(\"SameParameterValue\", \"SameParameterValue\", \"DEPRECATION\")\r\n@RequirePresenter(MainPresenter::class)\r\nopen class MainActivity() : BaseActivity<MainPresenter, MainActivityView>(), MainActivityView, Parcelable {\r\n\r\n  private var sensorsDataThreadFlag: Boolean = true\r\n  var reconnectThreadFlag: Boolean = false\r\n  private var reconnectThread: Thread? = null\r\n  private var mScanning = false\r\n  private var mBluetoothAdapter: BluetoothAdapter? = null\r\n\r\n  private var mDeviceName: String? = null\r\n  var mDeviceAddress: String? = null\r\n  var mDeviceType: String? = null\r\n  private var mBluetoothLeService: BluetoothLeService? = null\r\n  private var mGattCharacteristics = ArrayList<ArrayList<BluetoothGattCharacteristic>>()\r\n  private var mGattServicesList: ExpandableListView? = null\r\n  private var mConnectView: View? = null\r\n  private var mDisconnectView: View? = null\r\n  private var mConnected = false\r\n  private var mNotifyCharacteristic: BluetoothGattCharacteristic? = null\r\n  private var mCharacteristic: BluetoothGattCharacteristic? = null\r\n  private var dataSens1 = 0x00\r\n  private var dataSens2 = 0x00\r\n  private var mSettings: SharedPreferences? = null\r\n  private var askAboutUpdate: Boolean = true\r\n  private var progressUpdate: Int = 0\r\n\r\n  private var state = 0\r\n  private var subscribeThread: Thread? = null\r\n  private var mNumberGesture = 0\r\n  // 3D\r\n  var firstRead = true\r\n  private var speedFinger = 0\r\n  // Очередь для задачь работы с BLE\r\n  private val queue = me.start.motorica.new_electronic_by_Rodeon.services.receivers.BlockingQueue()\r\n  private var readDataFlag = true\r\n  private var globalSemaphore = false // флаг, который преостанавливает отправку новой команды, пока ответ на предыдущую не пришёл\r\n  private var endFlag = false\r\n  //  private var showAdvancedSettings = false\r\n  private var swapOpenCloseButton = false\r\n  var setReverseNum = 0\r\n  var setOneChannelNum = 0\r\n  var firstReadCalibrationStatus: Boolean = true\r\n\r\n  private  var countCommand: AtomicInteger = AtomicInteger()\r\n  private var actionState = READ\r\n  var savingSettingsWhenModified = true//продакшн false\r\n  var lockWriteBeforeFirstRead = false //продакшн true    переменная, необходимая для ожидания первого пришедшего ответа от устройства на\r\n  var lockChangeTelemetryNumber = true //продакшн true    переменная, для разового изменения серийника телеметрии\r\n  private var enableInterfaceStatus: Boolean = false\r\n  // отправленный запрос чтения. Если не ожидать её, то поток чтения не перезамускается\r\n  internal var locate = \"\"\r\n\r\n  private val listName = \"NAME\"\r\n  private val listUUID = \"UUID\"\r\n\r\n  // Code to manage Service lifecycle.\r\n  private val mServiceConnection: ServiceConnection = object : ServiceConnection {\r\n    override fun onServiceConnected(componentName: ComponentName, service: IBinder) {\r\n      mBluetoothLeService = (service as BluetoothLeService.LocalBinder).service\r\n      if (!mBluetoothLeService?.initialize()!!) {\r\n        Timber.e(\"Unable to initialize Bluetooth\")\r\n        finish()\r\n      }\r\n      // Automatically connects to the device upon successful start-up initialization.\r\n      mBluetoothLeService?.connect(mDeviceAddress)\r\n      if (mDeviceType!!.contains(EXTRAS_DEVICE_TYPE) || mDeviceType!!.contains(EXTRAS_DEVICE_TYPE_2) || mDeviceType!!.contains(EXTRAS_DEVICE_TYPE_3)\r\n              || mDeviceType!!.contains(DEVICE_TYPE_4))\r\n      {} else {\r\n        mainactivity_navi.visibility = View.GONE\r\n      }\r\n    }\r\n\r\n    override fun onServiceDisconnected(componentName: ComponentName) {\r\n      mBluetoothLeService = null\r\n    }\r\n  }\r\n\r\n  private var gestureTable: Array<Array<Array<Int>>> = Array(7) { Array(2) { Array(6) { 0 } } }\r\n  private var byteEnabledGesture: Byte = 1 // байт по маске показывающий единицами, какие из жестов сконфигурированы и доступны для использования\r\n  private var byteActiveGesture: Byte = 0 // номер активного в данный момент жеста 0-7\r\n  private var byteSideHand: Byte = 0 //  0-left 1-right\r\n  var calibrationStage: Int = 0 // состояния калибровки протеза 0-не откалиброван  1-калибруется  2-откалиброван  |  для запуска калибровки пишем !0\r\n  var telemetryNumber: String = \"\" // состояния калибровки протеза 0-не откалиброван  1-калибруется  2-откалиброван  |  для запуска калибровки пишем !0\r\n  private var firstShowPreloaderCalibration: Boolean = true // нужна для одиночного показа уведомления о начале калибровки\r\n  private var firstHidePreloaderCalibration: Boolean = true // нужна для скрытия уведомления о начале калибровки\r\n  private lateinit var dialog: DialogFragment\r\n\r\n  // Handles various events fired by the Service.\r\n  // ACTION_GATT_CONNECTED: connected to a GATT server.\r\n  // ACTION_GATT_DISCONNECTED: disconnected from a GATT server.\r\n  // ACTION_GATT_SERVICES_DISCOVERED: discovered GATT services.\r\n  // ACTION_DATA_AVAILABLE: received data from the device.  This can be a result of read\r\n  //                        or notification operations.\r\n  private val mGattUpdateReceiver: BroadcastReceiver = object : BroadcastReceiver() {\r\n    override fun onReceive(context: Context, intent: Intent) {\r\n      val action = intent.action\r\n      when {\r\n        BluetoothLeService.ACTION_GATT_CONNECTED == action -> {\r\n          //connected state\r\n//          mConnected = true\r\n//          mConnectView!!.visibility = View.VISIBLE\r\n//          mDisconnectView!!.visibility = View.GONE\r\n          System.err.println(\"DeviceControlActivity------->   момент индикации коннекта\")\r\n          Toast.makeText(context, \"подключение установлено к $mDeviceAddress\", Toast.LENGTH_SHORT).show()\r\n          reconnectThreadFlag = false\r\n          invalidateOptionsMenu()\r\n        }\r\n        BluetoothLeService.ACTION_GATT_DISCONNECTED == action -> {\r\n          //disconnected state\r\n          mConnected = false\r\n          mConnectView!!.visibility = View.GONE\r\n          mDisconnectView!!.visibility = View.VISIBLE\r\n          System.err.println(\"DeviceControlActivity------->   момент индикации дисконнекта\")\r\n          invalidateOptionsMenu()\r\n          clearUI()\r\n\r\n          if(!reconnectThreadFlag && !mScanning){\r\n            reconnectThreadFlag = true\r\n            reconnectThread()\r\n            System.err.println(\"scanLeDevice------->  запуск сканирования из ACTION_GATT_DISCONNECTED\")\r\n          }\r\n        }\r\n        BluetoothLeService.ACTION_GATT_SERVICES_DISCOVERED == action -> {\r\n          System.err.println(\"DeviceControlActivity------->   ACTION_GATT_SERVICES_DISCOVERED\")\r\n          mConnected = true\r\n          mConnectView!!.visibility = View.VISIBLE\r\n          mDisconnectView!!.visibility = View.GONE\r\n          if (mBluetoothLeService != null) {\r\n            displayGattServices(mBluetoothLeService!!.supportedGattServices)\r\n          }\r\n        }\r\n\r\n        BluetoothLeService.ACTION_DATA_AVAILABLE == action -> {\r\n          if ((mDeviceType!!.contains(EXTRAS_DEVICE_TYPE)) || (mDeviceType!!.contains(EXTRAS_DEVICE_TYPE_2)) || (mDeviceType!!.contains(EXTRAS_DEVICE_TYPE_3))) { // новая схема обработки данных\r\n            displayData(intent.getByteArrayExtra(BluetoothLeService.FESTO_A_DATA))\r\n            intent.getStringExtra(BluetoothLeService.ACTION_STATE)?.let { setActionState(it) }\r\n//              System.err.println(\"попадаем сюда\")\r\n          } else {\r\n            if (mDeviceType!!.contains(DEVICE_TYPE_4)) {\r\n              //TODO прописать новую функцию обработки пришедших данных\r\n              if(intent.getByteArrayExtra(BluetoothLeService.MIO_DATA_NEW) != null) displayDataNew(intent.getByteArrayExtra(BluetoothLeService.MIO_DATA_NEW))\r\n              if(intent.getByteArrayExtra(BluetoothLeService.SENS_VERSION_NEW_DATA) != null) displayDataSensAndBMSVersionNew(intent.getByteArrayExtra(BluetoothLeService.SENS_VERSION_NEW_DATA))\r\n              if(intent.getByteArrayExtra(BluetoothLeService.OPEN_THRESHOLD_NEW_DATA) != null) displayDataOpenThresholdNew(intent.getByteArrayExtra(BluetoothLeService.OPEN_THRESHOLD_NEW_DATA))\r\n              if(intent.getByteArrayExtra(BluetoothLeService.CLOSE_THRESHOLD_NEW_DATA) != null) displayDataCloseThresholdNew(intent.getByteArrayExtra(BluetoothLeService.CLOSE_THRESHOLD_NEW_DATA))\r\n              if(intent.getByteArrayExtra(BluetoothLeService.SENS_OPTIONS_NEW_DATA) != null) displayDataSensOptionsNew(intent.getByteArrayExtra(BluetoothLeService.SENS_OPTIONS_NEW_DATA))\r\n              if(intent.getByteArrayExtra(BluetoothLeService.SET_GESTURE_NEW_DATA) != null) displayDataSetGestureNew(intent.getByteArrayExtra(BluetoothLeService.SET_GESTURE_NEW_DATA))\r\n              if(intent.getByteArrayExtra(BluetoothLeService.SET_REVERSE_NEW_DATA) != null) displayDataSetReverseNew(intent.getByteArrayExtra(BluetoothLeService.SET_REVERSE_NEW_DATA))\r\n              if(intent.getByteArrayExtra(BluetoothLeService.ADD_GESTURE_NEW_DATA) != null) displayDataAddGestureNew(intent.getByteArrayExtra(BluetoothLeService.ADD_GESTURE_NEW_DATA))\r\n              if(intent.getByteArrayExtra(BluetoothLeService.TELEMETRY_NUMBER_NEW_DATA) != null) displayDataTelemetryNumberNew(intent.getByteArrayExtra(BluetoothLeService.TELEMETRY_NUMBER_NEW_DATA))\r\n              if(intent.getByteArrayExtra(BluetoothLeService.CALIBRATION_NEW_DATA) != null) {\r\n                intent.getStringExtra(BluetoothLeService.ACTION_STATE)?.let { setActionState(it) }\r\n                displayDataCalibrationNew(intent.getByteArrayExtra(BluetoothLeService.CALIBRATION_NEW_DATA))\r\n              }\r\n              if(intent.getByteArrayExtra(BluetoothLeService.SET_ONE_CHANNEL_NEW_DATA) != null) displayDataSetOneChannelNew(intent.getByteArrayExtra(BluetoothLeService.SET_ONE_CHANNEL_NEW_DATA))\r\n              if(intent.getByteArrayExtra(BluetoothLeService.STATUS_CALIBRATION_NEW_DATA) != null) displayDataStatusCalibrationNew(intent.getByteArrayExtra(BluetoothLeService.STATUS_CALIBRATION_NEW_DATA))\r\n              if(intent.getByteArrayExtra(BluetoothLeService.SHUTDOWN_CURRENT_NEW_DATA) != null) displayDataShutdownCurrentNew(intent.getByteArrayExtra(BluetoothLeService.SHUTDOWN_CURRENT_NEW_DATA))\r\n            } else {\r\n              displayData(intent.getByteArrayExtra(BluetoothLeService.MIO_DATA))\r\n            }\r\n          }\r\n           //вывод на график данных из характеристики показаний пульса\r\n          displayDataWriteOpen(intent.getByteArrayExtra(BluetoothLeService.OPEN_MOTOR_DATA))\r\n          displayDataWriteOpen(intent.getByteArrayExtra(BluetoothLeService.CLOSE_MOTOR_DATA))\r\n          setSensorsDataThreadFlag(intent.getBooleanExtra(BluetoothLeService.SENSORS_DATA_THREAD_FLAG, true))\r\n        }\r\n      }\r\n    }\r\n  }\r\n  @SuppressLint(\"SetTextI18n\")\r\n  private fun displayData(data: ByteArray?) {\r\n    if (data != null){\r\n//      System.err.println(\"BluetoothLeService-------------> прошли первый иф \")\r\n//      System.err.println(\"============================================\")\r\n//      for (bite in data) {\r\n//        System.err.println(\"BluetoothLeService-------------> байт: $bite  size: ${data.size}\")\r\n//      }\r\n      if (castUnsignedCharToInt(data[0]) != 0xAA) {\r\n//        System.err.println(\"BluetoothLeService-------------> прошли второй иф\")\r\n//        System.err.println(\"data.size: \" + data.size)\r\n        if (data.size == 3) {\r\n//          System.err.println(\"mDeviceAddress-------------> прошли третий иф. Распарсили нотификацию\")\r\n          if (castUnsignedCharToInt(data[0]) == 1) {\r\n//            System.err.println(\"mDeviceAddress-------------> штатный режим работы\")\r\n          } else if (castUnsignedCharToInt(data[0]) == 2) {\r\n            if (askAboutUpdate) {\r\n              openFragmentQuestion()\r\n              askAboutUpdate = false\r\n            }\r\n//            System.err.println(\"mDeviceAddress-------------> вывести сообщение о готовности обновления\")\r\n          } else if (castUnsignedCharToInt(data[0]) in 3..102) {\r\n            progressUpdate = (castUnsignedCharToInt(data[0]) - 2)\r\n//            System.err.println(\"mDeviceAddress-------------> процент обновления  \" + (castUnsignedCharToInt(data[0])-2)  + \"%\")\r\n          }\r\n          dataSens1 = castUnsignedCharToInt(data[1])\r\n          dataSens2 = castUnsignedCharToInt(data[2])\r\n          savingSettingsWhenModified = true\r\n        } else if (data.size == 10) {\r\n          if (castUnsignedCharToInt(data[0]) == 1) {\r\n//            System.err.println(\"mDeviceAddress-------------> штатный режим работы\")\r\n          } else if (castUnsignedCharToInt(data[0]) == 2) {\r\n            if (askAboutUpdate) {\r\n              openFragmentQuestion()\r\n              askAboutUpdate = false\r\n            }\r\n//            System.err.println(\"mDeviceAddress-------------> вывести сообщение о готовности обновления\")\r\n          } else if (castUnsignedCharToInt(data[0]) in 3..102) {\r\n            progressUpdate = (castUnsignedCharToInt(data[0]) - 2)\r\n//            System.err.println(\"mDeviceAddress-------------> процент обновления  \" + (castUnsignedCharToInt(data[0])-2) + \"%\")\r\n          }\r\n          dataSens1 = castUnsignedCharToInt(data[1])\r\n          dataSens2 = castUnsignedCharToInt(data[2])\r\n          if (castUnsignedCharToInt(data[3]) != mSettings!!.getInt(PreferenceKeys.DRIVER_NUM, 0)) {\r\n            saveInt(mDeviceAddress + PreferenceKeys.DRIVER_NUM, castUnsignedCharToInt(data[3]))\r\n          }\r\n          if (castUnsignedCharToInt(data[4]) != mSettings!!.getInt(PreferenceKeys.BMS_NUM, 0)) {\r\n            saveInt(mDeviceAddress + PreferenceKeys.BMS_NUM, castUnsignedCharToInt(data[4]))\r\n          }\r\n          if (castUnsignedCharToInt(data[5]) != mSettings!!.getInt(PreferenceKeys.SENS_NUM, 0)) {\r\n            saveInt(mDeviceAddress + PreferenceKeys.SENS_NUM, castUnsignedCharToInt(data[5]))\r\n          }\r\n          if (castUnsignedCharToInt(data[6]) != mSettings!!.getInt(PreferenceKeys.OPEN_CH_NUM, 0)) {\r\n            saveInt(mDeviceAddress + PreferenceKeys.OPEN_CH_NUM, castUnsignedCharToInt(data[6]))\r\n          }\r\n          if (castUnsignedCharToInt(data[7]) != mSettings!!.getInt(PreferenceKeys.CLOSE_CH_NUM, 0)) {\r\n            saveInt(mDeviceAddress + PreferenceKeys.CLOSE_CH_NUM, castUnsignedCharToInt(data[7]))\r\n          }\r\n          if (castUnsignedCharToInt(data[8]) != mSettings!!.getInt(PreferenceKeys.CORRELATOR_NOISE_THRESHOLD_1_NUM, 0)) {\r\n            saveInt(mDeviceAddress + PreferenceKeys.CORRELATOR_NOISE_THRESHOLD_1_NUM, castUnsignedCharToInt(data[8]))\r\n          }\r\n          if (castUnsignedCharToInt(data[9]) != mSettings!!.getInt(PreferenceKeys.CORRELATOR_NOISE_THRESHOLD_2_NUM, 0)) {\r\n            saveInt(mDeviceAddress + PreferenceKeys.CORRELATOR_NOISE_THRESHOLD_2_NUM, castUnsignedCharToInt(data[9]))\r\n          }\r\n        }\r\n        lockWriteBeforeFirstRead = false\r\n      } else {\r\n        if(countCommand.get() > 0) {\r\n          countCommand.get().dec()\r\n          System.err.println(\"Decrement counter: ${countCommand.get()}\")\r\n        }\r\n        if (countCommand.get() == 0) {\r\n          globalSemaphore = false\r\n          readDataFlag = true\r\n          runReadData()\r\n        }\r\n      }\r\n    }\r\n  }\r\n  private fun displayDataNew(data: ByteArray?) {\r\n    if (data != null) {\r\n        if (data.size == 2) {\r\n          dataSens1 = castUnsignedCharToInt(data[0])\r\n          dataSens2 = castUnsignedCharToInt(data[1])\r\n          savingSettingsWhenModified = true\r\n        }\r\n      lockWriteBeforeFirstRead = false\r\n    }\r\n  }\r\n  private fun displayDataSensAndBMSVersionNew(data: ByteArray?) {\r\n    if (data != null) {\r\n      saveInt(mDeviceAddress + PreferenceKeys.SENS_NUM, castUnsignedCharToInt(data[0]))\r\n      saveInt(mDeviceAddress + PreferenceKeys.BMS_NUM, 100)\r\n      globalSemaphore = true\r\n    }\r\n  }\r\n  private fun displayDataOpenThresholdNew(data: ByteArray?) {\r\n    if (data != null) {\r\n      saveInt(mDeviceAddress + PreferenceKeys.OPEN_CH_NUM, castUnsignedCharToInt(data[0]))\r\n      globalSemaphore = true\r\n      System.err.println(\"---> Принятые данные порога: \" + data[0])\r\n    }\r\n  }\r\n  private fun displayDataCloseThresholdNew(data: ByteArray?) {\r\n    if (data != null) {\r\n      saveInt(mDeviceAddress + PreferenceKeys.CLOSE_CH_NUM, castUnsignedCharToInt(data[0]))\r\n      globalSemaphore = true\r\n    }\r\n  }\r\n  private fun displayDataSensOptionsNew(data: ByteArray?) {\r\n    if (data != null) {\r\n      saveInt(mDeviceAddress + PreferenceKeys.CORRELATOR_NOISE_THRESHOLD_1_NUM, castUnsignedCharToInt(data[0]))\r\n      saveInt(mDeviceAddress + PreferenceKeys.CORRELATOR_NOISE_THRESHOLD_2_NUM, castUnsignedCharToInt(data[13]))\r\n      globalSemaphore = true\r\n    }\r\n  }\r\n  private fun displayDataSetGestureNew(data: ByteArray?) {\r\n    if (data != null) {\r\n      saveInt(mDeviceAddress + PreferenceKeys.SELECT_GESTURE_NUM, castUnsignedCharToInt(data[0]) + 1)\r\n      System.err.println(\"---> Принятые данные активного жеста: \" + (data[0] + 1))\r\n      globalSemaphore = true\r\n    }\r\n  }\r\n  private fun displayDataSetReverseNew(data: ByteArray?) {\r\n    if (data != null) {\r\n      setReverseNum = castUnsignedCharToInt(data[0])\r\n      globalSemaphore = true\r\n    }\r\n  }\r\n  private fun displayDataAddGestureNew(data: ByteArray?) {\r\n    if (data != null) {\r\n      System.err.println(\"Данные data.size = \" + data.size)\r\n      if (data.size == 87) {\r\n        for (i in 0 until 7) {\r\n          for (j in 0 until 2) {\r\n            for (k in 0 until 6) {\r\n              gestureTable[i][j][k] = castUnsignedCharToInt(data[i * 12 + j * 6 + k])\r\n              if(k == 4) { gestureTable[i][j][k] = ((88 - castUnsignedCharToInt(data[i * 12 + j * 6 + k])).toFloat()/100*91).toInt()-52 }\r\n              if(k == 5) { gestureTable[i][j][k] = (( castUnsignedCharToInt(data[i * 12 + j * 6 + k])).toFloat()/100*90).toInt() }\r\n            }\r\n          }\r\n        }\r\n        byteEnabledGesture = castUnsignedCharToInt(data[84]).toByte()\r\n        byteActiveGesture = castUnsignedCharToInt(data[85]).toByte()\r\n\r\n        saveGestureState()\r\n      }\r\n\r\n      for (i in 0 until 7) {\r\n        System.err.println(\"Данные жеста №$i\")\r\n        for (j in 0 until 2) {\r\n          System.err.println(\"Данные схвата №$j\")\r\n          for (k in 0 until 6) {\r\n            System.err.println(\"Данные пальца №$k   Данные:\" + gestureTable[i][j][k])\r\n          }\r\n        }\r\n      }\r\n      System.err.println(\"Данные byteEnabledGesture   Данные:$byteEnabledGesture\")\r\n      System.err.println(\"Данные byteActiveGesture   Данные:$byteActiveGesture\")\r\n      globalSemaphore = true\r\n    }\r\n  }\r\n  private fun displayDataTelemetryNumberNew(data: ByteArray?) {\r\n    if (data != null) {\r\n      telemetryNumber = \"\"\r\n      for (i in data.indices) {\r\n        telemetryNumber += data[i].toChar()\r\n      }\r\n      System.err.println(\"Принятые данные телеметрии: $telemetryNumber\")\r\n      globalSemaphore = true\r\n    }\r\n  }\r\n  private fun displayDataSetOneChannelNew(data: ByteArray?) {\r\n    if (data != null) {\r\n      setOneChannelNum = castUnsignedCharToInt(data[0])\r\n      globalSemaphore = true\r\n    }\r\n  }\r\n  private fun displayDataCalibrationNew(data: ByteArray?) {\r\n    if (data != null) {\r\n      if (actionState.equals(READ)) {\r\n        if (firstReadCalibrationStatus) {\r\n          calibrationStage = castUnsignedCharToInt(data[0])\r\n          System.err.println(\"---> чтение глобальной калибровки: $calibrationStage\")\r\n          firstReadCalibrationStatus = false\r\n        }\r\n      }\r\n      if (actionState.equals(WRITE)) {\r\n        calibrationStage = castUnsignedCharToInt(data[0])\r\n        if (calibrationStage == 9 || calibrationStage == 10) {// 9 и 10 - это числа отправляемые для калибровки правой и левой руки соответственно\r\n//          openFragmentInfoCalibration()\r\n          RxUpdateMainEvent.getInstance().updateCalibrationStatus(true)\r\n        }\r\n        System.err.println(\"---> запись глобальной калибровки: $calibrationStage\")\r\n      }\r\n      globalSemaphore = true\r\n    }\r\n  }\r\n  private fun displayDataStatusCalibrationNew(data: ByteArray?) {\r\n    if (data != null) {\r\n      var statusCalibration = \"\"\r\n      for (i in data.indices) {\r\n        statusCalibration += \"  \"+data[i]\r\n\r\n//        if (data[i].toInt() == 6) Toast.makeText(this, \"Протез откалиброван!\", Toast.LENGTH_LONG).show() //если палец слишком сильно затянут\r\n//        if (data[i].toInt() == 5) Toast.makeText(this, \"Палец №$i слишком сильно затянут\", Toast.LENGTH_LONG).show() //если палец слишком сильно затянут\r\n//        if (data[i].toInt() == 4) Toast.makeText(this, \"Палец №$i прокручивается\", Toast.LENGTH_LONG).show() //если палец прокручивается\r\n//        if (data[i].toInt() == 3) Toast.makeText(this, \"На пальце №$i отключен энкодер\", Toast.LENGTH_LONG).show() //если на пальце отключен энкодер\r\n//        if (data[i].toInt() == 2) Toast.makeText(this, \"На пальце №$i отключен мотор\", Toast.LENGTH_LONG).show() //если на пальце отключен мотор\r\n      }\r\n      Toast.makeText(this, \"Статус калибровки: $statusCalibration\", Toast.LENGTH_LONG).show()\r\n      saveInt(mDeviceAddress + PreferenceKeys.CALIBRATING_STATUS, 0)\r\n      globalSemaphore = true\r\n    }\r\n  }\r\n  private fun displayDataShutdownCurrentNew(data: ByteArray?) {\r\n    if (data != null) {\r\n      for (i in data.indices) {\r\n        System.err.println(\"Принятые данные состояния токов: \" + data[i] + \"  \" + mDeviceAddress + \"SHUTDOWN_CURRENT_NUM_$i\")\r\n        saveInt(mDeviceAddress + \"SHUTDOWN_CURRENT_NUM_\" + (i + 1), castUnsignedCharToInt(data[i]))\r\n      }\r\n      globalSemaphore = true\r\n    }\r\n  }\r\n  private fun displayDataWriteOpen(data: ByteArray?) {\r\n    if (data != null) {\r\n//      for (bite in data) {\r\n//        System.err.println(\"BluetoothLeService-------------> байт: $bite  size: ${data.size}\")\r\n//      }\r\n      if (data[0].toInt() == 1){ state = 1 }\r\n      if (data[0].toInt() == 0){ state = 2 }\r\n    }\r\n  }\r\n  fun setActionState(value: String) {\r\n    actionState = value\r\n  }\r\n\r\n  constructor(parcel: Parcel) : this() {\r\n    sensorsDataThreadFlag = parcel.readByte() != 0.toByte()\r\n    mDeviceName = parcel.readString()\r\n    mDeviceAddress = parcel.readString()\r\n    mDeviceType = parcel.readString()\r\n    mConnected = parcel.readByte() != 0.toByte()\r\n    mNotifyCharacteristic = parcel.readParcelable(BluetoothGattCharacteristic::class.java.classLoader)\r\n    mCharacteristic = parcel.readParcelable(BluetoothGattCharacteristic::class.java.classLoader)\r\n    dataSens1 = parcel.readInt()\r\n    dataSens2 = parcel.readInt()\r\n    state = parcel.readInt()\r\n  }\r\n\r\n  private fun clearUI() {\r\n    mGattServicesList!!.setAdapter(null as SimpleExpandableListAdapter?)\r\n    enableInterface(false)\r\n  }\r\n\r\n  @SuppressLint(\"CheckResult\", \"NewApi\")\r\n  override fun onCreate(savedInstanceState: Bundle?) {\r\n    super.onCreate(savedInstanceState)\r\n    setContentView(R.layout.activity_main)\r\n    initBaseView(this)\r\n    //changing statusbar\r\n    val window = this.window\r\n    window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS)\r\n    window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS)\r\n    window.statusBarColor = this.resources.getColor(R.color.blueStatusBar, theme)\r\n\r\n    // Initializes a Bluetooth adapter.  For API level 18 and above, get a reference to\r\n    // BluetoothAdapter through BluetoothManager.\r\n    val bluetoothManager = getSystemService(BLUETOOTH_SERVICE) as BluetoothManager\r\n    mBluetoothAdapter = bluetoothManager.adapter\r\n    val gattServiceIntent = Intent(this, BluetoothLeService::class.java)\r\n    bindService(gattServiceIntent, mServiceConnection, BIND_AUTO_CREATE)\r\n    registerReceiver(mGattUpdateReceiver, makeGattUpdateIntentFilter())\r\n\r\n\r\n    locate = Locale.getDefault().toString()\r\n    getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON)\r\n    getWindow().navigationBarColor = resources.getColor(R.color.colorPrimary)\r\n    mSettings = getSharedPreferences(PreferenceKeys.APP_PREFERENCES, Context.MODE_PRIVATE)\r\n\r\n    val intent = intent\r\n    mDeviceName = intent.getStringExtra(EXTRAS_DEVICE_NAME)\r\n    mDeviceAddress = intent.getStringExtra(EXTRAS_DEVICE_ADDRESS)\r\n    presenter.preferenceManager.putString(PreferenceKeys.DEVICE_NAME, mDeviceName.toString())\r\n    presenter.preferenceManager.putString(PreferenceKeys.DEVICE_ADDR, mDeviceAddress.toString())\r\n    saveText(PreferenceKeys.DEVICE_ADDRESS_CONNECTED, mDeviceAddress.toString())\r\n    mDeviceType = intent.getStringExtra(EXTRAS_DEVICE_TYPE)\r\n    System.err.println(\"mDeviceAddress: $mDeviceAddress\")\r\n\r\n    // Sets up UI references.\r\n    mGattServicesList = findViewById(R.id.gatt_services_list)\r\n    mConnectView = findViewById(R.id.connect_view)\r\n    mDisconnectView = findViewById(R.id.disconnect_view)\r\n\r\n    RxUpdateMainEvent.getInstance().gestureStateObservable\r\n            .compose(bindToLifecycle())\r\n            .observeOn(AndroidSchedulers.mainThread())\r\n            .subscribe { parameters ->\r\n              bleCommandConnector(byteArrayOf((parameters.gestureNumber).toByte(), parameters.openStage.toByte(), parameters.closeStage.toByte(), parameters.state.toByte()), ADD_GESTURE, WRITE, 12)\r\n            }\r\n    RxUpdateMainEvent.getInstance().gestureStateWithEncodersObservable\r\n            .compose(bindToLifecycle())\r\n            .observeOn(AndroidSchedulers.mainThread())\r\n            .subscribe { parameters ->\r\n              System.err.println(\"Prishedshie parametri: ${parameters.openStage1.toByte()}\")\r\n              if (parameters.state == 1) {\r\n                runWriteData(byteArrayOf(parameters.openStage1.toByte(), parameters.openStage2.toByte(), parameters.openStage3.toByte(),\r\n                        parameters.openStage4.toByte(), parameters.openStage5.toByte(), parameters.openStage6.toByte()), MOVE_ALL_FINGERS_NEW, WRITE)\r\n              } else {\r\n                runWriteData(byteArrayOf(parameters.closeStage1.toByte(), parameters.closeStage2.toByte(), parameters.closeStage3.toByte(),\r\n                        parameters.closeStage4.toByte(), parameters.closeStage5.toByte(), parameters.closeStage6.toByte()), MOVE_ALL_FINGERS_NEW, WRITE)\r\n              }\r\n              if (parameters.withChangeGesture) {\r\n                System.err.println(\"Prishedshie s izmeneniem gesta v pamiati openStage1: ${parameters.openStage1}    closeStage1: ${parameters.closeStage1}\")\r\n                System.err.println(\"Prishedshie s izmeneniem gesta v pamiati openStage2: ${parameters.openStage2}    closeStage2: ${parameters.closeStage2}\")\r\n                System.err.println(\"Prishedshie s izmeneniem gesta v pamiati openStage3: ${parameters.openStage3}    closeStage3: ${parameters.closeStage3}\")\r\n                System.err.println(\"Prishedshie s izmeneniem gesta v pamiati openStage4: ${parameters.openStage4}    closeStage4: ${parameters.closeStage4}\")\r\n                System.err.println(\"Prishedshie s izmeneniem gesta v pamiati openStage5: ${parameters.openStage5}    closeStage5: ${parameters.closeStage5}\")\r\n                System.err.println(\"Prishedshie s izmeneniem gesta v pamiati openStage6: ${parameters.openStage6}    closeStage6: ${parameters.closeStage6}\")\r\n\r\n                runWriteData(byteArrayOf((parameters.gestureNumber).toByte(),\r\n                        parameters.openStage1.toByte(), parameters.openStage2.toByte(), parameters.openStage3.toByte(),\r\n                        parameters.openStage4.toByte(), parameters.openStage5.toByte(), parameters.openStage6.toByte(),\r\n                        parameters.closeStage1.toByte(), parameters.closeStage2.toByte(), parameters.closeStage3.toByte(),\r\n                        parameters.closeStage4.toByte(), parameters.closeStage5.toByte(), parameters.closeStage6.toByte()), CHANGE_GESTURE_NEW, WRITE)\r\n              }\r\n            }\r\n    RxUpdateMainEvent.getInstance().fingerSpeedObservable\r\n            .compose(bindToLifecycle())\r\n            .observeOn(AndroidSchedulers.mainThread())\r\n            .subscribe { speed ->\r\n              System.err.println(\" MainActivity -----> change gripper. fingerSpeed = $speed\")\r\n              speedFinger = speed\r\n            }\r\n    RxUpdateMainEvent.getInstance().calibratingStatusObservable\r\n            .compose(bindToLifecycle())\r\n            .observeOn(AndroidSchedulers.mainThread())\r\n            .subscribe { _ ->\r\n              openFragmentInfoCalibration()\r\n            }\r\n\r\n    val worker = Thread {\r\n      while (true) {\r\n        val task: Runnable = queue.get()\r\n        task.run()\r\n      }\r\n    }\r\n    worker.start()\r\n\r\n    initUI()\r\n  }\r\n\r\n  private fun initUI() {\r\n    if (mSettings!!.getInt(PreferenceKeys.ADVANCED_SETTINGS, 4) == 1) {\r\n      if ( mDeviceType!!.contains(EXTRAS_DEVICE_TYPE) || mDeviceType!!.contains(EXTRAS_DEVICE_TYPE_2) || mDeviceType!!.contains(EXTRAS_DEVICE_TYPE_3)\r\n              || mDeviceType!!.contains(DEVICE_TYPE_4)) {\r\n        val mSectionsPagerAdapter =  SectionsPagerAdapterWithAdvancedSettings(supportFragmentManager)\r\n        mainactivity_viewpager.adapter = mSectionsPagerAdapter\r\n        mainactivity_navi.setViewPager(mainactivity_viewpager, 1)\r\n      } else {\r\n        val mSectionsPagerAdapter =  SectionsPagerAdapterMonograbWithAdvancedSettings(supportFragmentManager)\r\n        mainactivity_viewpager.adapter = mSectionsPagerAdapter\r\n        mainactivity_navi.setViewPager(mainactivity_viewpager, 0)\r\n      }\r\n      NavigationUtils.showAdvancedSettings = true\r\n    } else {\r\n      if ( mDeviceType!!.contains(EXTRAS_DEVICE_TYPE) || mDeviceType!!.contains(EXTRAS_DEVICE_TYPE_2) || mDeviceType!!.contains(EXTRAS_DEVICE_TYPE_3)\r\n              || mDeviceType!!.contains(DEVICE_TYPE_4)) {\r\n        val mSectionsPagerAdapter =  SectionsPagerAdapter(supportFragmentManager)\r\n        mainactivity_viewpager.adapter = mSectionsPagerAdapter\r\n        mainactivity_navi.setViewPager(mainactivity_viewpager, 1)//здесь можно настроить номер вью из боттом бара, открывающейся при страте приложения\r\n      } else {\r\n        val mSectionsPagerAdapter =  SectionsPagerAdapterMonograb(supportFragmentManager)\r\n        mainactivity_viewpager.adapter = mSectionsPagerAdapter\r\n        mainactivity_navi.setViewPager(mainactivity_viewpager, 0)//здесь можно настроить номер вью из боттом бара, открывающейся при страте приложения\r\n      }\r\n    }\r\n\r\n    mainactivity_viewpager.offscreenPageLimit = 3\r\n    NavigationUtils.setComponents(baseContext, mainactivity_navi)\r\n  }\r\n\r\n  fun showAdvancedSettings(showAdvancedSettings: Boolean) {\r\n    NavigationUtils.showAdvancedSettings = showAdvancedSettings\r\n    if (showAdvancedSettings) {\r\n      saveInt(PreferenceKeys.ADVANCED_SETTINGS, 1)\r\n    }  else {\r\n      saveInt(PreferenceKeys.ADVANCED_SETTINGS, 0)\r\n    }\r\n\r\n\r\n    mainactivity_viewpager.isSaveFromParentEnabled = false\r\n    if (showAdvancedSettings) {\r\n      if (mDeviceType!!.contains(EXTRAS_DEVICE_TYPE) || mDeviceType!!.contains(EXTRAS_DEVICE_TYPE_2) || mDeviceType!!.contains(EXTRAS_DEVICE_TYPE_3)\r\n              || mDeviceType!!.contains(DEVICE_TYPE_4)) {\r\n        val mSectionsPagerAdapter =  SectionsPagerAdapterWithAdvancedSettings(supportFragmentManager)\r\n        mainactivity_viewpager.adapter = mSectionsPagerAdapter\r\n        mainactivity_navi.setViewPager(mainactivity_viewpager, 1)\r\n      } else {\r\n        val mSectionsPagerAdapter =  SectionsPagerAdapterMonograbWithAdvancedSettings(supportFragmentManager)\r\n        mainactivity_viewpager.adapter = mSectionsPagerAdapter\r\n        mainactivity_navi.setViewPager(mainactivity_viewpager, 0)\r\n      }\r\n    } else {\r\n      if ( mDeviceType!!.contains(EXTRAS_DEVICE_TYPE) || mDeviceType!!.contains(EXTRAS_DEVICE_TYPE_2) || mDeviceType!!.contains(EXTRAS_DEVICE_TYPE_3)\r\n              || mDeviceType!!.contains(DEVICE_TYPE_4)) {\r\n        val mSectionsPagerAdapter =  SectionsPagerAdapter(supportFragmentManager)\r\n        mainactivity_viewpager.adapter = mSectionsPagerAdapter\r\n        mainactivity_navi.setViewPager(mainactivity_viewpager, 1)//здесь можно настроить номер вью из боттом бара, открывающейся при страте приложения\r\n      } else {\r\n        val mSectionsPagerAdapter =  SectionsPagerAdapterMonograb(supportFragmentManager)\r\n        mainactivity_viewpager.adapter = mSectionsPagerAdapter\r\n        mainactivity_navi.setViewPager(mainactivity_viewpager, 0)//здесь можно настроить номер вью из боттом бара, открывающейся при страте приложения\r\n      }\r\n    }\r\n\r\n    Toast.makeText(this, \"Advanced settings: $showAdvancedSettings\", Toast.LENGTH_SHORT).show()\r\n\r\n    mainactivity_viewpager.offscreenPageLimit = 3\r\n    NavigationUtils.setComponents(baseContext, mainactivity_navi)\r\n  }\r\n\r\n  override fun onResume() {\r\n    super.onResume()\r\n    // Ensures Bluetooth is enabled on the device.  If Bluetooth is not currently enabled,\r\n    // fire an intent to display a dialog asking the user to grant permission to enable it.\r\n    if (!mBluetoothAdapter!!.isEnabled) {\r\n      val enableBtIntent = Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE)\r\n      startActivityForResult(enableBtIntent, REQUEST_ENABLE_BT)\r\n    }\r\n\r\n    val filter = IntentFilter(NfcAdapter.ACTION_NDEF_DISCOVERED)\r\n    try {\r\n      filter.addDataType(\"waterdays_nfc/*\")\r\n    } catch (e: Exception) {\r\n      e.printStackTrace()\r\n    }\r\n\r\n    val i = Intent(this, javaClass)\r\n    i.flags = Intent.FLAG_ACTIVITY_SINGLE_TOP\r\n\r\n    readDataFlag = true\r\n    //BLE\r\n    if (mBluetoothLeService != null) {\r\n      mDeviceName = presenter.preferenceManager.getString(PreferenceKeys.DEVICE_NAME, DEVICE_NAME)\r\n      mDeviceAddress = presenter.preferenceManager.getString(PreferenceKeys.DEVICE_ADDR, \"7F:D6:3D:68:62:28\")\r\n//      reconnectThreadFlag = true\r\n//      reconnectThread()\r\n    }\r\n  }\r\n  override fun onPause() {\r\n    super.onPause()\r\n    endFlag = true\r\n\r\n  }\r\n  override fun onDestroy() {\r\n    super.onDestroy()\r\n    if (mBluetoothLeService != null) {\r\n      unbindService(mServiceConnection)\r\n      mBluetoothLeService = null\r\n    }\r\n    readDataFlag = false\r\n//    sensorsDataThreadFlag = false\r\n    endFlag = true\r\n    if (mScanning) { mBluetoothAdapter!!.stopLeScan(mLeScanCallback) }\r\n  }\r\n  override fun onNewIntent(intent: Intent) {\r\n    super.onNewIntent(intent)\r\n    setIntent(intent)\r\n  }\r\n\r\n  // Demonstrates how to iterate through the supported GATT Services/Characteristics.\r\n  // In this sample, we populate the data structure that is bound to the ExpandableListView\r\n  // on the UI.\r\n  private fun displayGattServices(gattServices: List<BluetoothGattService>?) {\r\n    System.err.println(\"DeviceControlActivity------->   момент начала выстраивания списка параметров\")\r\n    if (gattServices == null) return\r\n    var uuid: String?\r\n    val unknownServiceString = (\"unknown_service\")\r\n    val unknownCharaString =(\"unknown_characteristic\")\r\n    val gattServiceData = ArrayList<HashMap<String, String?>>()\r\n    val gattCharacteristicData = ArrayList<ArrayList<HashMap<String, String?>>>()\r\n    mGattCharacteristics = java.util.ArrayList()\r\n\r\n\r\n    // Loops through available GATT Services.\r\n    for (gattService in gattServices) {\r\n      val currentServiceData = HashMap<String, String?>()\r\n      uuid = gattService.uuid.toString()\r\n      currentServiceData[listName] = lookup(uuid, unknownServiceString)\r\n      currentServiceData[listUUID] = uuid\r\n      gattServiceData.add(currentServiceData)\r\n      val gattCharacteristicGroupData = ArrayList<HashMap<String, String?>>()\r\n      val gattCharacteristics = gattService.characteristics\r\n      val charas = ArrayList<BluetoothGattCharacteristic>()\r\n\r\n      // Loops through available Characteristics.\r\n      for (gattCharacteristic in gattCharacteristics) {\r\n        charas.add(gattCharacteristic)\r\n        val currentCharaData = HashMap<String, String?>()\r\n        uuid = gattCharacteristic.uuid.toString()\r\n        currentCharaData[listName] = lookup(uuid, unknownCharaString)\r\n        currentCharaData[listUUID] = uuid\r\n        gattCharacteristicGroupData.add(currentCharaData)\r\n        System.err.println(\"------->   ХАРАКТЕРИСТИКА: $uuid\")\r\n      }\r\n      mGattCharacteristics.add(charas)\r\n      gattCharacteristicData.add(gattCharacteristicGroupData)\r\n    }\r\n    val gattServiceAdapter = SimpleExpandableListAdapter(\r\n            this,\r\n            gattServiceData,\r\n            android.R.layout.simple_expandable_list_item_2, arrayOf(listName, listUUID), intArrayOf(android.R.id.text1, android.R.id.text2),\r\n            gattCharacteristicData,\r\n            android.R.layout.simple_expandable_list_item_2, arrayOf(listName, listUUID), intArrayOf(android.R.id.text1, android.R.id.text2))\r\n    mGattServicesList!!.setAdapter(gattServiceAdapter)\r\n    if (mScanning) { scanLeDevice(false) }\r\n    enableInterface(true)\r\n  }\r\n  private fun enableInterface(enabled: Boolean) {\r\n    enableInterfaceStatus = enabled\r\n    close_btn.isEnabled = enabled\r\n    open_btn.isEnabled = enabled\r\n    thresholds_blocking_sw.isEnabled = enabled\r\n    correlator_noise_threshold_1_sb.isEnabled = enabled\r\n    correlator_noise_threshold_2_sb.isEnabled = enabled\r\n    if(enabled) {\r\n      if ( mDeviceType!!.contains(EXTRAS_DEVICE_TYPE) || mDeviceType!!.contains(EXTRAS_DEVICE_TYPE_2) || mDeviceType!!.contains(EXTRAS_DEVICE_TYPE_3) || mDeviceType!!.contains(DEVICE_TYPE_4)) {\r\n        gesture_1_btn?.isEnabled = enabled\r\n        gesture_2_btn?.isEnabled = enabled\r\n        gesture_3_btn?.isEnabled = enabled\r\n        gesture_4_btn?.isEnabled = enabled\r\n        gesture_5_btn?.isEnabled = enabled\r\n        gesture_6_btn?.isEnabled = enabled\r\n        gesture_7_btn?.isEnabled = enabled\r\n        gesture_8_btn?.isEnabled = enabled\r\n        gesture_settings_2_btn?.isEnabled = enabled\r\n        gesture_settings_3_btn?.isEnabled = enabled\r\n        gesture_settings_4_btn?.isEnabled = enabled\r\n        gesture_settings_5_btn?.isEnabled = enabled\r\n        gesture_settings_6_btn?.isEnabled = enabled\r\n        gesture_settings_7_btn?.isEnabled = enabled\r\n        gesture_settings_8_btn?.isEnabled = enabled\r\n        if (mSettings!!.getInt(PreferenceKeys.ADVANCED_SETTINGS, 4) == 1) {\r\n          swap_sensors_sw?.isEnabled = enabled\r\n          swap_open_close_sw?.isEnabled = enabled\r\n          single_channel_control_sw?.isEnabled = enabled\r\n          reset_to_factory_settings_btn?.isEnabled = enabled\r\n          calibration_btn?.isEnabled = enabled\r\n          get_setup_btn?.isEnabled = enabled\r\n          set_setup_btn?.isEnabled = enabled\r\n          shutdown_current_sb?.isEnabled = enabled\r\n        }\r\n      }\r\n      sensorsDataThreadFlag = enabled\r\n      if ( mDeviceType!!.contains(EXTRAS_DEVICE_TYPE) || mDeviceType!!.contains(EXTRAS_DEVICE_TYPE_2) || mDeviceType!!.contains(EXTRAS_DEVICE_TYPE_3)) {\r\n        runReadData()\r\n      } else {\r\n        if (mDeviceType!!.contains(DEVICE_TYPE_4)) {\r\n          runStart()\r\n        } else {\r\n          startSubscribeSensorsDataThread()\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  fun bleCommandConnector(byteArray: ByteArray?, Command: String, typeCommand: String, register: Int) {\r\n    if ( mDeviceType!!.contains(EXTRAS_DEVICE_TYPE) || mDeviceType!!.contains(EXTRAS_DEVICE_TYPE_2)  || mDeviceType!!.contains(EXTRAS_DEVICE_TYPE_3))  {\r\n      val length = byteArray!!.size + 2\r\n      val sendByteMassive = ByteArray(length + 3)\r\n      sendByteMassive[0] = 0xAA.toByte()\r\n      sendByteMassive[1] = 0xAA.toByte()\r\n      sendByteMassive[2] = length.toByte()\r\n      when (register) {\r\n        0 -> {\r\n          sendByteMassive[3] = 0x00\r\n          sendByteMassive[4] = byteArray[0]\r\n          sendByteMassive[5] = crcCalc(sendByteMassive)\r\n        }\r\n        1 -> {\r\n          sendByteMassive[3] = 0x01\r\n          sendByteMassive[4] = byteArray[0]\r\n          sendByteMassive[5] = crcCalc(sendByteMassive)\r\n        }\r\n        3 -> {\r\n          sendByteMassive[3] = 0x03\r\n          sendByteMassive[4] = byteArray[0]\r\n          sendByteMassive[5] = crcCalc(sendByteMassive)\r\n        }\r\n        4 -> {\r\n          sendByteMassive[3] = 0x04\r\n          sendByteMassive[4] = byteArray[0]\r\n          sendByteMassive[5] = crcCalc(sendByteMassive)\r\n        }\r\n        5 -> {\r\n          sendByteMassive[3] = 0x05\r\n          sendByteMassive[4] = byteArray[0]\r\n          sendByteMassive[5] = crcCalc(sendByteMassive)\r\n        }\r\n        6 -> {\r\n          sendByteMassive[3] = 0x06\r\n          sendByteMassive[4] = byteArray[0]\r\n          sendByteMassive[5] = byteArray[1]\r\n          sendByteMassive[6] = crcCalc(sendByteMassive)\r\n        }\r\n        7 -> {\r\n          sendByteMassive[3] = 0x07\r\n          sendByteMassive[4] = byteArray[0]\r\n          sendByteMassive[5] = byteArray[1]\r\n          sendByteMassive[6] = crcCalc(sendByteMassive)\r\n        }\r\n        10 -> {\r\n          sendByteMassive[3] = 10.toByte()\r\n          sendByteMassive[4] = byteArray[0]\r\n          sendByteMassive[5] = crcCalc(sendByteMassive)\r\n        }\r\n        11 -> {\r\n          sendByteMassive[3] = 11.toByte()\r\n          sendByteMassive[4] = byteArray[0]\r\n          sendByteMassive[5] = byteArray[1]\r\n          sendByteMassive[6] = byteArray[2]\r\n          sendByteMassive[7] = crcCalc(sendByteMassive)\r\n        }\r\n        12 -> {\r\n          sendByteMassive[3] = 12.toByte()\r\n          sendByteMassive[4] = byteArray[0]\r\n          sendByteMassive[5] = byteArray[1]\r\n          sendByteMassive[6] = byteArray[2]\r\n          sendByteMassive[7] = byteArray[3]\r\n          sendByteMassive[8] = crcCalc(sendByteMassive)\r\n        }\r\n        13 -> {\r\n          sendByteMassive[3] = 13.toByte()\r\n          sendByteMassive[4] = byteArray[0]\r\n          sendByteMassive[5] = crcCalc(sendByteMassive)\r\n        }\r\n        14 -> {\r\n          sendByteMassive[3] = 14.toByte()\r\n          sendByteMassive[4] = byteArray[0]\r\n          sendByteMassive[5] = crcCalc(sendByteMassive)\r\n        }\r\n        15 -> {\r\n          sendByteMassive[3] = 15.toByte()\r\n          sendByteMassive[4] = byteArray[0]\r\n          sendByteMassive[5] = crcCalc(sendByteMassive)\r\n        }\r\n        16 -> {\r\n          sendByteMassive[3] = 16.toByte()\r\n          sendByteMassive[4] = byteArray[0]\r\n          sendByteMassive[5] = crcCalc(sendByteMassive)\r\n        }\r\n        17 -> { //настройки переключения жестов\r\n          sendByteMassive[3] = 17.toByte()\r\n          sendByteMassive[4] = byteArray[0]\r\n          sendByteMassive[5] = byteArray[1]\r\n          sendByteMassive[6] = byteArray[2]\r\n          sendByteMassive[7] = byteArray[3]\r\n          sendByteMassive[8] = byteArray[4]\r\n          sendByteMassive[9] = crcCalc(sendByteMassive)\r\n        }\r\n        18 -> { //подтверждение перепрошивки\r\n          sendByteMassive[3] = 18.toByte()\r\n          sendByteMassive[4] = byteArray[0]\r\n          sendByteMassive[5] = crcCalc(sendByteMassive)\r\n        }\r\n      }\r\n      readDataFlag = false\r\n      runWriteData(sendByteMassive, FESTO_A_CHARACTERISTIC, WRITE_WR)\r\n    } else {\r\n        bleCommand(byteArray, Command, typeCommand)\r\n        System.err.println(\"Отправили команду! Чтение\")\r\n    }\r\n  }\r\n  fun bleCommand(byteArray: ByteArray?, Command: String, typeCommand: String){\r\n    if (mBluetoothLeService != null) {\r\n      for (i in mGattCharacteristics.indices) {\r\n        for (j in mGattCharacteristics[i].indices) {\r\n          if (mGattCharacteristics[i][j].uuid.toString() == Command) {\r\n            mCharacteristic = mGattCharacteristics[i][j]\r\n            if (typeCommand == WRITE){\r\n              if (mCharacteristic?.properties!! and BluetoothGattCharacteristic.PROPERTY_WRITE > 0) {\r\n                mCharacteristic?.value = byteArray\r\n                mBluetoothLeService?.writeCharacteristic(mCharacteristic)\r\n              }\r\n            }\r\n\r\n            if (typeCommand == WRITE_WR){\r\n              if (mCharacteristic?.properties!! and BluetoothGattCharacteristic.PROPERTY_WRITE_NO_RESPONSE > 0) {\r\n                mCharacteristic?.value = byteArray\r\n                mBluetoothLeService?.writeCharacteristic(mCharacteristic)\r\n                System.err.println(\"bleCommand Write Characteristic\")\r\n              }\r\n            }\r\n\r\n            if (typeCommand == READ){\r\n              if (mCharacteristic?.properties!! and BluetoothGattCharacteristic.PROPERTY_READ > 0) {\r\n                mBluetoothLeService?.readCharacteristic(mCharacteristic)\r\n                System.err.println(\"------->   bleCommand Read Characteristic:  $Command\")\r\n              }\r\n            }\r\n\r\n            if (typeCommand == NOTIFY){\r\n              if (mCharacteristic?.properties!! and BluetoothGattCharacteristic.PROPERTY_NOTIFY > 0) {\r\n                mNotifyCharacteristic = mCharacteristic\r\n                mBluetoothLeService!!.setCharacteristicNotification(\r\n                        mCharacteristic, true)\r\n                System.err.println(\"bleCommand Notify Characteristic\")\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n  }\r\n  private fun reconnectThread() {\r\n    System.err.println(\"reconnectThread started\")\r\n    var j = 1\r\n    reconnectThread = Thread {\r\n      while (reconnectThreadFlag) {\r\n        runOnUiThread {\r\n          if(j % 5 == 0) {\r\n            reconnectThreadFlag = false\r\n            scanLeDevice(true)\r\n            System.err.println(\"DeviceControlActivity------->   Переподключение cо сканированием №$j\")\r\n          } else {\r\n            reconnect()\r\n            System.err.println(\"DeviceControlActivity------->   Переподключение без сканирования №$j\")\r\n          }\r\n          j++\r\n        }\r\n        try {\r\n          Thread.sleep(RECONNECT_BLE_PERIOD.toLong())\r\n        } catch (ignored: Exception) { }\r\n      }\r\n    }\r\n    reconnectThread?.start()\r\n  }\r\n\r\n  private fun startSubscribeSensorsDataThread() {\r\n    subscribeThread = Thread {\r\n      while (sensorsDataThreadFlag) {\r\n        runOnUiThread {\r\n          bleCommand(null, MIO_MEASUREMENT, NOTIFY)\r\n          System.err.println(\"startSubscribeSensorsDataThread попытка подписки\")\r\n        }\r\n        try {\r\n          Thread.sleep(GRAPH_UPDATE_DELAY.toLong())\r\n        } catch (ignored: Exception) { }\r\n      }\r\n    }\r\n    subscribeThread?.start()\r\n  }\r\n  private fun startSubscribeSensorsNewDataThread() {\r\n    subscribeThread = Thread {\r\n      while (sensorsDataThreadFlag) {\r\n        try {\r\n          Thread.sleep(500)\r\n        } catch (ignored: Exception) {}\r\n        runOnUiThread {\r\n          bleCommand(null, MIO_MEASUREMENT_NEW, NOTIFY)\r\n//          System.err.println(\"---> startSubscribeSensorsNewDataThread попытка подписки\")\r\n        }\r\n        try {\r\n          Thread.sleep(GRAPH_UPDATE_DELAY.toLong())\r\n        } catch (ignored: Exception) { }\r\n      }\r\n    }\r\n    subscribeThread?.start()\r\n  }\r\n\r\n  /**\r\n   * Запуск задачи чтения параметров экрана графиков\r\n   */\r\n  private fun runStart() { getStart()?.let { queue.put(it) } }\r\n  open fun getStart(): Runnable? { return Runnable { readStart() } }\r\n  private fun readStart() {\r\n    val info = \"------->   Чтение порогов и версий\"\r\n    var count = 0\r\n    var state = 0 // переключается здесь в потоке\r\n    endFlag = false // меняется на последней стадии машины состояний, служит для немедленного прекращния операции\r\n    globalSemaphore = true // меняется по приходу ответа от подключаемого уст-ва\r\n\r\n    while (!endFlag) {\r\n      if (globalSemaphore) {\r\n        when (state) {\r\n          // ПРАВИЛЬНАЯ ЦЕПЬ ЗАПРОСОВ\r\n          0 -> {\r\n            showToast(\"Старт потока запросов начальных параметров\")\r\n            System.err.println(\"$info = 0\")\r\n            bleCommand(READ_REGISTER, SENS_VERSION_NEW, READ)\r\n            globalSemaphore = false\r\n            state = 1\r\n          }\r\n          1 -> {\r\n            System.err.println(\"$info = 1\")\r\n            bleCommand(READ_REGISTER, OPEN_THRESHOLD_NEW, READ)\r\n            globalSemaphore = false\r\n            state = 2\r\n          }\r\n          2 -> {\r\n            System.err.println(\"$info = 2\")\r\n            bleCommand(READ_REGISTER, CLOSE_THRESHOLD_NEW, READ)\r\n            globalSemaphore = false\r\n            state = 3\r\n          }\r\n          3 -> {\r\n            System.err.println(\"$info = 3\")\r\n            bleCommand(READ_REGISTER, SENS_OPTIONS_NEW, READ)\r\n            globalSemaphore = false\r\n            state = 4\r\n          }\r\n          4 -> {\r\n            System.err.println(\"$info = 4\")\r\n            bleCommand(READ_REGISTER, SET_REVERSE_NEW, READ)\r\n            globalSemaphore = false\r\n            state = 5\r\n          }\r\n          5 -> {\r\n            System.err.println(\"$info = 5\")\r\n            bleCommand(READ_REGISTER, SET_ONE_CHANNEL_NEW, READ)\r\n            globalSemaphore = false\r\n            state = 6\r\n          }\r\n          6 -> {\r\n            System.err.println(\"$info = 6\")\r\n            bleCommand(READ_REGISTER, ADD_GESTURE_NEW, READ)\r\n            globalSemaphore = false\r\n            state = 7  //11 пропустить калибровку //7 - выполнить\r\n          }\r\n\r\n          7 -> {\r\n            System.err.println(\"$info = 7\")\r\n            bleCommand(READ_REGISTER, CALIBRATION_NEW, READ) //TODO тут\r\n            globalSemaphore = false\r\n            state = 8\r\n          }\r\n          8 -> {\r\n            System.err.println(\"$info = 8\")\r\n            if (calibrationStage == 0) {\r\n              state = 9 //9   //TODO вернуть калибровку\r\n            } else {\r\n              if (calibrationStage == 6) {\r\n                state = 14\r\n              } else {\r\n                if (calibrationStage == 2) {\r\n                  state = 10\r\n                } else {\r\n                  if (calibrationStage == 3) {\r\n                    state = 11\r\n                  } else {\r\n                    if (calibrationStage == 4) {\r\n                      state = 12\r\n                    } else {\r\n                      if (calibrationStage == 5) {\r\n                        state = 13\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n\r\n          9 -> {\r\n            System.err.println(\"$info = 9\")\r\n            openFragmentInfoNotCalibration()\r\n            state = 14\r\n          }\r\n          10 -> {\r\n            System.err.println(\"$info = 10\")\r\n            showToast(\"В протезе отключён двигатель одной или нескольких степеней свободы!\")\r\n            state = 14\r\n          }\r\n          11 -> {\r\n            System.err.println(\"$info = 11\")\r\n            showToast(\"В протезе отключён энкодер одной или нескольких степеней свободы!\")\r\n            state = 14\r\n          }\r\n          12 -> {\r\n            System.err.println(\"$info = 12\")\r\n            showToast(\"В протезе нет энкодеров одного или нескольких степеней свободы!\")\r\n            state = 14\r\n          }\r\n          13 -> {\r\n            System.err.println(\"$info = 13\")\r\n            showToast(\"В протезе сильно заьянута одна или несколько степеней свободы!\")\r\n            state = 14\r\n          }\r\n          14 -> {\r\n            System.err.println(\"$info = 14\")\r\n            bleCommand(READ_REGISTER, SHUTDOWN_CURRENT_NEW, READ)\r\n            globalSemaphore = false\r\n            state = 15\r\n          }\r\n          15 -> {\r\n            System.err.println(\"$info = 15\")\r\n            bleCommand(READ_REGISTER, SET_GESTURE_NEW, READ)\r\n            globalSemaphore = false\r\n            state = 0\r\n            endFlag = true\r\n            startSubscribeSensorsNewDataThread()\r\n          }\r\n        }\r\n        count = 0\r\n      } else {\r\n        count++\r\n        if (count == 1000) {\r\n          endFlag = mConnected\r\n          state = 0\r\n          count = 0\r\n        }\r\n      }\r\n      try {\r\n        Thread.sleep(10)\r\n      } catch (ignored: Exception) {\r\n      }\r\n    }\r\n  }\r\n\r\n  fun runWriteData(byteArray: ByteArray?, Command: String, typeCommand: String) { getWriteData(byteArray, Command, typeCommand).let { queue.put(it) } }\r\n  open fun getWriteData(byteArray: ByteArray?, Command: String, typeCommand: String): Runnable { return Runnable { writeData(byteArray, Command, typeCommand) } }\r\n  private fun writeData(byteArray: ByteArray?, Command: String, typeCommand: String) {\r\n    try {\r\n      Thread.sleep(200) // меньше нельзя ставить для работоспособности xiaomi 6 | samsung работает на значении 200\r\n    } catch (ignored: Exception) {}\r\n//    if (countCommand == 1) countCommand = 0\r\n    bleCommand(byteArray, Command, typeCommand)\r\n    incrementCountCommand()\r\n    System.err.println(\"write counter: ${countCommand.get()}\")\r\n    try {\r\n      Thread.sleep(100)\r\n    } catch (ignored: Exception) {}\r\n  }\r\n\r\n  fun runReadDataAllCharacteristics(Command: String) {\r\n    getReadDataAllCharacteristics(Command).let { queue.put(it) }\r\n  }\r\n  open fun getReadDataAllCharacteristics(Command: String): Runnable { return Runnable { readDataAllCharacteristics(Command) } }\r\n  private fun readDataAllCharacteristics(Command: String) {\r\n      System.err.println(\"тык\")\r\n      bleCommand(null, Command, READ)\r\n      try {\r\n        Thread.sleep(100)\r\n      } catch (ignored: Exception) {}\r\n  }\r\n\r\n  private fun runReadData() {\r\n    getReadData().let { queue.put(it) }\r\n  }\r\n  open fun getReadData(): Runnable { return Runnable { readData() } }\r\n  private fun readData() {\r\n    while (readDataFlag) {\r\n      System.err.println(\"read counter: ${countCommand.get()}\")\r\n      bleCommand(null, FESTO_A_CHARACTERISTIC, READ)\r\n      try {\r\n        Thread.sleep(100)\r\n      } catch (ignored: Exception) {}\r\n    }\r\n  }\r\n\r\n  private fun makeGattUpdateIntentFilter(): IntentFilter {\r\n    val intentFilter = IntentFilter()\r\n    intentFilter.addAction(BluetoothLeService.ACTION_GATT_CONNECTED)\r\n    intentFilter.addAction(BluetoothLeService.ACTION_GATT_DISCONNECTED)\r\n    intentFilter.addAction(BluetoothLeService.ACTION_GATT_SERVICES_DISCOVERED)\r\n    intentFilter.addAction(BluetoothLeService.ACTION_DATA_AVAILABLE)\r\n    return intentFilter\r\n  }\r\n\r\n  fun getDataSens1(): Int { return dataSens1 }\r\n  fun getDataSens2(): Int { return dataSens2 }\r\n  fun getMNumberGesture(): Int { return mNumberGesture }\r\n  fun setSensorsDataThreadFlag(value: Boolean){ sensorsDataThreadFlag = value }\r\n  override fun writeToParcel(parcel: Parcel, flags: Int) {\r\n    parcel.writeByte(if (sensorsDataThreadFlag) 1 else 0)\r\n    parcel.writeString(mDeviceName)\r\n    parcel.writeString(mDeviceAddress)\r\n    parcel.writeString(mDeviceType)\r\n    parcel.writeByte(if (mConnected) 1 else 0)\r\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\r\n      parcel.writeParcelable(mNotifyCharacteristic, flags)\r\n    }\r\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\r\n      parcel.writeParcelable(mCharacteristic, flags)\r\n    }\r\n    parcel.writeInt(dataSens1)\r\n    parcel.writeInt(dataSens2)\r\n    parcel.writeInt(state)\r\n  }\r\n\r\n  override fun describeContents(): Int { return 0 }\r\n\r\n  companion object CREATOR : Parcelable.Creator<MainActivity> {\r\n    override fun createFromParcel(parcel: Parcel): MainActivity { return MainActivity(parcel) }\r\n    override fun newArray(size: Int): Array<MainActivity?> { return arrayOfNulls(size) }\r\n  }\r\n\r\n  fun openFragment(numberGesture: Int) {\r\n    dialog = CustomDialogFragment()\r\n    mNumberGesture = numberGesture\r\n    dialog.show(supportFragmentManager, \"custom dialog\")\r\n  }\r\n  private fun openFragmentQuestion() {\r\n    dialog = CustomUpdateDialogFragment()\r\n    dialog.show(supportFragmentManager, \"custom update dialog\")\r\n  }\r\n  fun openFragmentInfoUpdate() {\r\n    dialog = CustomInfoUpdateDialogFragment()\r\n    dialog.show(supportFragmentManager, \"update dialog\")\r\n  }\r\n  private fun openFragmentInfoCalibration() {\r\n    dialog = CustomInfoCalibrationDialogFragment()\r\n    dialog.show(supportFragmentManager, \"calibration dialog\")\r\n  }\r\n  private fun openFragmentInfoNotCalibration() {\r\n    val dialog = CustomInfoNotCalibratedDialogFragment()\r\n    dialog.show(supportFragmentManager, \"update dialog\")\r\n  }\r\n  fun getProgressUpdate(): Int {\r\n    return progressUpdate\r\n  }\r\n  fun showToast(massage: String) {\r\n    runOnUiThread {\r\n      Toast.makeText(this, massage, Toast.LENGTH_SHORT).show()\r\n    }\r\n  }\r\n  override fun initializeUI() {}\r\n\r\n  open fun crcCalc(data: ByteArray): Byte {\r\n    var countLocal = data.size - 1\r\n    val crcTable = byteArrayOf(\r\n            0, 94, 188.toByte(), 226.toByte(), 97, 63, 221.toByte(), 131.toByte(), 194.toByte(), 156.toByte(), 126, 32, 163.toByte(), 253.toByte(), 31, 65,\r\n            157.toByte(), 195.toByte(), 33, 127, 252.toByte(), 162.toByte(), 64, 30, 95, 1, 227.toByte(), 189.toByte(), 62, 96, 130.toByte(), 220.toByte(),\r\n            35, 125, 159.toByte(), 193.toByte(), 66, 28, 254.toByte(), 160.toByte(), 225.toByte(), 191.toByte(), 93, 3, 128.toByte(), 222.toByte(), 60, 98,\r\n            190.toByte(), 224.toByte(), 2, 92, 223.toByte(), 129.toByte(), 99, 61, 124, 34, 192.toByte(), 158.toByte(), 29, 67, 161.toByte(), 255.toByte(),\r\n            70, 24, 250.toByte(), 164.toByte(), 39, 121, 155.toByte(), 197.toByte(), 132.toByte(), 218.toByte(), 56, 102, 229.toByte(), 187.toByte(), 89, 7,\r\n            219.toByte(), 133.toByte(), 103, 57, 186.toByte(), 228.toByte(), 6, 88, 25, 71, 165.toByte(), 251.toByte(), 120, 38, 196.toByte(), 154.toByte(),\r\n            101, 59, 217.toByte(), 135.toByte(), 4, 90, 184.toByte(), 230.toByte(), 167.toByte(), 249.toByte(), 27, 69, 198.toByte(), 152.toByte(), 122, 36,\r\n            248.toByte(), 166.toByte(), 68, 26, 153.toByte(), 199.toByte(), 37, 123, 58, 100, 134.toByte(), 216.toByte(), 91, 5, 231.toByte(), 185.toByte(),\r\n            140.toByte(), 210.toByte(), 48, 110, 237.toByte(), 179.toByte(), 81, 15, 78, 16, 242.toByte(), 172.toByte(), 47, 113, 147.toByte(), 205.toByte(),\r\n            17, 79, 173.toByte(), 243.toByte(), 112, 46, 204.toByte(), 146.toByte(), 211.toByte(), 141.toByte(), 111, 49, 178.toByte(), 236.toByte(), 14, 80,\r\n            175.toByte(), 241.toByte(), 19, 77, 206.toByte(), 144.toByte(), 114, 44, 109, 51, 209.toByte(), 143.toByte(), 12, 82, 176.toByte(), 238.toByte(),\r\n            50, 108, 142.toByte(), 208.toByte(), 83, 13, 239.toByte(), 177.toByte(), 240.toByte(), 174.toByte(), 76, 18, 145.toByte(), 207.toByte(), 45, 115,\r\n            202.toByte(), 148.toByte(), 118, 40, 171.toByte(), 245.toByte(), 23, 73, 8, 86, 180.toByte(), 234.toByte(), 105, 55, 213.toByte(), 139.toByte(),\r\n            87, 9, 235.toByte(), 181.toByte(), 54, 104, 138.toByte(), 212.toByte(), 149.toByte(), 203.toByte(), 41, 119, 244.toByte(), 170.toByte(), 72, 22,\r\n            233.toByte(), 183.toByte(), 85, 11, 136.toByte(), 214.toByte(), 52, 106, 43, 117, 151.toByte(), 201.toByte(), 74, 20, 246.toByte(), 168.toByte(),\r\n            116, 42, 200.toByte(), 150.toByte(), 21, 75, 169.toByte(), 247.toByte(), 182.toByte(), 232.toByte(), 10, 84, 215.toByte(), 137.toByte(), 107, 53\r\n    )\r\n    var result: Byte = 0\r\n    var i = 0\r\n    while (countLocal != 0 ) {\r\n      result = crcTable[castUnsignedCharToInt(result xor data[i])]\r\n      i++\r\n      countLocal--\r\n    }\r\n    return result\r\n  }\r\n\r\n  private fun castUnsignedCharToInt(Ubyte: Byte): Int {\r\n    var cast = Ubyte.toInt()\r\n    if (cast < 0) {\r\n      cast += 256\r\n    }\r\n    return cast\r\n  }\r\n\r\n  private fun saveGestureState() {\r\n    for (i in 0 until 7) {\r\n      saveInt(mDeviceAddress + PreferenceKeys.GESTURE_OPEN_STATE_FINGER_1_NUM + (i + 2), gestureTable[i][0][0])\r\n      saveInt(mDeviceAddress + PreferenceKeys.GESTURE_OPEN_STATE_FINGER_2_NUM + (i + 2), gestureTable[i][0][1])\r\n      saveInt(mDeviceAddress + PreferenceKeys.GESTURE_OPEN_STATE_FINGER_3_NUM + (i + 2), gestureTable[i][0][2])\r\n      saveInt(mDeviceAddress + PreferenceKeys.GESTURE_OPEN_STATE_FINGER_4_NUM + (i + 2), gestureTable[i][0][3])\r\n      saveInt(mDeviceAddress + PreferenceKeys.GESTURE_OPEN_STATE_FINGER_5_NUM + (i + 2), gestureTable[i][0][4])\r\n      saveInt(mDeviceAddress + PreferenceKeys.GESTURE_OPEN_STATE_FINGER_6_NUM + (i + 2), gestureTable[i][0][5])\r\n\r\n      saveInt(mDeviceAddress + PreferenceKeys.GESTURE_CLOSE_STATE_FINGER_1_NUM + (i + 2), gestureTable[i][1][0])\r\n      saveInt(mDeviceAddress + PreferenceKeys.GESTURE_CLOSE_STATE_FINGER_2_NUM + (i + 2), gestureTable[i][1][1])\r\n      saveInt(mDeviceAddress + PreferenceKeys.GESTURE_CLOSE_STATE_FINGER_3_NUM + (i + 2), gestureTable[i][1][2])\r\n      saveInt(mDeviceAddress + PreferenceKeys.GESTURE_CLOSE_STATE_FINGER_4_NUM + (i + 2), gestureTable[i][1][3])\r\n      saveInt(mDeviceAddress + PreferenceKeys.GESTURE_CLOSE_STATE_FINGER_5_NUM + (i + 2), gestureTable[i][1][4])\r\n      saveInt(mDeviceAddress + PreferenceKeys.GESTURE_CLOSE_STATE_FINGER_6_NUM + (i + 2), gestureTable[i][1][5])\r\n    }\r\n  }\r\n  internal fun saveInt(key: String, variable: Int) {\r\n    val editor: SharedPreferences.Editor = mSettings!!.edit()\r\n    editor.putInt(key, variable)\r\n    editor.apply()\r\n  }\r\n  private fun saveText(key: String, text: String) {\r\n    val editor: SharedPreferences.Editor = mSettings!!.edit()\r\n    editor.putString(key, text)\r\n    editor.apply()\r\n  }\r\n\r\n  fun setSwapOpenCloseButton(swap: Boolean) {\r\n    swapOpenCloseButton = swap\r\n    if (swap) {\r\n      saveInt(mDeviceAddress + PreferenceKeys.SWAP_OPEN_CLOSE_NUM, 1)\r\n    } else {\r\n      saveInt(mDeviceAddress + PreferenceKeys.SWAP_OPEN_CLOSE_NUM, 0)\r\n    }\r\n\r\n  }\r\n  fun getSwapOpenCloseButton() : Boolean {\r\n    return swapOpenCloseButton\r\n  }\r\n  private fun incrementCountCommand() {\r\n    countCommand.get().inc() //++\r\n    System.err.println(\"countCommand.get().inc() counter: ${countCommand.get()}\")\r\n  }\r\n  fun offGesturesUIBeforeConnection () {\r\n    gesture_1_btn?.isEnabled = false\r\n    gesture_2_btn?.isEnabled = false\r\n    gesture_3_btn?.isEnabled = false\r\n    gesture_4_btn?.isEnabled = false\r\n    gesture_5_btn?.isEnabled = false\r\n    gesture_6_btn?.isEnabled = false\r\n    gesture_7_btn?.isEnabled = false\r\n    gesture_8_btn?.isEnabled = false\r\n    gesture_settings_2_btn?.isEnabled = false\r\n    gesture_settings_3_btn?.isEnabled = false\r\n    gesture_settings_4_btn?.isEnabled = false\r\n    gesture_settings_5_btn?.isEnabled = false\r\n    gesture_settings_6_btn?.isEnabled = false\r\n    gesture_settings_7_btn?.isEnabled = false\r\n    gesture_settings_8_btn?.isEnabled = false\r\n  }\r\n  fun offSensorsUIBeforeConnection () {\r\n    close_btn?.isEnabled = false\r\n    open_btn?.isEnabled = false\r\n    thresholds_blocking_sw?.isEnabled = false\r\n    correlator_noise_threshold_1_sb?.isEnabled = false\r\n    correlator_noise_threshold_2_sb?.isEnabled = false\r\n  }\r\n\r\n\r\n  private fun reconnect () {\r\n    //полное завершение сеанса связи и создание нового в onResume\r\n    if (mBluetoothLeService != null) {\r\n      unbindService(mServiceConnection)\r\n      mBluetoothLeService = null\r\n    }\r\n\r\n    val gattServiceIntent = Intent(this, BluetoothLeService::class.java)\r\n    bindService(gattServiceIntent, mServiceConnection, BIND_AUTO_CREATE)\r\n\r\n    //BLE\r\n    registerReceiver(mGattUpdateReceiver, makeGattUpdateIntentFilter())\r\n    if (mBluetoothLeService != null) {\r\n      mBluetoothLeService!!.connect(mDeviceAddress)\r\n    }\r\n  }\r\n  /**\r\n   * Запуск/остановка сканирования эфира на наличие BLE устройств\r\n   * @param enable - true запуск | false остановка\r\n   */\r\n  private fun scanLeDevice(enable: Boolean) {\r\n    if (enable) {\r\n      mScanning = true\r\n      mBluetoothAdapter!!.startLeScan(mLeScanCallback)\r\n      System.err.println(\"DeviceControlActivity------->   startLeScan\")\r\n    } else {\r\n      mScanning = false\r\n      mBluetoothAdapter!!.stopLeScan(mLeScanCallback)\r\n      System.err.println(\"DeviceControlActivity------->   stopLeScan\")\r\n    }\r\n  }\r\n  // Device scan callback.\r\n  private val mLeScanCallback = LeScanCallback { device, _, _ ->\r\n    runOnUiThread {\r\n      if (device.name != null) {\r\n        System.err.println(\"------->   ===============найден девайс: \" + device.name + \"==============\")\r\n        System.err.println(\"------->   preferenceManager подключаемся к DEVICE_NAME = $mDeviceName\")\r\n        if (device.name == mDeviceName) {\r\n          System.err.println(\"------->   ==========это нужный нам девайс $device==============\")\r\n          mDeviceAddress = device.toString()\r\n          scanLeDevice(false)\r\n          reconnect()\r\n//          reconnectThreadFlag = true\r\n//          reconnectThread()\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/me/start/motorica/new_electronic_by_Rodeon/ui/activities/main/MainActivity.kt	(revision 5cac9875d963fb7b862372491e876bbe9ad2f790)
+++ app/src/main/java/me/start/motorica/new_electronic_by_Rodeon/ui/activities/main/MainActivity.kt	(date 1638970197288)
@@ -100,6 +100,7 @@
   var setReverseNum = 0
   var setOneChannelNum = 0
   var firstReadCalibrationStatus: Boolean = true
+  var percentSync: Int = 0
 
   private  var countCommand: AtomicInteger = AtomicInteger()
   private var actionState = READ
@@ -747,11 +748,11 @@
   }
   private fun enableInterface(enabled: Boolean) {
     enableInterfaceStatus = enabled
-    close_btn.isEnabled = enabled
-    open_btn.isEnabled = enabled
-    thresholds_blocking_sw.isEnabled = enabled
-    correlator_noise_threshold_1_sb.isEnabled = enabled
-    correlator_noise_threshold_2_sb.isEnabled = enabled
+    close_btn?.isEnabled = enabled
+    open_btn?.isEnabled = enabled
+    thresholds_blocking_sw?.isEnabled = enabled
+    correlator_noise_threshold_1_sb?.isEnabled = enabled
+    correlator_noise_threshold_2_sb?.isEnabled = enabled
     if(enabled) {
       if ( mDeviceType!!.contains(EXTRAS_DEVICE_TYPE) || mDeviceType!!.contains(EXTRAS_DEVICE_TYPE_2) || mDeviceType!!.contains(EXTRAS_DEVICE_TYPE_3) || mDeviceType!!.contains(DEVICE_TYPE_4)) {
         gesture_1_btn?.isEnabled = enabled
@@ -1015,46 +1016,53 @@
         when (state) {
           // ПРАВИЛЬНАЯ ЦЕПЬ ЗАПРОСОВ
           0 -> {
-            showToast("Старт потока запросов начальных параметров")
+//            showToast("Старт потока запросов начальных параметров")
             System.err.println("$info = 0")
             bleCommand(READ_REGISTER, SENS_VERSION_NEW, READ)
             globalSemaphore = false
+            percentSync = 5
             state = 1
           }
           1 -> {
             System.err.println("$info = 1")
             bleCommand(READ_REGISTER, OPEN_THRESHOLD_NEW, READ)
             globalSemaphore = false
+            percentSync = 15
             state = 2
           }
           2 -> {
             System.err.println("$info = 2")
             bleCommand(READ_REGISTER, CLOSE_THRESHOLD_NEW, READ)
             globalSemaphore = false
+            percentSync = 25
             state = 3
           }
           3 -> {
             System.err.println("$info = 3")
             bleCommand(READ_REGISTER, SENS_OPTIONS_NEW, READ)
             globalSemaphore = false
+            percentSync = 35
             state = 4
           }
           4 -> {
             System.err.println("$info = 4")
             bleCommand(READ_REGISTER, SET_REVERSE_NEW, READ)
             globalSemaphore = false
+            percentSync = 45
             state = 5
           }
           5 -> {
             System.err.println("$info = 5")
             bleCommand(READ_REGISTER, SET_ONE_CHANNEL_NEW, READ)
             globalSemaphore = false
+            percentSync = 55
             state = 6
           }
           6 -> {
             System.err.println("$info = 6")
             bleCommand(READ_REGISTER, ADD_GESTURE_NEW, READ)
             globalSemaphore = false
+            percentSync = 65
             state = 7  //11 пропустить калибровку //7 - выполнить
           }
 
@@ -1062,6 +1070,7 @@
             System.err.println("$info = 7")
             bleCommand(READ_REGISTER, CALIBRATION_NEW, READ) //TODO тут
             globalSemaphore = false
+            percentSync = 75
             state = 8
           }
           8 -> {
@@ -1120,12 +1129,14 @@
             System.err.println("$info = 14")
             bleCommand(READ_REGISTER, SHUTDOWN_CURRENT_NEW, READ)
             globalSemaphore = false
+            percentSync = 85
             state = 15
           }
           15 -> {
             System.err.println("$info = 15")
             bleCommand(READ_REGISTER, SET_GESTURE_NEW, READ)
             globalSemaphore = false
+            percentSync = 100
             state = 0
             endFlag = true
             startSubscribeSensorsNewDataThread()
Index: app/src/main/java/me/start/motorica/new_electronic_by_Rodeon/ui/fragments/main/ChartFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\npackage me.start.motorica.new_electronic_by_Rodeon.ui.fragments.main\r\n\r\nimport android.animation.ObjectAnimator\r\nimport android.annotation.SuppressLint\r\nimport android.content.Context\r\nimport android.content.SharedPreferences\r\nimport android.graphics.Color\r\nimport android.os.Bundle\r\nimport android.os.Handler\r\nimport android.text.Html\r\nimport android.view.LayoutInflater\r\nimport android.view.MotionEvent\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.SeekBar\r\nimport androidx.fragment.app.Fragment\r\nimport com.github.mikephil.charting.components.XAxis\r\nimport com.github.mikephil.charting.components.YAxis\r\nimport com.github.mikephil.charting.data.Entry\r\nimport com.github.mikephil.charting.data.LineData\r\nimport com.github.mikephil.charting.data.LineDataSet\r\nimport com.github.mikephil.charting.highlight.Highlight\r\nimport com.github.mikephil.charting.listener.OnChartValueSelectedListener\r\nimport com.github.mikephil.charting.utils.ColorTemplate\r\nimport kotlinx.android.synthetic.main.layout_chart.*\r\nimport me.start.motorica.R\r\nimport me.start.motorica.new_electronic_by_Rodeon.WDApplication\r\nimport me.start.motorica.new_electronic_by_Rodeon.ble.ConstantManager.*\r\nimport me.start.motorica.new_electronic_by_Rodeon.ble.SampleGattAttributes.*\r\nimport me.start.motorica.new_electronic_by_Rodeon.persistence.preference.PreferenceKeys\r\nimport me.start.motorica.new_electronic_by_Rodeon.persistence.preference.PreferenceManager\r\nimport me.start.motorica.new_electronic_by_Rodeon.persistence.sqlite.SqliteManager\r\nimport me.start.motorica.new_electronic_by_Rodeon.ui.activities.main.MainActivity\r\nimport me.start.motorica.new_electronic_by_Rodeon.utils.NavigationUtils\r\nimport javax.inject.Inject\r\n\r\n@Suppress(\"DEPRECATION\")\r\nopen class ChartFragment : Fragment(), OnChartValueSelectedListener {\r\n\r\n  @Inject\r\n  lateinit var sqliteManager: SqliteManager\r\n  @Inject\r\n  lateinit var preferenceManager: PreferenceManager\r\n\r\n  private var rootView: View? = null\r\n  private var main: MainActivity? = null\r\n  private var graphThread: Thread? = null\r\n  private var graphThreadFlag = false\r\n  private var testThreadFlag = true\r\n  private var plotData = true\r\n  private var showAdvancedSettings = false\r\n  private var mSettings: SharedPreferences? = null\r\n  private var updatingUIThread: Thread? = null\r\n  private var scale = 0F\r\n\r\n\r\n  override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\r\n    val rootView = inflater.inflate(R.layout.layout_chart, container, false)\r\n    WDApplication.component.inject(this)\r\n    this.rootView = rootView\r\n    if (activity != null) { main = activity as MainActivity? }\r\n    return rootView\r\n  }\r\n\r\n  @SuppressLint(\"ClickableViewAccessibility\", \"SetTextI18n\")\r\n  override fun onActivityCreated(savedInstanceState: Bundle?) {\r\n    super.onActivityCreated(savedInstanceState)\r\n    if (main?.locate?.contains(\"ru\")!!) {\r\n      opening_sensor_sensitivity_tv?.textSize = 8f\r\n      closing_sensor_sensitivity_tv?.textSize = 8f\r\n      swap_sensors_text_tv?.textSize = 11f\r\n      settings_blocking_tv?.textSize = 11f\r\n    }\r\n    initializedSensorGraph()\r\n    initializedUI()\r\n    showAdvancedSettings = NavigationUtils.showAdvancedSettings\r\n\r\n    mSettings = context?.getSharedPreferences(PreferenceKeys.APP_PREFERENCES, Context.MODE_PRIVATE)\r\n    Handler().postDelayed({\r\n      startUpdatingUIThread()\r\n    }, 500)\r\n\r\n    main?.setSwapOpenCloseButton(preferenceManager.getBoolean(main?.mDeviceAddress + PreferenceKeys.SWAP_OPEN_CLOSE_NUM, false))\r\n    scale = resources.displayMetrics.density\r\n\r\n    close_btn.setOnTouchListener { _, event ->\r\n      if (!main?.lockWriteBeforeFirstRead!!) {\r\n        if (!main?.getSwapOpenCloseButton()!!) {\r\n          if (event.action == MotionEvent.ACTION_DOWN) {\r\n            if (main?.mDeviceType!!.contains(DEVICE_TYPE_4)) {\r\n              main?.runWriteData(byteArrayOf(0x01), CLOSE_MOTOR_NEW, WRITE)\r\n              System.err.println(\"НАЖАТИЕ НА КНОПКУ ЗАКРЫТЬ НОВЫЙ ПРОТОКОЛ\")\r\n            } else {\r\n              main?.bleCommandConnector(byteArrayOf(0x01, 0x00), CLOSE_MOTOR_HDLE, WRITE, 7)\r\n              System.err.println(\"НАЖАТИЕ НА КНОПКУ ЗАКРЫТЬ СТАРЫЙ ПРОТОКОЛ\")\r\n            }\r\n          }\r\n          if (event.action == MotionEvent.ACTION_UP) {\r\n            if (main?.mDeviceType!!.contains(DEVICE_TYPE_4)) {\r\n              main?.runWriteData(byteArrayOf(0x00), CLOSE_MOTOR_NEW, WRITE)\r\n            } else {\r\n              main?.bleCommandConnector(byteArrayOf(0x00, 0x00), CLOSE_MOTOR_HDLE, WRITE, 7)\r\n\r\n            }\r\n          }\r\n        } else {\r\n          if (event.action == MotionEvent.ACTION_DOWN) {\r\n            if (main?.mDeviceType!!.contains(DEVICE_TYPE_4)) {\r\n              main?.runWriteData(byteArrayOf(0x01), OPEN_MOTOR_NEW, WRITE)\r\n            } else {\r\n              main?.bleCommandConnector(byteArrayOf(0x01, 0x00), OPEN_MOTOR_HDLE, WRITE, 6)\r\n            }\r\n          }\r\n          if (event.action == MotionEvent.ACTION_UP) {\r\n            if (main?.mDeviceType!!.contains(DEVICE_TYPE_4)) {\r\n              main?.runWriteData(byteArrayOf(0x00), OPEN_MOTOR_NEW, WRITE)\r\n            } else {\r\n              main?.bleCommandConnector(byteArrayOf(0x00, 0x00), OPEN_MOTOR_HDLE, WRITE, 6)\r\n            }\r\n          }\r\n        }\r\n      }\r\n      false\r\n    }\r\n    open_btn.setOnTouchListener { _, event ->\r\n      if (!main?.lockWriteBeforeFirstRead!!) {\r\n        if (!main?.getSwapOpenCloseButton()!!) {\r\n          if (event.action == MotionEvent.ACTION_DOWN) {\r\n            if (main?.mDeviceType!!.contains(DEVICE_TYPE_4)) {\r\n              main?.runWriteData(byteArrayOf(0x01), OPEN_MOTOR_NEW, WRITE)\r\n            } else {\r\n              main?.bleCommandConnector(byteArrayOf(0x01, 0x00), OPEN_MOTOR_HDLE, WRITE, 6)\r\n            }\r\n          }\r\n          if (event.action == MotionEvent.ACTION_UP) {\r\n            if (main?.mDeviceType!!.contains(DEVICE_TYPE_4)) {\r\n              main?.runWriteData(byteArrayOf(0x00), OPEN_MOTOR_NEW, WRITE)\r\n            } else {\r\n              main?.bleCommandConnector(byteArrayOf(0x00, 0x00), OPEN_MOTOR_HDLE, WRITE, 6)\r\n            }\r\n          }\r\n        } else {\r\n          if (event.action == MotionEvent.ACTION_DOWN) {\r\n            if (main?.mDeviceType!!.contains(DEVICE_TYPE_4)) {\r\n              main?.runWriteData(byteArrayOf(0x01), CLOSE_MOTOR_NEW, WRITE)\r\n            } else {\r\n              main?.bleCommandConnector(byteArrayOf(0x01, 0x00), CLOSE_MOTOR_HDLE, WRITE, 7)\r\n            }\r\n          }\r\n          if (event.action == MotionEvent.ACTION_UP) {\r\n            if (main?.mDeviceType!!.contains(DEVICE_TYPE_4)) {\r\n              main?.runWriteData(byteArrayOf(0x00), CLOSE_MOTOR_NEW, WRITE)\r\n            } else {\r\n              main?.bleCommandConnector(byteArrayOf(0x00, 0x00), CLOSE_MOTOR_HDLE, WRITE, 7)\r\n            }\r\n          }\r\n        }\r\n      }\r\n      false\r\n    }\r\n    open_CH_sb.setOnSeekBarChangeListener(object : SeekBar.OnSeekBarChangeListener {\r\n      override fun onProgressChanged(seekBar: SeekBar, progress: Int, fromUser: Boolean) {\r\n        System.err.println(\"CH1 = $progress\")\r\n        ObjectAnimator.ofFloat(limit_CH1, \"y\", 300 * scale - 5f - (progress * scale * 1.04f)).setDuration(200).start()//  10f -> 60f\r\n        ObjectAnimator.ofFloat(open_border, \"y\", 300 * scale - 5f - (progress * scale * 1.04f)).setDuration(200).start()//  10f -> 60f\r\n\r\n        open_threshold_tv.text = progress.toString()\r\n      }\r\n\r\n      override fun onStartTrackingTouch(seekBar: SeekBar) {}\r\n      override fun onStopTrackingTouch(seekBar: SeekBar) {\r\n        if (!preferenceManager.getBoolean(main?.mDeviceAddress + PreferenceKeys.THRESHOLDS_BLOCKING, false) && (!main?.lockWriteBeforeFirstRead!!)) {//отправка команды изменения порога на протез только если блокировка не активна\r\n          if (main?.mDeviceType!!.contains(DEVICE_TYPE_4)) {\r\n            main?.runWriteData(byteArrayOf(seekBar.progress.toByte()), OPEN_THRESHOLD_NEW, WRITE)\r\n          } else {\r\n            main?.bleCommandConnector(byteArrayOf(seekBar.progress.toByte()), OPEN_THRESHOLD_HDLE, WRITE, 4)\r\n          }\r\n          if (main?.savingSettingsWhenModified == true) {\r\n            main?.saveInt(main?.mDeviceAddress + PreferenceKeys.OPEN_CH_NUM, seekBar.progress)\r\n          }\r\n        }\r\n      }\r\n    })\r\n    close_CH_sb.setOnSeekBarChangeListener(object : SeekBar.OnSeekBarChangeListener {\r\n      override fun onProgressChanged(seekBar: SeekBar, progress: Int, fromUser: Boolean) {\r\n        System.err.println(\"CH2 = $progress\")\r\n        ObjectAnimator.ofFloat(limit_CH2, \"y\", 300 * scale - 5f - (progress * scale * 1.04f)).setDuration(200).start()\r\n        ObjectAnimator.ofFloat(close_border, \"y\", 300 * scale - 5f - (progress * scale * 1.04f)).setDuration(200).start()//  10f -> 60f\r\n        close_threshold_tv.text = progress.toString()\r\n      }\r\n\r\n      override fun onStartTrackingTouch(seekBar: SeekBar) {}\r\n      override fun onStopTrackingTouch(seekBar: SeekBar) {\r\n        if (!preferenceManager.getBoolean(main?.mDeviceAddress + PreferenceKeys.THRESHOLDS_BLOCKING, false) && (!main?.lockWriteBeforeFirstRead!!)) {//отправка команды изменения порога на протез только если блокировка не активна\r\n          if (main?.mDeviceType!!.contains(DEVICE_TYPE_4)) {\r\n            main?.runWriteData(byteArrayOf(seekBar.progress.toByte()), CLOSE_THRESHOLD_NEW, WRITE)\r\n          } else {\r\n            main?.bleCommandConnector(byteArrayOf(seekBar.progress.toByte()), CLOSE_THRESHOLD_HDLE, WRITE, 5)\r\n          }\r\n          if (main?.savingSettingsWhenModified == true) {\r\n            main?.saveInt(main?.mDeviceAddress + PreferenceKeys.CLOSE_CH_NUM, seekBar.progress)\r\n          }\r\n        }\r\n      }\r\n    })\r\n    correlator_noise_threshold_1_sb.setOnSeekBarChangeListener(object : SeekBar.OnSeekBarChangeListener {\r\n      override fun onProgressChanged(seekBar: SeekBar, progress: Int, fromUser: Boolean) {\r\n        correlator_noise_threshold_1_tv.text = progress.toString()\r\n      }\r\n      override fun onStartTrackingTouch(seekBar: SeekBar) {}\r\n      override fun onStopTrackingTouch(seekBar: SeekBar) {\r\n        if (!preferenceManager.getBoolean(main?.mDeviceAddress + PreferenceKeys.THRESHOLDS_BLOCKING, false) && (!main?.lockWriteBeforeFirstRead!!)) {//отправка команды изменения порога на протез только если блокировка не активна\r\n          if (main?.mDeviceType!!.contains(DEVICE_TYPE_4)) {\r\n//            { 16, 6, 1, 0x10, 36, 18, 44, 52, 64, 72, 0x40, 5, 64 }\r\n//            { 16, 6, 1, 0x10, 36, 18, 44, 52, 64, 72, 0x40, 5, 64 }\r\n            main?.runWriteData(byteArrayOf((255 - seekBar.progress).toByte(), 6, 1, 0x10, 36, 18, 44, 52, 64, 72, 0x40, 5, 64, (255 - correlator_noise_threshold_2_sb.progress).toByte(), 6, 1, 0x10, 36, 18, 44, 52, 64, 72, 0x40, 5, 64 ), SENS_OPTIONS_NEW, WRITE)\r\n          } else {\r\n            main?.bleCommandConnector(byteArrayOf(0x01, (255 - seekBar.progress).toByte(), 0x01), SENS_OPTIONS, WRITE,11)\r\n          }\r\n          if (main?.savingSettingsWhenModified == true) {\r\n            main?.saveInt(main?.mDeviceAddress + PreferenceKeys.CORRELATOR_NOISE_THRESHOLD_1_NUM, (255 - seekBar.progress))\r\n          }\r\n        }\r\n      }\r\n    })\r\n    correlator_noise_threshold_2_sb.setOnSeekBarChangeListener(object : SeekBar.OnSeekBarChangeListener {\r\n      override fun onProgressChanged(seekBar: SeekBar, progress: Int, fromUser: Boolean) {\r\n        correlator_noise_threshold_2_tv.text = seekBar.progress.toString()\r\n      }\r\n      override fun onStartTrackingTouch(seekBar: SeekBar) {}\r\n      override fun onStopTrackingTouch(seekBar: SeekBar) {\r\n        if (!preferenceManager.getBoolean(main?.mDeviceAddress + PreferenceKeys.THRESHOLDS_BLOCKING, false) && (!main?.lockWriteBeforeFirstRead!!)) {//отправка команды изменения порога на протез только если блокировка не активна\r\n          if (main?.mDeviceType!!.contains(DEVICE_TYPE_4)) {\r\n            main?.runWriteData(byteArrayOf((255 - correlator_noise_threshold_1_sb.progress).toByte(), 6, 1, 0x10, 36, 18, 44, 52, 64, 72, 0x40, 5, 64, (255 - seekBar.progress).toByte(), 6, 1, 0x10, 36, 18, 44, 52, 64, 72, 0x40, 5, 64), SENS_OPTIONS_NEW, WRITE)\r\n          } else {\r\n            main?.bleCommandConnector(byteArrayOf(0x01, (255 - seekBar.progress).toByte(), 0x02), SENS_OPTIONS, WRITE,11)\r\n          }\r\n          if (main?.savingSettingsWhenModified == true) {\r\n            main?.saveInt(main?.mDeviceAddress + PreferenceKeys.CORRELATOR_NOISE_THRESHOLD_2_NUM, (255 - seekBar.progress))\r\n          }\r\n        }\r\n      }\r\n    })\r\n    swap_sensors_sw.setOnClickListener {\r\n      if (!preferenceManager.getBoolean(main?.mDeviceAddress + PreferenceKeys.THRESHOLDS_BLOCKING, false) && (!main?.lockWriteBeforeFirstRead!!)) {\r\n        if (swap_sensors_sw.isChecked) {\r\n          swap_sensors_tv.text = 1.toString()\r\n          if (main?.mDeviceType!!.contains(DEVICE_TYPE_4)) {\r\n            main?.runWriteData(byteArrayOf(0x01), SET_REVERSE_NEW, WRITE)\r\n          } else {\r\n            main?.bleCommandConnector(byteArrayOf(0x01), SET_REVERSE, WRITE, 14)\r\n          }\r\n          preferenceManager.putBoolean(main?.mDeviceAddress + PreferenceKeys.SET_REVERSE_NUM, true)\r\n          main?.setReverseNum = 1\r\n        } else {\r\n          swap_sensors_tv.text = 0.toString()\r\n          if (main?.mDeviceType!!.contains(DEVICE_TYPE_4)) {\r\n            main?.runWriteData(byteArrayOf(0x00), SET_REVERSE_NEW, WRITE)\r\n          } else {\r\n            main?.bleCommandConnector(byteArrayOf(0x00), SET_REVERSE, WRITE, 14)\r\n          }\r\n          preferenceManager.putBoolean(main?.mDeviceAddress + PreferenceKeys.SET_REVERSE_NUM, false)\r\n          main?.setReverseNum = 0\r\n        }\r\n      }\r\n    }\r\n    driver_tv.setOnLongClickListener {\r\n      showAdvancedSettings = if (showAdvancedSettings) {\r\n        graphThreadFlag = false\r\n        Handler().postDelayed({\r\n          main?.showAdvancedSettings(showAdvancedSettings)\r\n        }, 100)\r\n        false\r\n      } else {\r\n        graphThreadFlag = false\r\n        Handler().postDelayed({\r\n          main?.showAdvancedSettings(showAdvancedSettings)\r\n        }, 100)\r\n        true\r\n      }\r\n      false\r\n    }\r\n    thresholds_blocking_sw.setOnClickListener{\r\n//      main?.bleCommand(READ_REGISTER, SENS_OPTIONS_NEW, READ)\r\n      main?.bleCommand(READ_REGISTER, ADD_GESTURE_NEW, READ)\r\n//      if (thresholds_blocking_sw.isChecked) {\r\n//        thresholds_blocking_tv.text = Html.fromHtml(getString(R.string.on))\r\n//        preferenceManager.putBoolean(main?.mDeviceAddress + PreferenceKeys.THRESHOLDS_BLOCKING, true)\r\n//      } else {\r\n//        thresholds_blocking_tv.text = resources.getString(R.string.off)\r\n//        preferenceManager.putBoolean(main?.mDeviceAddress + PreferenceKeys.THRESHOLDS_BLOCKING, false)\r\n//      }\r\n    }\r\n  }\r\n\r\n  @SuppressLint(\"SetTextI18n\")\r\n  private fun initializedUI() {\r\n    thresholds_blocking_sw.isChecked = preferenceManager.getBoolean(main?.mDeviceAddress + PreferenceKeys.THRESHOLDS_BLOCKING, false)\r\n    if (preferenceManager.getBoolean(main?.mDeviceAddress + PreferenceKeys.THRESHOLDS_BLOCKING, false)) thresholds_blocking_tv.text = Html.fromHtml(getString(R.string.on))\r\n    main?.offSensorsUIBeforeConnection()\r\n  }\r\n\r\n  override fun onResume() {\r\n    super.onResume()\r\n    System.err.println(\"ChartFragment onResume\")\r\n    graphThreadFlag = true\r\n    testThreadFlag = true\r\n    startGraphEnteringDataThread()\r\n  }\r\n  override fun onPause() {\r\n    super.onPause()\r\n    graphThreadFlag = false\r\n    System.err.println(\"ChartFragment onPause\")\r\n  }\r\n  override fun onDestroy() {\r\n    super.onDestroy()\r\n    testThreadFlag = false\r\n  }\r\n\r\n  //////////////////////////////////////////////////////////////////////////////\r\n  /**                          работа с графиками                            **/\r\n  //////////////////////////////////////////////////////////////////////////////\r\n  private fun createSet(): LineDataSet {\r\n    val set = LineDataSet(null, null)\r\n    set.axisDependency = YAxis.AxisDependency.LEFT //.AxisDependency.LEFT\r\n    set.lineWidth = 2f\r\n    set.color = Color.rgb(255, 171, 0)\r\n    set.mode = LineDataSet.Mode.HORIZONTAL_BEZIER\r\n    set.setCircleColor(Color.TRANSPARENT)\r\n    set.circleHoleColor = Color.TRANSPARENT\r\n    set.fillColor = ColorTemplate.getHoloBlue()\r\n    set.highLightColor = Color.rgb(244, 117, 177)\r\n    set.valueTextColor = Color.TRANSPARENT\r\n    return set\r\n  }\r\n  private fun createSet2(): LineDataSet {\r\n    val set2 = LineDataSet(null, null)\r\n    set2.axisDependency = YAxis.AxisDependency.LEFT //.AxisDependency.LEFT\r\n    set2.lineWidth = 2f\r\n    set2.color = Color.WHITE\r\n    set2.mode = LineDataSet.Mode.HORIZONTAL_BEZIER\r\n    set2.setCircleColor(Color.TRANSPARENT)\r\n    set2.circleHoleColor = Color.TRANSPARENT\r\n    set2.fillColor = ColorTemplate.getHoloBlue()\r\n    set2.highLightColor = Color.rgb(244, 117, 177)\r\n    set2.valueTextColor = Color.TRANSPARENT\r\n    return set2\r\n  }\r\n  private fun addEntry(sens1: Int, sens2: Int) {\r\n    val data: LineData = chart_mainchart?.data!!\r\n    var set = data.getDataSetByIndex(0)\r\n    var set2 = data.getDataSetByIndex(1)\r\n    if (set == null) {\r\n      set = createSet()\r\n      set2 = createSet2()\r\n      data.addDataSet(set)\r\n      data.addDataSet(set2)\r\n    }\r\n\r\n    data.addEntry(Entry(set.entryCount.toFloat(), sens1.toFloat()), 0)\r\n    data.addEntry(Entry(set2!!.entryCount.toFloat(), sens2.toFloat()), 1)\r\n    data.notifyDataChanged()\r\n    chart_mainchart.notifyDataSetChanged()\r\n    chart_mainchart.setVisibleXRangeMaximum(50f)\r\n    chart_mainchart.moveViewToX(set.entryCount - 50.toFloat()) //data.getEntryCount()\r\n  }\r\n  private fun initializedSensorGraph() {\r\n    chart_mainchart.contentDescription\r\n    chart_mainchart.setTouchEnabled(false)\r\n    chart_mainchart.isDragEnabled = false\r\n    chart_mainchart.isDragDecelerationEnabled = false\r\n    chart_mainchart.setScaleEnabled(false)\r\n    chart_mainchart.setDrawGridBackground(false)\r\n    chart_mainchart.setPinchZoom(false)\r\n    chart_mainchart.setBackgroundColor(Color.TRANSPARENT)\r\n    chart_mainchart.getHighlightByTouchPoint(1f, 1f)\r\n    val data = LineData()\r\n    val data2 = LineData()\r\n    chart_mainchart.data = data\r\n    chart_mainchart.data = data2\r\n    chart_mainchart.legend.isEnabled = false\r\n    chart_mainchart.description.textColor = Color.TRANSPARENT\r\n    chart_mainchart.animateY(700)\r\n\r\n    val x: XAxis = chart_mainchart.xAxis\r\n    x.textColor = Color.TRANSPARENT\r\n    x.setDrawGridLines(false)\r\n    x.axisMaximum = 4000000f\r\n    x.setAvoidFirstLastClipping(true)\r\n    x.position = XAxis.XAxisPosition.BOTTOM\r\n\r\n    val y: YAxis = chart_mainchart.axisLeft\r\n    y.textColor = Color.WHITE\r\n    y.mAxisMaximum = 255f\r\n    y.mAxisMinimum = 0f\r\n    y.textSize = 0f\r\n    y.textColor = Color.TRANSPARENT\r\n    y.setDrawGridLines(true)\r\n    y.setDrawAxisLine(false)\r\n    y.setStartAtZero(true)\r\n    y.gridColor = Color.WHITE\r\n    chart_mainchart.axisRight.gridColor = Color.TRANSPARENT\r\n    chart_mainchart.axisRight.axisLineColor = Color.TRANSPARENT\r\n    chart_mainchart.axisRight.textColor = Color.TRANSPARENT\r\n  }\r\n\r\n  private fun startGraphEnteringDataThread() {\r\n    graphThread = Thread {\r\n      while (graphThreadFlag) {\r\n        main?.runOnUiThread {\r\n          if (plotData) {\r\n            addEntry(10, 255)\r\n            addEntry(115, 150)\r\n            addEntry(10, 255)\r\n            addEntry(115, 150)\r\n            addEntry(10, 255)\r\n            addEntry(115, 150)\r\n            addEntry(10, 255)\r\n            addEntry(115, 150)\r\n            addEntry(10, 255)\r\n            addEntry(115, 150)\r\n            addEntry(10, 255)\r\n            addEntry(115, 150)\r\n            plotData = false\r\n          }\r\n          addEntry(main!!.getDataSens1(), main!!.getDataSens2())\r\n        }\r\n        try {\r\n          Thread.sleep(GRAPH_UPDATE_DELAY.toLong())\r\n        } catch (ignored: Exception) {\r\n        }\r\n      }\r\n    }\r\n    graphThread?.start()\r\n  }\r\n\r\n  override fun onValueSelected(e: Entry?, h: Highlight?) {}\r\n  override fun onNothingSelected() {}\r\n\r\n\r\n  @SuppressLint(\"SetTextI18n\")\r\n  private fun startUpdatingUIThread() {\r\n    updatingUIThread = Thread {\r\n      while (testThreadFlag) {\r\n        open_CH_sb.progress = mSettings!!.getInt(main?.mDeviceAddress + PreferenceKeys.OPEN_CH_NUM, 30)\r\n        close_CH_sb.progress = mSettings!!.getInt(main?.mDeviceAddress + PreferenceKeys.CLOSE_CH_NUM, 30)\r\n\r\n        if (main?.setReverseNum == 1) { preferenceManager.putBoolean(main?.mDeviceAddress + PreferenceKeys.SET_REVERSE_NUM, true)\r\n        } else { preferenceManager.putBoolean(main?.mDeviceAddress + PreferenceKeys.SET_REVERSE_NUM, false) }\r\n\r\n        main?.runOnUiThread {\r\n          swap_sensors_sw?.isChecked = preferenceManager.getBoolean(main?.mDeviceAddress + PreferenceKeys.SET_REVERSE_NUM, false)\r\n\r\n          if (preferenceManager.getBoolean(main?.mDeviceAddress + PreferenceKeys.SET_REVERSE_NUM, false)) {\r\n            swap_sensors_tv?.text = 1.toString()\r\n          } else {\r\n            swap_sensors_tv?.text = 0.toString()\r\n          }\r\n\r\n          driver_tv?.text = resources.getString(R.string.driver) +(mSettings!!.getInt(main?.mDeviceAddress + PreferenceKeys.DRIVER_NUM, 1)).toFloat()/100 + \"v\"\r\n          bms_tv?.text = resources.getString(R.string.bms) +(mSettings!!.getInt(main?.mDeviceAddress + PreferenceKeys.BMS_NUM, 1)).toFloat()/100 + \"v\"\r\n          sensor_tv?.text = resources.getString(R.string.sens) +(mSettings!!.getInt(main?.mDeviceAddress + PreferenceKeys.SENS_NUM, 1)).toFloat()/100 + \"v\"\r\n          ObjectAnimator.ofFloat(limit_CH1, \"y\", 300 * scale - 5f - ((open_CH_sb?.progress?.times(scale)\r\n                  ?: 22.0f) * 1.04f)).setDuration(200).start()\r\n          ObjectAnimator.ofFloat(limit_CH2, \"y\", 300 * scale - 5f - ((close_CH_sb?.progress?.times(scale)\r\n                  ?: 22.0f) * 1.04f)).setDuration(200).start()\r\n          ObjectAnimator.ofFloat(open_border, \"y\", 300 * scale - 5f - ((open_CH_sb?.progress?.times(scale)\r\n                  ?: 22.0f) * 1.04f)).setDuration(200).start()\r\n          ObjectAnimator.ofFloat(close_border, \"y\", 300 * scale - 5f - ((close_CH_sb?.progress?.times(scale)\r\n                  ?: 22.0f) * 1.04f)).setDuration(200).start()\r\n          ObjectAnimator.ofInt(correlator_noise_threshold_1_sb, \"progress\", 255 - (mSettings!!.getInt(main?.mDeviceAddress + PreferenceKeys.CORRELATOR_NOISE_THRESHOLD_1_NUM, 16))).setDuration(200).start()\r\n          ObjectAnimator.ofInt(correlator_noise_threshold_2_sb, \"progress\", 255 - (mSettings!!.getInt(main?.mDeviceAddress + PreferenceKeys.CORRELATOR_NOISE_THRESHOLD_2_NUM, 16))).setDuration(200).start()\r\n        }\r\n        try {\r\n          Thread.sleep(1000)\r\n        } catch (ignored: Exception) { }\r\n      }\r\n    }\r\n    updatingUIThread?.start()\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/me/start/motorica/new_electronic_by_Rodeon/ui/fragments/main/ChartFragment.kt	(revision 5cac9875d963fb7b862372491e876bbe9ad2f790)
+++ app/src/main/java/me/start/motorica/new_electronic_by_Rodeon/ui/fragments/main/ChartFragment.kt	(date 1638970459401)
@@ -236,6 +236,23 @@
         }
       }
     })
+    start_sync_sb.setOnSeekBarChangeListener(object : SeekBar.OnSeekBarChangeListener{
+      override fun onProgressChanged(seekBar: SeekBar, progress: Int, fromUser: Boolean) {
+        sync_tv?.text = resources.getString(R.string.sync) + " " + progress.toString() + "%"
+        if ( progress == 100 ) {
+//          sync_tv?.visibility = View.GONE
+          System.err.println("-------> do al'fi")
+          if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.Q) {
+
+            sync_tv?.transitionAlpha = 0.5f
+            System.err.println("-------> posle al'fi")
+          }
+        }
+      }
+      override fun onStartTrackingTouch(seekBar: SeekBar) {}
+      override fun onStopTrackingTouch(seekBar: SeekBar) {}
+    })
+
     correlator_noise_threshold_2_sb.setOnSeekBarChangeListener(object : SeekBar.OnSeekBarChangeListener {
       override fun onProgressChanged(seekBar: SeekBar, progress: Int, fromUser: Boolean) {
         correlator_noise_threshold_2_tv.text = seekBar.progress.toString()
@@ -360,40 +377,40 @@
     return set2
   }
   private fun addEntry(sens1: Int, sens2: Int) {
-    val data: LineData = chart_mainchart?.data!!
-    var set = data.getDataSetByIndex(0)
-    var set2 = data.getDataSetByIndex(1)
+    val data: LineData? = chart_mainchart?.data
+    var set = data?.getDataSetByIndex(0)
+    var set2 = data?.getDataSetByIndex(1)
     if (set == null) {
       set = createSet()
       set2 = createSet2()
-      data.addDataSet(set)
-      data.addDataSet(set2)
+      data?.addDataSet(set)
+      data?.addDataSet(set2)
     }
 
-    data.addEntry(Entry(set.entryCount.toFloat(), sens1.toFloat()), 0)
-    data.addEntry(Entry(set2!!.entryCount.toFloat(), sens2.toFloat()), 1)
-    data.notifyDataChanged()
-    chart_mainchart.notifyDataSetChanged()
-    chart_mainchart.setVisibleXRangeMaximum(50f)
-    chart_mainchart.moveViewToX(set.entryCount - 50.toFloat()) //data.getEntryCount()
+    data?.addEntry(Entry(set.entryCount.toFloat(), sens1.toFloat()), 0)
+    data?.addEntry(Entry(set2!!.entryCount.toFloat(), sens2.toFloat()), 1)
+    data?.notifyDataChanged()
+    chart_mainchart?.notifyDataSetChanged()
+    chart_mainchart?.setVisibleXRangeMaximum(50f)
+    chart_mainchart?.moveViewToX(set.entryCount - 50.toFloat()) //data.getEntryCount()
   }
   private fun initializedSensorGraph() {
-    chart_mainchart.contentDescription
-    chart_mainchart.setTouchEnabled(false)
-    chart_mainchart.isDragEnabled = false
-    chart_mainchart.isDragDecelerationEnabled = false
-    chart_mainchart.setScaleEnabled(false)
-    chart_mainchart.setDrawGridBackground(false)
-    chart_mainchart.setPinchZoom(false)
-    chart_mainchart.setBackgroundColor(Color.TRANSPARENT)
-    chart_mainchart.getHighlightByTouchPoint(1f, 1f)
+    chart_mainchart?.contentDescription
+    chart_mainchart?.setTouchEnabled(false)
+    chart_mainchart?.isDragEnabled = false
+    chart_mainchart?.isDragDecelerationEnabled = false
+    chart_mainchart?.setScaleEnabled(false)
+    chart_mainchart?.setDrawGridBackground(false)
+    chart_mainchart?.setPinchZoom(false)
+    chart_mainchart?.setBackgroundColor(Color.TRANSPARENT)
+    chart_mainchart?.getHighlightByTouchPoint(1f, 1f)
     val data = LineData()
     val data2 = LineData()
-    chart_mainchart.data = data
-    chart_mainchart.data = data2
-    chart_mainchart.legend.isEnabled = false
-    chart_mainchart.description.textColor = Color.TRANSPARENT
-    chart_mainchart.animateY(700)
+    chart_mainchart?.data = data
+    chart_mainchart?.data = data2
+    chart_mainchart?.legend?.isEnabled = false
+    chart_mainchart?.description?.textColor = Color.TRANSPARENT
+    chart_mainchart?.animateY(700)
 
     val x: XAxis = chart_mainchart.xAxis
     x.textColor = Color.TRANSPARENT
@@ -402,19 +419,19 @@
     x.setAvoidFirstLastClipping(true)
     x.position = XAxis.XAxisPosition.BOTTOM
 
-    val y: YAxis = chart_mainchart.axisLeft
-    y.textColor = Color.WHITE
-    y.mAxisMaximum = 255f
-    y.mAxisMinimum = 0f
-    y.textSize = 0f
-    y.textColor = Color.TRANSPARENT
-    y.setDrawGridLines(true)
-    y.setDrawAxisLine(false)
-    y.setStartAtZero(true)
-    y.gridColor = Color.WHITE
-    chart_mainchart.axisRight.gridColor = Color.TRANSPARENT
-    chart_mainchart.axisRight.axisLineColor = Color.TRANSPARENT
-    chart_mainchart.axisRight.textColor = Color.TRANSPARENT
+    val y: YAxis? = chart_mainchart?.axisLeft
+    y?.textColor = Color.WHITE
+    y?.mAxisMaximum = 255f
+    y?.mAxisMinimum = 0f
+    y?.textSize = 0f
+    y?.textColor = Color.TRANSPARENT
+    y?.setDrawGridLines(true)
+    y?.setDrawAxisLine(false)
+    y?.setStartAtZero(true)
+    y?.gridColor = Color.WHITE
+    chart_mainchart?.axisRight?.gridColor = Color.TRANSPARENT
+    chart_mainchart?.axisRight?.axisLineColor = Color.TRANSPARENT
+    chart_mainchart?.axisRight?.textColor = Color.TRANSPARENT
   }
 
   private fun startGraphEnteringDataThread() {
@@ -473,6 +490,7 @@
           driver_tv?.text = resources.getString(R.string.driver) +(mSettings!!.getInt(main?.mDeviceAddress + PreferenceKeys.DRIVER_NUM, 1)).toFloat()/100 + "v"
           bms_tv?.text = resources.getString(R.string.bms) +(mSettings!!.getInt(main?.mDeviceAddress + PreferenceKeys.BMS_NUM, 1)).toFloat()/100 + "v"
           sensor_tv?.text = resources.getString(R.string.sens) +(mSettings!!.getInt(main?.mDeviceAddress + PreferenceKeys.SENS_NUM, 1)).toFloat()/100 + "v"
+          ObjectAnimator.ofInt(start_sync_sb, "progress", main?.percentSync!!).setDuration(200).start()
           ObjectAnimator.ofFloat(limit_CH1, "y", 300 * scale - 5f - ((open_CH_sb?.progress?.times(scale)
                   ?: 22.0f) * 1.04f)).setDuration(200).start()
           ObjectAnimator.ofFloat(limit_CH2, "y", 300 * scale - 5f - ((close_CH_sb?.progress?.times(scale)
Index: app/src/main/res/layout/layout_chart.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:id=\"@+id/layout_chart\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\">\r\n\r\n    <!-- # Main Layout # -->\r\n    <RelativeLayout\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\"\r\n        android:orientation=\"vertical\"\r\n        tools:ignore=\"UselessParent\">\r\n\r\n\r\n        <RelativeLayout\r\n            android:id=\"@+id/middle_relative\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"320dp\">\r\n\r\n            <View\r\n                android:id=\"@+id/open_border\"\r\n                android:layout_width=\"7.5dp\"\r\n                android:layout_height=\"400dp\"\r\n                android:layout_alignTop=\"@+id/limit_CH1\"\r\n                android:layout_alignParentStart=\"true\"\r\n                android:layout_alignParentBottom=\"true\"\r\n                android:layout_marginStart=\"0dp\"\r\n                android:layout_marginTop=\"0dp\"\r\n                android:layout_marginBottom=\"-400dp\"\r\n                android:background=\"@drawable/open_border\"\r\n                tools:ignore=\"ContentDescription\" />\r\n\r\n            <View\r\n                android:id=\"@+id/close_border\"\r\n                android:layout_width=\"7.5dp\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_alignTop=\"@+id/limit_CH2\"\r\n                android:layout_alignParentEnd=\"true\"\r\n                android:layout_alignParentBottom=\"true\"\r\n                android:layout_marginStart=\"50dp\"\r\n                android:layout_marginTop=\"0dp\"\r\n                android:layout_marginEnd=\"0dp\"\r\n                android:layout_marginBottom=\"-400dp\"\r\n                android:background=\"@drawable/close_border\"\r\n                tools:ignore=\"ContentDescription\" />\r\n\r\n            <TextView\r\n                android:id=\"@+id/driver_tv\"\r\n                style=\"@style/Text\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_alignParentStart=\"true\"\r\n                android:layout_alignParentLeft=\"true\"\r\n                android:layout_alignParentTop=\"true\"\r\n                android:layout_marginStart=\"5dp\"\r\n                android:layout_marginTop=\"4dp\"\r\n                android:text=\"@string/driver_0_00v\"\r\n                android:textSize=\"10sp\"\r\n                tools:ignore=\"RtlHardcoded,SmallSp\" />\r\n\r\n            <TextView\r\n                android:id=\"@+id/bms_tv\"\r\n                style=\"@style/Text\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_alignParentTop=\"true\"\r\n                android:layout_marginStart=\"16dp\"\r\n                android:layout_marginTop=\"4dp\"\r\n                android:layout_toEndOf=\"@+id/driver_tv\"\r\n                android:text=\"@string/bms_0_00v\"\r\n                android:textSize=\"10sp\"\r\n                tools:ignore=\"HardcodedText,RtlHardcoded,SmallSp\" />\r\n\r\n            <TextView\r\n                android:id=\"@+id/sensor_tv\"\r\n                style=\"@style/Text\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_alignParentTop=\"true\"\r\n                android:layout_marginStart=\"16dp\"\r\n                android:layout_marginTop=\"4dp\"\r\n                android:layout_toEndOf=\"@+id/bms_tv\"\r\n                android:text=\"@string/sens_0_00v\"\r\n                android:textSize=\"10sp\"\r\n                tools:ignore=\"HardcodedText,RtlHardcoded,SmallSp\" />\r\n\r\n            <LinearLayout\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"match_parent\"\r\n                android:orientation=\"horizontal\"\r\n                android:weightSum=\"2\"\r\n                tools:ignore=\"DisableBaselineAlignment\">\r\n                <RelativeLayout\r\n                    android:layout_width=\"0dp\"\r\n                    android:layout_height=\"match_parent\"\r\n                    android:layout_weight=\"1\">\r\n                    <SeekBar\r\n                        android:id=\"@+id/open_CH_sb\"\r\n                        android:layout_width=\"300dp\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_alignParentTop=\"true\"\r\n                        android:layout_alignParentBottom=\"true\"\r\n                        android:layout_marginStart=\"-100dp\"\r\n                        android:layout_marginTop=\"-10dp\"\r\n                        android:layout_marginBottom=\"-40dp\"\r\n                        android:indeterminate=\"false\"\r\n                        android:max=\"255\"\r\n                        android:progress=\"30\"\r\n                        android:progressDrawable=\"@drawable/track_invisible\"\r\n                        android:rotation=\"-90\"\r\n                        android:thumb=\"@drawable/thumb_invisible\" />\r\n\r\n\r\n                </RelativeLayout>\r\n                <RelativeLayout\r\n                    android:layout_width=\"0dp\"\r\n                    android:layout_height=\"match_parent\"\r\n                    android:layout_weight=\"1\">\r\n                    <SeekBar\r\n                        android:id=\"@+id/close_CH_sb\"\r\n                        android:layout_width=\"300dp\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_alignParentTop=\"true\"\r\n                        android:layout_alignParentBottom=\"true\"\r\n                        android:layout_marginTop=\"-10dp\"\r\n                        android:layout_marginBottom=\"-40dp\"\r\n                        android:layout_marginEnd=\"-100dp\"\r\n                        android:indeterminate=\"false\"\r\n                        android:max=\"255\"\r\n                        android:progress=\"30\"\r\n                        android:progressDrawable=\"@drawable/track_invisible\"\r\n                        android:rotation=\"-90\"\r\n                        android:thumb=\"@drawable/thumb_invisible\" />\r\n                </RelativeLayout>\r\n            </LinearLayout>\r\n\r\n            <com.github.mikephil.charting.charts.LineChart\r\n                android:id=\"@+id/chart_mainchart\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_marginEnd=\"-19dp\"\r\n                android:layout_marginStart=\"-14dp\"\r\n                android:layout_height=\"320dp\"\r\n                android:foregroundGravity=\"center\" />\r\n\r\n            <RelativeLayout\r\n                android:id=\"@+id/limit_CH1\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_alignParentStart=\"true\"\r\n                android:layout_alignParentEnd=\"true\"\r\n                android:layout_alignParentBottom=\"true\"\r\n                android:layout_marginStart=\"0dp\"\r\n                android:layout_marginEnd=\"80dp\"\r\n                android:orientation=\"vertical\"\r\n                tools:ignore=\"UseCompoundDrawables\">\r\n                <View\r\n                    android:id=\"@+id/touch_aria_open\"\r\n                    android:layout_width=\"30dp\"\r\n                    android:layout_height=\"15dp\"\r\n                    android:layout_alignParentTop=\"true\"\r\n                    android:layout_marginTop=\"0dp\"\r\n                    android:background=\"@drawable/touch_aria_open\"/>\r\n\r\n                <ImageView\r\n                    android:id=\"@+id/open_threshold_iv\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"3dp\"\r\n                    android:layout_alignParentTop=\"true\"\r\n                    android:layout_marginTop=\"6dp\"\r\n                    android:layout_marginStart=\"10dp\"\r\n                    android:background=\"@color/open_threshold\"\r\n                    tools:ignore=\"ContentDescription\" />\r\n\r\n                <TextView\r\n                    android:id=\"@+id/open_threshold_tv\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"match_parent\"\r\n                    android:layout_alignEnd=\"@+id/touch_aria_open\"\r\n                    android:layout_alignBottom=\"@+id/touch_aria_open\"\r\n                    android:layout_marginStart=\"0dp\"\r\n                    android:layout_marginTop=\"0dp\"\r\n                    android:layout_marginEnd=\"0dp\"\r\n                    android:layout_marginBottom=\"0dp\"\r\n                    android:textAlignment=\"center\"\r\n                    android:fontFamily=\"@font/font_open_sans\"\r\n                    android:text=\"30\"\r\n                    android:textColor=\"@color/cream_white\"\r\n                    android:textSize=\"9sp\"\r\n                    tools:ignore=\"HardcodedText,RtlSymmetry,SmallSp\" />\r\n\r\n                <TextView\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_below=\"@+id/open_threshold_iv\"\r\n                    android:layout_marginStart=\"0dp\"\r\n                    android:layout_marginTop=\"0dp\"\r\n                    android:layout_toEndOf=\"@+id/touch_aria_open\"\r\n                    android:fontFamily=\"@font/font_open_sans\"\r\n                    android:paddingStart=\"0dp\"\r\n                    android:text=\"@string/open_threshold\"\r\n                    android:textAlignment=\"viewStart\"\r\n                    android:textColor=\"@color/cream_white\"\r\n                    android:textSize=\"6sp\"\r\n                    tools:ignore=\"RtlSymmetry,SmallSp\" />\r\n            </RelativeLayout>\r\n            <RelativeLayout\r\n                android:id=\"@+id/limit_CH2\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_alignParentStart=\"true\"\r\n                android:layout_alignParentEnd=\"true\"\r\n                android:layout_alignParentBottom=\"true\"\r\n                android:layout_marginStart=\"94dp\"\r\n                android:layout_marginEnd=\"0dp\"\r\n                android:orientation=\"vertical\"\r\n                tools:ignore=\"UseCompoundDrawables\">\r\n\r\n                <View\r\n                    android:id=\"@+id/touch_aria_close\"\r\n                    android:layout_width=\"30dp\"\r\n                    android:layout_height=\"15dp\"\r\n                    android:layout_alignParentTop=\"true\"\r\n                    android:layout_alignParentEnd=\"true\"\r\n                    android:layout_marginTop=\"0dp\"\r\n                    android:layout_marginEnd=\"0dp\"\r\n                    android:background=\"@drawable/touch_aria_close\" />\r\n\r\n                <ImageView\r\n                    android:id=\"@+id/close_threshold_iv\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"3dp\"\r\n                    android:layout_alignParentTop=\"true\"\r\n                    android:layout_marginTop=\"6dp\"\r\n                    android:layout_marginEnd=\"10dp\"\r\n                    android:background=\"@color/close_threshold\"\r\n                    tools:ignore=\"ContentDescription\" />\r\n\r\n                <TextView\r\n                    android:id=\"@+id/close_threshold_tv\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"match_parent\"\r\n                    android:layout_alignStart=\"@+id/touch_aria_close\"\r\n                    android:layout_alignEnd=\"@+id/touch_aria_close\"\r\n                    android:layout_alignBottom=\"@+id/touch_aria_close\"\r\n                    android:layout_alignTop=\"@+id/touch_aria_close\"\r\n                    android:layout_marginStart=\"0dp\"\r\n                    android:layout_marginTop=\"0dp\"\r\n                    android:layout_marginEnd=\"0dp\"\r\n                    android:layout_marginBottom=\"0dp\"\r\n                    android:fontFamily=\"@font/font_open_sans\"\r\n                    android:text=\"30\"\r\n                    android:textAlignment=\"center\"\r\n                    android:textColor=\"@color/open_threshold\"\r\n                    android:textSize=\"9sp\"\r\n                    tools:ignore=\"HardcodedText,RtlSymmetry,SmallSp\" />\r\n\r\n                <TextView\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_below=\"@+id/close_threshold_iv\"\r\n                    android:layout_marginEnd=\"0dp\"\r\n                    android:layout_toStartOf=\"@+id/touch_aria_close\"\r\n                    android:fontFamily=\"@font/font_open_sans\"\r\n                    android:paddingStart=\"0dp\"\r\n                    android:text=\"@string/close_threshold\"\r\n                    android:textAlignment=\"viewEnd\"\r\n                    android:textColor=\"@color/cream_white\"\r\n                    android:textSize=\"6sp\"\r\n                    tools:ignore=\"RtlSymmetry,SmallSp\" />\r\n            </RelativeLayout>\r\n        </RelativeLayout>\r\n\r\n        <!-- Bottom Layout -->\r\n        <RelativeLayout\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"330dp\"\r\n            android:layout_below=\"@+id/middle_relative\"\r\n            android:layout_marginTop=\"0dp\">\r\n\r\n            <LinearLayout\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"match_parent\"\r\n                android:orientation=\"vertical\"\r\n                android:weightSum=\"5.5\">\r\n\r\n                <RelativeLayout\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"0dp\"\r\n                    android:layout_weight=\"1\">\r\n\r\n                    <View\r\n                        android:layout_width=\"7.5dp\"\r\n                        android:layout_height=\"400dp\"\r\n                        android:layout_alignParentStart=\"true\"\r\n                        android:layout_alignParentTop=\"true\"\r\n                        android:layout_marginStart=\"0dp\"\r\n                        android:layout_marginTop=\"-10dp\"\r\n                        android:layout_marginBottom=\"0dp\"\r\n                        android:background=\"@drawable/open_border\"\r\n                        tools:ignore=\"ContentDescription\" />\r\n\r\n                    <View\r\n                        android:layout_width=\"7.5dp\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_alignParentTop=\"true\"\r\n                        android:layout_alignParentEnd=\"true\"\r\n                        android:layout_alignParentBottom=\"true\"\r\n                        android:layout_marginTop=\"-10dp\"\r\n                        android:layout_marginEnd=\"0dp\"\r\n                        android:layout_marginBottom=\"-10dp\"\r\n                        android:background=\"@drawable/close_border\"\r\n                        tools:ignore=\"ContentDescription\" />\r\n\r\n                    <ImageView\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"7.5dp\"\r\n                        android:layout_alignParentStart=\"true\"\r\n                        android:layout_alignParentEnd=\"true\"\r\n                        android:layout_alignParentBottom=\"true\"\r\n                        android:layout_marginStart=\"7.5dp\"\r\n                        android:layout_marginEnd=\"16dp\"\r\n                        android:layout_marginBottom=\"0dp\"\r\n                        android:background=\"@color/open_threshold\"\r\n                        tools:ignore=\"ContentDescription\" />\r\n\r\n                    <LinearLayout\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:baselineAligned=\"false\"\r\n                        android:orientation=\"horizontal\"\r\n                        android:paddingLeft=\"16dp\"\r\n                        android:paddingRight=\"16dp\"\r\n                        android:weightSum=\"4\">\r\n\r\n                        <RelativeLayout\r\n                            android:layout_width=\"0dp\"\r\n                            android:layout_height=\"match_parent\"\r\n                            android:layout_weight=\"1\">\r\n\r\n                            <TextView\r\n                                android:id=\"@+id/opening_sensor_sensitivity_tv\"\r\n                                style=\"@style/Text\"\r\n                                android:layout_width=\"wrap_content\"\r\n                                android:layout_height=\"wrap_content\"\r\n                                android:layout_alignParentStart=\"true\"\r\n                                android:layout_alignParentEnd=\"true\"\r\n                                android:layout_centerVertical=\"true\"\r\n                                android:text=\"@string/opening_sensor_sensitivity\"\r\n                                android:textSize=\"9sp\"\r\n                                android:textStyle=\"bold\"\r\n                                tools:ignore=\"SmallSp\" />\r\n                        </RelativeLayout>\r\n\r\n                        <RelativeLayout\r\n                            android:layout_width=\"0dp\"\r\n                            android:layout_height=\"match_parent\"\r\n                            android:layout_weight=\"0.5\">\r\n\r\n                            <TextView\r\n                                android:id=\"@+id/correlator_noise_threshold_1_tv\"\r\n                                style=\"@style/Text\"\r\n                                android:layout_width=\"wrap_content\"\r\n                                android:layout_height=\"wrap_content\"\r\n                                android:layout_centerHorizontal=\"true\"\r\n                                android:layout_centerVertical=\"true\"\r\n                                android:text=\"0\"\r\n                                android:textStyle=\"bold\"\r\n                                tools:ignore=\"HardcodedText\" />\r\n                        </RelativeLayout>\r\n\r\n                        <RelativeLayout\r\n                            android:layout_width=\"0dp\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:layout_weight=\"2.5\">\r\n\r\n                            <androidx.appcompat.widget.AppCompatSeekBar\r\n                                android:id=\"@+id/correlator_noise_threshold_1_sb\"\r\n                                android:layout_width=\"match_parent\"\r\n                                android:layout_height=\"match_parent\"\r\n                                android:max=\"255\"\r\n                                android:paddingStart=\"16dp\"\r\n                                android:paddingEnd=\"0dp\"\r\n                                android:progress=\"0\"\r\n                                android:progressDrawable=\"@drawable/track_le\"\r\n                                android:thumb=\"@drawable/thumb_le\" />\r\n                        </RelativeLayout>\r\n                    </LinearLayout>\r\n                </RelativeLayout>\r\n\r\n                <RelativeLayout\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"0dp\"\r\n                    android:layout_weight=\"1\">\r\n\r\n                    <View\r\n                        android:layout_width=\"7.5dp\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_alignParentTop=\"true\"\r\n                        android:layout_alignParentEnd=\"true\"\r\n                        android:layout_alignParentBottom=\"true\"\r\n                        android:layout_marginTop=\"-10dp\"\r\n                        android:layout_marginEnd=\"0dp\"\r\n                        android:layout_marginBottom=\"0dp\"\r\n                        android:background=\"@drawable/close_border\"\r\n                        tools:ignore=\"ContentDescription\" />\r\n\r\n                    <ImageView\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"7.5dp\"\r\n                        android:layout_alignParentStart=\"true\"\r\n                        android:layout_alignParentEnd=\"true\"\r\n                        android:layout_alignParentBottom=\"true\"\r\n                        android:layout_marginStart=\"16dp\"\r\n                        android:layout_marginEnd=\"7.5dp\"\r\n                        android:layout_marginBottom=\"0dp\"\r\n                        android:background=\"@color/close_threshold\"\r\n                        tools:ignore=\"ContentDescription\" />\r\n\r\n                    <LinearLayout\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:baselineAligned=\"false\"\r\n                        android:orientation=\"horizontal\"\r\n                        android:paddingLeft=\"16dp\"\r\n                        android:paddingRight=\"16dp\"\r\n                        android:weightSum=\"4\">\r\n\r\n                        <RelativeLayout\r\n                            android:layout_width=\"0dp\"\r\n                            android:layout_height=\"match_parent\"\r\n                            android:layout_weight=\"1\">\r\n\r\n                            <TextView\r\n                                android:id=\"@+id/closing_sensor_sensitivity_tv\"\r\n                                style=\"@style/Text\"\r\n                                android:layout_width=\"wrap_content\"\r\n                                android:layout_height=\"wrap_content\"\r\n                                android:layout_alignParentStart=\"true\"\r\n                                android:layout_alignParentEnd=\"true\"\r\n                                android:layout_centerVertical=\"true\"\r\n                                android:text=\"@string/closing_sensor_sensitivity\"\r\n                                android:textSize=\"9sp\"\r\n                                android:textStyle=\"bold\"\r\n                                tools:ignore=\"SmallSp\" />\r\n                        </RelativeLayout>\r\n\r\n                        <RelativeLayout\r\n                            android:layout_width=\"0dp\"\r\n                            android:layout_height=\"match_parent\"\r\n                            android:layout_weight=\"0.5\">\r\n\r\n                            <TextView\r\n                                android:id=\"@+id/correlator_noise_threshold_2_tv\"\r\n                                style=\"@style/Text\"\r\n                                android:layout_width=\"wrap_content\"\r\n                                android:layout_height=\"wrap_content\"\r\n                                android:layout_centerHorizontal=\"true\"\r\n                                android:layout_centerVertical=\"true\"\r\n                                android:text=\"0\"\r\n                                android:textStyle=\"bold\"\r\n                                tools:ignore=\"HardcodedText\" />\r\n                        </RelativeLayout>\r\n\r\n                        <RelativeLayout\r\n                            android:layout_width=\"0dp\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:layout_weight=\"2.5\">\r\n\r\n                            <androidx.appcompat.widget.AppCompatSeekBar\r\n                                android:id=\"@+id/correlator_noise_threshold_2_sb\"\r\n                                android:layout_width=\"match_parent\"\r\n                                android:layout_height=\"match_parent\"\r\n                                android:max=\"255\"\r\n                                android:paddingStart=\"16dp\"\r\n                                android:paddingEnd=\"0dp\"\r\n                                android:progress=\"0\"\r\n                                android:progressDrawable=\"@drawable/track_le\"\r\n                                android:thumb=\"@drawable/thumb_le\" />\r\n                        </RelativeLayout>\r\n                    </LinearLayout>\r\n                </RelativeLayout>\r\n\r\n                <RelativeLayout\r\n                    android:id=\"@+id/swap_sensors_rl\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"0dp\"\r\n                    android:layout_weight=\"1\">\r\n\r\n                    <LinearLayout\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:orientation=\"horizontal\"\r\n                        android:paddingLeft=\"16dp\"\r\n                        android:paddingRight=\"16dp\"\r\n                        android:weightSum=\"4\"\r\n                        tools:ignore=\"DisableBaselineAlignment\">\r\n\r\n                        <RelativeLayout\r\n                            android:layout_width=\"0dp\"\r\n                            android:layout_height=\"match_parent\"\r\n                            android:layout_weight=\"2\">\r\n\r\n                            <TextView\r\n                                android:id=\"@+id/swap_sensors_text_tv\"\r\n                                style=\"@style/Text\"\r\n                                android:layout_width=\"wrap_content\"\r\n                                android:layout_height=\"wrap_content\"\r\n                                android:layout_alignParentStart=\"true\"\r\n                                android:layout_centerVertical=\"true\"\r\n                                android:text=\"@string/swap_sensors\"\r\n                                android:textStyle=\"bold\" />\r\n                        </RelativeLayout>\r\n\r\n                        <RelativeLayout\r\n                            android:layout_width=\"0dp\"\r\n                            android:layout_height=\"match_parent\"\r\n                            android:layout_weight=\"0.5\">\r\n\r\n                            <TextView\r\n                                android:id=\"@+id/swap_sensors_tv\"\r\n                                style=\"@style/Text\"\r\n                                android:layout_width=\"wrap_content\"\r\n                                android:layout_height=\"wrap_content\"\r\n                                android:layout_centerHorizontal=\"true\"\r\n                                android:layout_centerVertical=\"true\"\r\n                                android:text=\"0\"\r\n                                android:textStyle=\"bold\"\r\n                                tools:ignore=\"HardcodedText\" />\r\n                        </RelativeLayout>\r\n\r\n                        <RelativeLayout\r\n                            android:layout_width=\"0dp\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:layout_weight=\"1.5\">\r\n\r\n                            <Switch\r\n                                android:id=\"@+id/swap_sensors_sw\"\r\n                                android:layout_width=\"wrap_content\"\r\n                                android:layout_height=\"match_parent\"\r\n                                android:layout_alignParentStart=\"true\"\r\n                                android:layout_alignParentEnd=\"true\"\r\n                                android:layout_marginEnd=\"0dp\"\r\n                                android:ellipsize=\"middle\"\r\n                                android:paddingStart=\"16dp\"\r\n                                android:scrollbarSize=\"48dp\"\r\n                                android:thumb=\"@drawable/switch_le_thumb\"\r\n                                android:track=\"@drawable/switch_le_truck\"\r\n                                tools:ignore=\"RtlSymmetry,UseSwitchCompatOrMaterialXml\" />\r\n                        </RelativeLayout>\r\n                    </LinearLayout>\r\n                </RelativeLayout>\r\n\r\n                <RelativeLayout\r\n                    android:id=\"@+id/thresholds_blocking_rl\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"0dp\"\r\n                    android:layout_weight=\"1\">\r\n\r\n                    <LinearLayout\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:orientation=\"horizontal\"\r\n                        android:paddingLeft=\"16dp\"\r\n                        android:paddingRight=\"16dp\"\r\n                        android:weightSum=\"4\"\r\n                        tools:ignore=\"DisableBaselineAlignment\">\r\n\r\n                        <RelativeLayout\r\n                            android:layout_width=\"0dp\"\r\n                            android:layout_height=\"match_parent\"\r\n                            android:layout_weight=\"2\">\r\n\r\n                            <TextView\r\n                                android:id=\"@+id/settings_blocking_tv\"\r\n                                style=\"@style/Text\"\r\n                                android:layout_width=\"wrap_content\"\r\n                                android:layout_height=\"wrap_content\"\r\n                                android:layout_alignParentStart=\"true\"\r\n                                android:layout_centerVertical=\"true\"\r\n                                android:text=\"@string/settings_blocking\"\r\n                                android:textStyle=\"bold\" />\r\n                        </RelativeLayout>\r\n\r\n                        <RelativeLayout\r\n                            android:layout_width=\"0dp\"\r\n                            android:layout_height=\"match_parent\"\r\n                            android:layout_weight=\"0.5\">\r\n\r\n                            <TextView\r\n                                android:id=\"@+id/thresholds_blocking_tv\"\r\n                                style=\"@style/Text\"\r\n                                android:layout_width=\"wrap_content\"\r\n                                android:layout_height=\"wrap_content\"\r\n                                android:layout_centerHorizontal=\"true\"\r\n                                android:layout_centerVertical=\"true\"\r\n                                android:text=\"@string/off\"\r\n                                android:textStyle=\"bold\" />\r\n                        </RelativeLayout>\r\n\r\n                        <RelativeLayout\r\n                            android:layout_width=\"0dp\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:layout_weight=\"1.5\">\r\n\r\n                            <Switch\r\n                                android:id=\"@+id/thresholds_blocking_sw\"\r\n                                android:layout_width=\"wrap_content\"\r\n                                android:layout_height=\"match_parent\"\r\n                                android:layout_alignParentStart=\"true\"\r\n                                android:layout_alignParentEnd=\"true\"\r\n                                android:layout_marginEnd=\"0dp\"\r\n                                android:ellipsize=\"middle\"\r\n                                android:paddingStart=\"16dp\"\r\n                                android:scrollbarSize=\"48dp\"\r\n                                android:thumb=\"@drawable/switch_le_thumb\"\r\n                                android:track=\"@drawable/switch_le_truck\"\r\n                                tools:ignore=\"RtlSymmetry,UseSwitchCompatOrMaterialXml\" />\r\n                        </RelativeLayout>\r\n                    </LinearLayout>\r\n                </RelativeLayout>\r\n\r\n                <RelativeLayout\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"0dp\"\r\n                    android:layout_weight=\"1.5\">\r\n\r\n                    <LinearLayout\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:orientation=\"horizontal\"\r\n                        android:paddingLeft=\"16dp\"\r\n                        android:paddingRight=\"16dp\"\r\n                        android:weightSum=\"2\"\r\n                        tools:ignore=\"DisableBaselineAlignment\">\r\n\r\n                        <RelativeLayout\r\n                            android:layout_width=\"0dp\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:layout_weight=\"1\">\r\n\r\n                            <Button\r\n                                android:id=\"@+id/open_btn\"\r\n                                style=\"@style/Text\"\r\n                                android:layout_width=\"match_parent\"\r\n                                android:layout_height=\"42dp\"\r\n                                android:layout_marginTop=\"16dp\"\r\n                                android:layout_marginEnd=\"8dp\"\r\n                                android:background=\"@drawable/custom_button_le\"\r\n                                android:text=\"@string/open_btn\"\r\n                                android:visibility=\"visible\" />\r\n                        </RelativeLayout>\r\n\r\n                        <RelativeLayout\r\n                            android:layout_width=\"0dp\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:layout_weight=\"1\">\r\n\r\n                            <Button\r\n                                android:id=\"@+id/close_btn\"\r\n                                style=\"@style/Text\"\r\n                                android:layout_width=\"match_parent\"\r\n                                android:layout_height=\"42dp\"\r\n                                android:layout_marginStart=\"8dp\"\r\n                                android:layout_marginTop=\"16dp\"\r\n                                android:background=\"@drawable/custom_button_le\"\r\n                                android:text=\"@string/close_btn\"\r\n                                android:visibility=\"visible\" />\r\n                        </RelativeLayout>\r\n                    </LinearLayout>\r\n                </RelativeLayout>\r\n            </LinearLayout>\r\n        </RelativeLayout>\r\n    </RelativeLayout>\r\n</RelativeLayout>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/layout_chart.xml	(revision 5cac9875d963fb7b862372491e876bbe9ad2f790)
+++ app/src/main/res/layout/layout_chart.xml	(date 1638965253924)
@@ -85,6 +85,28 @@
                 android:textSize="10sp"
                 tools:ignore="HardcodedText,RtlHardcoded,SmallSp" />
 
+            <TextView
+                android:id="@+id/sync_tv"
+                style="@style/Text"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_alignParentTop="true"
+                android:layout_alignParentEnd="true"
+                android:layout_marginTop="4dp"
+                android:layout_marginEnd="16dp"
+                android:text="@string/sync"
+                android:textSize="10sp"
+                tools:ignore="HardcodedText,RtlHardcoded,SmallSp" />
+
+            <SeekBar
+                android:id="@+id/start_sync_sb"
+                android:layout_height="0dp"
+                android:layout_width="0dp"
+                android:max="100"
+                android:progress="0"
+                android:progressDrawable="@drawable/track_invisible"
+                android:thumb="@drawable/thumb_invisible" />
+
             <LinearLayout
                 android:layout_width="wrap_content"
                 android:layout_height="match_parent"
Index: app/src/main/java/me/start/motorica/new_electronic_by_Rodeon/ble/SampleGattAttributes.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\npackage me.start.motorica.new_electronic_by_Rodeon.ble;\r\n\r\nimport java.util.HashMap;\r\n\r\n/**\r\n * This class includes a small subset of standard GATT attributes for demonstration purposes.\r\n */\r\npublic class SampleGattAttributes {\r\n    private static final HashMap<String, String> attributes = new HashMap<>();\r\n    // Sample Characteristics.\r\n    public static String MIO_MEASUREMENT = \"00002a37-0000-1000-8000-00805f9b34fb\";\r\n    public static String SET_ADC_CURRENT_TRESHOLD_HDLE = \"0000fe41-8e22-4541-9d4c-21edae82ed19\";\r\n    public static String SHUTDOWN_CURRENT_HDLE = \"0000fe42-8e22-4541-9d4c-21edae82ed19\";\r\n    public static String START_UP_STEP_HDLE = \"0000fe43-8e22-4541-9d4c-21edae82ed19\";\r\n    public static String START_UP_TIME_HDLE = \"0000fe44-8e22-4541-9d4c-21edae82ed19\";\r\n    public static String DEAD_ZONE_HDLE = \"0000fe45-8e22-4541-9d4c-21edae82ed19\";\r\n    public static String OPEN_THRESHOLD_HDLE = \"0000fe46-8e22-4541-9d4c-21edae82ed19\";\r\n    public static String CLOSE_THRESHOLD_HDLE = \"0000fe47-8e22-4541-9d4c-21edae82ed19\";\r\n    public static String OPEN_MOTOR_HDLE = \"0000fe48-8e22-4541-9d4c-21edae82ed19\";\r\n    public static String CLOSE_MOTOR_HDLE = \"0000fe49-8e22-4541-9d4c-21edae82ed19\";\r\n    public static String SENSITIVITY_HDLE = \"0000fe4a-8e22-4541-9d4c-21edae82ed19\";\r\n//    public static String BRAKE_MOTOR_TIME_HDLE = \"0000fe4b-8e22-4541-9d4c-21edae82ed19\";\r\n//    public static String BRAKE_MOTOR_HDLE = \"0000fe4c-8e22-4541-9d4c-21edae82ed19\";\r\n    public static String SENS_OPTIONS = \"0000fe4d-8e22-4541-9d4c-21edae82ed19\";\r\n    public static String ADD_GESTURE = \"0000fe4e-8e22-4541-9d4c-21edae82ed19\";\r\n    public static String SET_GESTURE = \"0000fe4f-8e22-4541-9d4c-21edae82ed19\";\r\n    public static String SET_REVERSE = \"0000fe50-8e22-4541-9d4c-21edae82ed19\";\r\n    public static String RESET_TO_FACTORY_SETTINGS = \"0000fe51-8e22-4541-9d4c-21edae82ed19\";\r\n    public static String SET_ONE_CHANNEL = \"0000fe52-8e22-4541-9d4c-21edae82ed19\";\r\n    public static String SET_START_UPDATE = \"0000fe53-8e22-4541-9d4c-21edae82ed19\";\r\n    public static String SET_CHANGE_GESTURE = \"0000fe54-8e22-4541-9d4c-21edae82ed19\";\r\n    public static String CLIENT_CHARACTERISTIC_CONFIG = \"00002902-0000-1000-8000-00805f9b34fb\";\r\n//    public static String MY_TEST_MEASUREMENT = \"00002a00-0000-1000-8000-00805f9b34fb\";\r\n    public static String FESTO_A_CHARACTERISTIC = \"0000ffe1-0000-1000-8000-00805f9b34fb\";\r\n\r\n//      характеристики переработанного стека\r\n    public static String OPEN_THRESHOLD_NEW = \"43686172-4d74-726b-0000-526f64696f6e\"; //(без блокировки у Родиона)\r\n    public static String CLOSE_THRESHOLD_NEW = \"43686172-4d74-726b-0001-526f64696f6e\";\r\n    public static String OPEN_MOTOR_NEW = \"43686172-4d74-726b-0002-526f64696f6e\";\r\n    public static String CLOSE_MOTOR_NEW = \"43686172-4d74-726b-0003-526f64696f6e\";\r\n    public static String ADD_GESTURE_NEW = \"43686172-4d74-726b-0004-526f64696f6e\";\r\n    public static String SET_GESTURE_NEW = \"43686172-4d74-726b-0005-526f64696f6e\"; // (с блокировкой у Родиона)\r\n    public static String SET_REVERSE_NEW = \"43686172-4d74-726b-0006-526f64696f6e\";\r\n    public static String SET_ONE_CHANNEL_NEW = \"43686172-4d74-726b-0007-526f64696f6e\";\r\n    public static String CALIBRATION_NEW = \"43686172-4d74-726b-0008-526f64696f6e\";// Чтение 0 - не калиброван, 1 - идет калибровка, 2 - одного из моторов нет, 3 - одного из энкодеров нет , 4 - один из моторов прокручивается, 5 - перетянуты винты, 6 - откалиброван  Запись 0 начинает калибровку левой кисти, 1 правой\r\n    public static String STATUS_CALIBRATION_NEW = \"43686172-4d74-726b-0009-526f64696f6e\";// 6 байт по состоянию на каждый палец ( 0 - не калиброван, 1 - идет калибровка, 2 - мотора нет, 3 - энкодера нет , 4 - мотор прокручивается, 5 - перетянут винт, 6 - откалиброван )\r\n    public static String MOVE_ALL_FINGERS_NEW = \"43686172-4d74-726b-000a-526f64696f6e\";// 6 байт по положению на каждый палец\r\n    public static String CHANGE_GESTURE_NEW = \"43686172-4d74-726b-000b-526f64696f6e\";// 13 байт по положению на каждый палец на каждое положение + 1 байт номера жеста\r\n    public static String SHUTDOWN_CURRENT_NEW = \"43686172-4d74-726b-000c-526f64696f6e\";// 6 байт по отсечке на каждый палец\r\n\r\n    public static String RESET_TO_FACTORY_SETTINGS_NEW = \"43686172-4d74-726b-0100-526f64696f6e\";\r\n\r\n    public static String SENS_OPTIONS_NEW = \"43686172-4d74-726b-0200-526f64696f6e\";//\"43686172-4d74-726b-0002-526f64696f6e\";\r\n    public static String MIO_MEASUREMENT_NEW = \"43686172-4d74-726b-0201-526f64696f6e\";\r\n    public static String SENS_VERSION_NEW = \"43686172-4d74-726b-0202-526f64696f6e\";\r\n    public static String SENS_ENABLED_NEW = \"43686172-4d74-726b-0203-526f64696f6e\"; // 0-управление от датчиков отключео 1-управление от датчиков включено\r\n\r\n    public static String TELEMETRY_NUMBER_NEW = \"43686172-4d74-726b-0300-526f64696f6e\"; // 16 байт инфа о номере для телеметрии\\\r\n\r\n\r\n\r\n\r\n    // Sample Commands.\r\n    public static String READ = \"READ\";\r\n    public static String WRITE = \"WRITE\";\r\n    public static String WRITE_WR = \"WRITE_WR\";\r\n    public static String NOTIFY = \"NOTIFY\";\r\n\r\n    static {\r\n        // Sample Services.\r\n        attributes.put(\"0000180d-0000-1000-8000-00805f9b34fb\", \"Heart Rate Service\");\r\n        attributes.put(\"0000180a-0000-1000-8000-00805f9b34fb\", \"Device Information Service\");\r\n        attributes.put(\"00001810-0000-1000-8000-00805f9b34fb\", \"Что-то моё\");\r\n        attributes.put(\"0000fe40-cc7a-482a-984a-7f2ed5b3e58f\", \"Наша кастомная характеристика\");\r\n        // Sample Characteristics.\r\n        attributes.put(MIO_MEASUREMENT, \"MIO Measurement\");\r\n        attributes.put(\"00002a29-0000-1000-8000-00805f9b34fb\", \"Manufacturer Name String\");\r\n\r\n        attributes.put(SET_ADC_CURRENT_TRESHOLD_HDLE, \"Set ADC Current Treshold Hdle\");\r\n        attributes.put(SHUTDOWN_CURRENT_HDLE, \"Shutdown Current Hdle\");\r\n        attributes.put(START_UP_STEP_HDLE, \"Start Up Step Hdle\");\r\n        attributes.put(START_UP_TIME_HDLE, \"Start Up Time Hdle\");\r\n        attributes.put(DEAD_ZONE_HDLE, \"Dead Zone Hdle\");\r\n        attributes.put(OPEN_THRESHOLD_HDLE, \"Open Threshold Hdle\");\r\n        attributes.put(CLOSE_THRESHOLD_HDLE, \"Close Threshold Hdle\");\r\n        attributes.put(OPEN_MOTOR_HDLE, \"Motor Open Hdle\");\r\n        attributes.put(CLOSE_MOTOR_HDLE, \"Motor Close Hdle\");\r\n        attributes.put(SENSITIVITY_HDLE, \"Sensitivity Hdle\");\r\n    }\r\n\r\n    public static String lookup(String uuid, String defaultName) {\r\n        String name = attributes.get(uuid);\r\n        return name == null ? defaultName : name;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/me/start/motorica/new_electronic_by_Rodeon/ble/SampleGattAttributes.java	(revision 5cac9875d963fb7b862372491e876bbe9ad2f790)
+++ app/src/main/java/me/start/motorica/new_electronic_by_Rodeon/ble/SampleGattAttributes.java	(date 1638961656969)
@@ -46,7 +46,7 @@
 //    public static String MY_TEST_MEASUREMENT = "00002a00-0000-1000-8000-00805f9b34fb";
     public static String FESTO_A_CHARACTERISTIC = "0000ffe1-0000-1000-8000-00805f9b34fb";
 
-//      характеристики переработанного стека
+//    характеристики переработанного стека
     public static String OPEN_THRESHOLD_NEW = "43686172-4d74-726b-0000-526f64696f6e"; //(без блокировки у Родиона)
     public static String CLOSE_THRESHOLD_NEW = "43686172-4d74-726b-0001-526f64696f6e";
     public static String OPEN_MOTOR_NEW = "43686172-4d74-726b-0002-526f64696f6e";
Index: app/src/main/res/values-ru/strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><resources>\r\n    <string name=\"app_name\">Моторика старт</string>\r\n    <string name=\"helloWorld\">открыть</string>\r\n    <string name=\"helloWorld2\">закрыть</string>\r\n    <string name=\"helloWorld3\">стоп</string>\r\n    <string name=\"gesture1\">жест 1</string>\r\n    <string name=\"gesture2\">жест 2</string>\r\n    <string name=\"gesture3\">жест 3</string>\r\n    <string name=\"off_update\">отключение графиков</string>\r\n    <string name=\"on_update\">включение графиков</string>\r\n    <string name=\"gesture4\">parting position</string>\r\n\r\n    <string name=\"scan_again\">сканировать снова</string>\r\n    <string name=\"activity_scan_paired_text\">Связанные устройства:</string>\r\n\r\n    <string name=\"bluetooth_scanning\">сканирование…</string>\r\n    <string name=\"bluetooth_scan_finished\">сканирование завершено.</string>\r\n    <string name=\"bluetooth_pairing\">соединение…</string>\r\n    <string name=\"bluetooth_paired\">Девайс соединён.</string>\r\n    <string name=\"bluetooth_unpaired\">Девайс отсоединён.</string>\r\n    <string name=\"bluetooth_connected\">Девайс подключён.</string>\r\n    <string name=\"bluetooth_connecting\">подключение…</string>\r\n    <string name=\"bluetooth_disconnected\">Девайс не подключён.</string>\r\n    <string name=\"bluetooth_connect_in_3sec\">Подключиться не удалось…</string>\r\n    <string name=\"bluetooth_turning_on\">Bluetooth выключен…</string>\r\n    <string name=\"title_home\">Жесты</string>\r\n    <string name=\"title_dashboard\">Датчики</string>\r\n    <string name=\"valueCH1\">TextView</string>\r\n    <string name=\"ch1\">CH1:</string>\r\n    <string name=\"_100\">100</string>\r\n    <string name=\"ch1_on\">CH1 on:</string>\r\n    <string name=\"ch1_off\">CH1 off:</string>\r\n    <string name=\"mv\">mV</string>\r\n    <string name=\"mv2\">mV</string>\r\n    <string name=\"mv3\">mV</string>\r\n    <string name=\"_1250\">1250</string>\r\n    <string name=\"_2500\">2500</string>\r\n    <string name=\"state_view\">lolol</string>\r\n    <string name=\"title_activity_gripper_settings\">Настройки схвата</string>\r\n    <string name=\"action_Trigger0\">сервисное меню</string>//service menu\r\n    <string name=\"action_Trigger1\">классический</string>//classic\r\n    <string name=\"action_Trigger2\">триггерный</string>//trigger mode\r\n    <string name=\"action_Trigger3\">триггерный инвертированный</string>//invert trigger mode\r\n    <string name=\"action_Trigger4\" />//first lock mode\r\n    <string name=\"action_Trigger5\" />//second lock mode\r\n    <string name=\"action_Trigger6\" />//first invert lock mode\r\n    <string name=\"action_Trigger7\" />//second invert lock mode\r\n    <string name=\"action_Trigger8\">классический инвертированный</string>classic inverted\r\n    <string name=\"appbar_scrolling_view_behavior\" translatable=\"false\">com.google.android.material.appbar.AppBarLayout$ScrollingViewBehavior</string>\r\n    <string name=\"lesson_eight_error_could_not_create_vbo\">Could not create vertex buffer object: %s</string>\r\n    <string name=\"lesson_eight_error_unknown\">Unknown error: %s</string>\r\n    <string name=\"hello_blank_fragment\">Hello blank fragment</string>\r\n    <string name=\"illumination\">Подсветка</string>\r\n    <string name=\"closing\">закрытие</string>\r\n    <string name=\"opening\">окрытие</string>\r\n    <string name=\"battery_power\">Заряд батареи:</string>\r\n    <string name=\"compressive_force\">Сила схвата</string>\r\n    <string name=\"blocking\">блокировка</string>\r\n    <string name=\"roughness_of_sensors\">Грубость датчиков</string>\r\n    <string name=\"I_real\">I реал:</string>\r\n    <string name=\"I_max\">I макс:</string>\r\n    <string name=\"mA\">мА</string>\r\n    <string name=\"inverting\">Инвертирование</string>\r\n    <string name=\"internal_ADC\">Внутринний АЦП</string>\r\n    <string name=\"save\">сохранить</string>\r\n    <string name=\"single_channel_by_sensor_1\">одноканальный по датчику 1</string>\r\n    <string name=\"single_channel_by_sensor_2\">одноканальный по датчику 2</string>\r\n    <string name=\"advanced_settings\">Расширенные настройки</string>\r\n    <string name=\"ok\">ОК</string>\r\n    <string name=\"cancel\">отмена</string>\r\n    <string name=\"password\">пароль</string>\r\n    <string name=\"calibration\">Калибровка:</string>\r\n    <string name=\"number_of_channel\">Номер канала:</string>\r\n    <string name=\"speed\">Скорость</string>\r\n    <string name=\"angle\">Угол</string>\r\n    <string name=\"input_address\">Введите адрес</string>\r\n    <string name=\"input_temp\">Введите значение</string>\r\n    <string name=\"current_control_data\">Данные контроля тока</string>\r\n    <string name=\"set\">записать</string>\r\n    <string name=\"open\">открыть</string>\r\n    <string name=\"stop\">стоп</string>\r\n    <string name=\"close\">закрыть</string>\r\n    <string name=\"current_control_timeout\">Таймаут контроля тока</string>\r\n    <string name=\"x100_ms\">x100 мс</string>\r\n    <string name=\"current_control\">Контроль тока</string>\r\n    <string name=\"currents\">ток</string>\r\n    <string name=\"ete_calib\">EtE   калибровка</string>\r\n    <string name=\"eeprom_save\">EEPROM сохранение</string>\r\n    <string name=\"angle_fix\">фиксация угла</string>\r\n    <string name=\"input_open_angle\">Введите угол открытия</string>\r\n    <string name=\"input_close_angle\">Введите угол закрытия</string>\r\n    <string name=\"input_wide_angle\">Введите ширину угола</string>\r\n    <string name=\"magnet_invert\">Инверсия магнита</string>\r\n    <string name=\"revers_motor\">Реверс мотора</string>\r\n    <string name=\"zero_crossing\">Пересечение нуля</string>\r\n    <string name=\"speed_with_space\">скорость:</string>\r\n    <string name=\"use_gesture\">Использовать жест</string>\r\n    <string name=\"leave\">Выйти?</string>\r\n    <string name=\"no\">нет</string>\r\n    <string name=\"not_the_right_password\">пароль не верный</string>\r\n    <string name=\"select_channel\">\"Выбран канал \"</string>\r\n    <string name=\"admission_of_inquiry_of_updating\">пропуск команды обновления</string>\r\n    <string name=\"gesture_1\">Жест №1</string>\r\n    <string name=\"gesture_2\">Жест №2</string>\r\n    <string name=\"gesture_3\">Жест №3</string>\r\n    <string name=\"gesture_4\">Жест №4</string>\r\n    <string name=\"gesture_5\">Жест №5</string>\r\n    <string name=\"gesture_6\">Жест №6</string>\r\n    <string name=\"gesture_7\">Жест №7</string>\r\n    <string name=\"gesture_8\">Жест №8</string>\r\n    <string name=\"click_to_edit_start_and_end_states\">Нажмите для редактирования начального и конечного состояний</string>\r\n    <string name=\"control_of_an_open_state\">Настройка открытого сотояния</string>\r\n    <string name=\"control_of_the_closed_state\">Настройка закрытого соcтояния</string>\r\n    <string name=\"allows_you_to_set_the_position_of_the_maximum_open_state\">Позволяет настоить положение максимально открытого состояния</string>\r\n    <string name=\"allows_you_to_set_the_position_of_the_maximum_closed_state\">Позволяет настоить положение максимально закрытого состояния</string>\r\n    <string name=\"connection_is_absent\">Подключение отсутствует</string>\r\n    <string name=\"off_schedules\">включение графиков</string>\r\n    <string name=\"on_schedules\">отключение графиков</string>\r\n    <string name=\"magic_checkbox\">Магические чекбоксы</string>\r\n    <string name=\"speed_increment\">инкремент скорости</string>\r\n    <string name=\"disable_angel_control\">выключение контроля угла</string>\r\n    <string name=\"gesture_1_btn\">жест №1</string>\r\n    <string name=\"gesture_2_btn\">жест №2</string>\r\n    <string name=\"gesture_3_btn\">жест №3</string>\r\n    <string name=\"gesture_4_btn\">жест №4</string>\r\n    <string name=\"gesture_5_btn\">жест №5</string>\r\n    <string name=\"gesture_6_btn\">жест №6</string>\r\n    <string name=\"gesture_7_btn\">жест №7</string>\r\n    <string name=\"gesture_8_btn\">жест №8</string>\r\n    <string name=\"test\">тест</string>\r\n    <string name=\"setting_up_gestures\">настройки жестов</string>\r\n    <string name=\"sensor_settings\">настройки датчиков</string>\r\n    <string name=\"special_settings\">спецнастройки</string>\r\n    <string name=\"driver_0_00v\">драйвер: 0.00v</string>\r\n    <string name=\"driver\">\"драйвер: \"</string>\r\n    <string name=\"bms_0_00v\">бмс: 0.00v</string>\r\n    <string name=\"bms\">\"бмс: \"</string>\r\n    <string name=\"sens_0_00v\">сенсоры: 0.00v</string>\r\n    <string name=\"sens\">\"сенсоры: \"</string>\r\n    <string name=\"open_threshold\">порог открытия</string>\r\n    <string name=\"close_threshold\">порог закрытия</string>\r\n    <string name=\"opening_sensor_sensitivity\">чувствительность датчика открытия</string>\r\n    <string name=\"closing_sensor_sensitivity\">чувствительность датчика закрытия</string>\r\n    <string name=\"settings_blocking\">блокировка настроек</string>\r\n    <string name=\"close_btn\">закрыть</string>\r\n    <string name=\"open_btn\">открыть</string>\r\n    <string name=\"swap_sensors\">поменять сенсоры</string>\r\n    <string name=\"swap_button_open_close\">поменять кнопки открыть/закрыть</string>\r\n    <string name=\"single_channel_control\">одноканальное управление</string>\r\n    <string name=\"reset_to_factory_settings\">востановить к заводским настройкам</string>\r\n    <string name=\"off\">нет</string>\r\n    <string name=\"on\">да</string>\r\n    <string name=\"shutdown_current\">ток отсечки</string>\r\n    <string name=\"rotation_thumb\">ротация</string>\r\n    <string name=\"thumb\">большой палец</string>\r\n    <string name=\"forefinger\">указательный палец</string>\r\n    <string name=\"middle_finger\">средний палец</string>\r\n    <string name=\"ring_finger\">безымянный палец</string>\r\n    <string name=\"little_finger\">мизинец</string>\r\n    <string name=\"open_state\">открытое</string>\r\n    <string name=\"close_state\">закрытое</string>\r\n    <string name=\"cancel_gripper_settings\">отмена</string>\r\n    <string name=\"save_gripper_settings\">сохранить</string>\r\n    <string name=\"gesture\">Жест</string>\r\n    <string name=\"hand_side\">сторона руки</string>\r\n    <string name=\"left\">левая</string>\r\n    <string name=\"right\">правая</string>\r\n    <string name=\"prosthesis_update_ready_for_installation\">Обновление протеза</string>\r\n    <string name=\"do_you_want_to_start_updating\">Доступна новая версия программного обеспечения протеза. Вы хотите установить обновлённую прошивку сейчас?</string>\r\n    <string name=\"updating_0\">обновление…  </string>\r\n    <string name=\"gesture_switching_by_sensors\">переключение жеста сенсорами</string>\r\n    <string name=\"switching_mode\">режим переключения</string>\r\n    <string name=\"time_between_peaks\">время между пиками</string>\r\n    <string name=\"peak_time\">время пиков</string>\r\n    <string name=\"gesture_state\">Состояние жеста:</string>\r\n    <string name=\"finger_position\">Ротация:</string>\r\n    <string name=\"gps_network_not_enabled\">Включённая геолокация необходима чтобы найти ваш протез в эфире.</string>\r\n    <string name=\"open_location_settings\">включить геолокацию</string>\r\n    <string name=\"we_need_these_permissions\">Для корректной работы необходимо разрешение на использование блютуз и геолокации…</string>\r\n    <string name=\"rotation_state_open\">наружу</string>\r\n    <string name=\"rotation_state_close\">внутрь</string>\r\n    <string name=\"gesture_state_open\">открытое</string>\r\n    <string name=\"gesture_state_close\">закрытое</string>\r\n    <string name=\"prosthesis_calibrating\">Калибровка протеза</string>\r\n    <string name=\"waiting\">ожидайте…</string>\r\n    <string name=\"get\">считать</string>\r\n    <string name=\"telemetry_serial\">серийник для телеметрии</string>\r\n    <string name=\"shutdown_current_1\">ток отсечки 1</string>\r\n    <string name=\"shutdown_current_2\">ток отсечки 2</string>\r\n    <string name=\"shutdown_current_3\">ток отсечки 3</string>\r\n    <string name=\"shutdown_current_4\">ток отсечки 4</string>\r\n    <string name=\"shutdown_current_5\">ток отсечки 5</string>\r\n    <string name=\"shutdown_current_6\">ток отсечки 6</string>\r\n    <string name=\"start_calibration\">начать калибровку</string>\r\n    <string name=\"not_calibrated_message\">Для того чтобы его откалибровать перейдите в расширенные настройки.</string>\r\n    <string name=\"not_calibrated\">Протез не откалиброван</string>\r\n    <string name=\"calibration_status\">статус калибровки</string>\r\n\r\n\r\n    <string-array name=\"numbers\">\r\n        <item>0</item>\r\n        <item>1</item>\r\n        <item>2</item>\r\n        <item>3</item>\r\n        <item>4</item>\r\n        <item>5</item>\r\n        <item>6</item>\r\n        <item>255</item>\r\n    </string-array>\r\n</resources>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/values-ru/strings.xml	(revision 5cac9875d963fb7b862372491e876bbe9ad2f790)
+++ app/src/main/res/values-ru/strings.xml	(date 1638964612041)
@@ -195,6 +195,7 @@
     <string name="not_calibrated_message">Для того чтобы его откалибровать перейдите в расширенные настройки.</string>
     <string name="not_calibrated">Протез не откалиброван</string>
     <string name="calibration_status">статус калибровки</string>
+    <string name="sync">синхронизация: </string>
 
 
     <string-array name="numbers">
Index: app/src/main/res/values/strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><resources xmlns:tools=\"http://schemas.android.com/tools\">\r\n    <string name=\"app_name\">Motorica Start</string>\r\n    <string name=\"helloWorld\">open</string>\r\n    <string name=\"helloWorld2\">close</string>\r\n    <string name=\"helloWorld3\">stop</string>\r\n    <string name=\"gesture1\">gesture 1</string>\r\n    <string name=\"gesture2\">gesture 2</string>\r\n    <string name=\"gesture3\">gesture 3</string>\r\n    <string name=\"off_update\">off schedules</string>\r\n    <string name=\"on_update\">on schedules</string>\r\n    <string name=\"gesture4\">parting position</string>\r\n\r\n    <string name=\"scan_again\">scan again</string>\r\n    <string name=\"activity_scan_paired_text\">Connected devices:</string>\r\n\r\n    <string name=\"bluetooth_scanning\">scanning…</string>\r\n    <string name=\"bluetooth_scan_finished\" />//Scanning is completed.\r\n    <string name=\"bluetooth_pairing\">connection…</string>\r\n    <string name=\"bluetooth_paired\">Device is connected.</string>\r\n    <string name=\"bluetooth_unpaired\">Device is disconnected.</string>\r\n    <string name=\"bluetooth_connected\">Device is connected.</string>\r\n    <string name=\"bluetooth_connecting\">Connection…</string>\r\n    <string name=\"bluetooth_disconnected\">Device is not connected.</string>\r\n    <string name=\"bluetooth_connect_in_3sec\">It was not succeeded to be connected…</string>\r\n    <string name=\"bluetooth_turning_on\">Bluetooth turned off…</string>\r\n    <string name=\"title_home\">Gestures</string>\r\n    <string name=\"title_dashboard\">Sensors</string>\r\n    <string name=\"valueCH1\">TextView</string>\r\n    <string name=\"ch1\">CH1:</string>\r\n    <string name=\"_100\">100</string>\r\n    <string name=\"ch1_on\">CH1 on:</string>\r\n    <string name=\"ch1_off\">CH1 off:</string>\r\n    <string name=\"mv\">mV</string>\r\n    <string name=\"mv2\">mV</string>\r\n    <string name=\"mv3\">mV</string>\r\n    <string name=\"_1250\">1250</string>\r\n    <string name=\"_2500\">2500</string>\r\n    <string name=\"state_view\">lolol</string>\r\n    <string name=\"title_activity_gripper_settings\">GripperSettings</string>\r\n    <string name=\"action_Trigger0\">service menu</string>//service menu\r\n    <string name=\"action_Trigger1\">classical</string>//classic\r\n    <string name=\"action_Trigger2\">trigger</string>//trigger mode\r\n    <string name=\"action_Trigger3\">trigger inverted</string>//invert trigger mode\r\n    <string name=\"action_Trigger4\" />//first lock mode\r\n    <string name=\"action_Trigger5\" />//second lock mode\r\n    <string name=\"action_Trigger6\" />//first invert lock mode\r\n    <string name=\"action_Trigger7\" />//second invert lock mode\r\n    <string name=\"action_Trigger8\">classical inverted</string>classic inverted\r\n    <string name=\"appbar_scrolling_view_behavior\" translatable=\"false\">com.google.android.material.appbar.AppBarLayout$ScrollingViewBehavior</string>\r\n    <string name=\"lesson_eight_error_could_not_create_vbo\">Could not create vertex buffer object: %s</string>\r\n    <string name=\"lesson_eight_error_unknown\">Unknown error: %s</string>\r\n    <string name=\"hello_blank_fragment\">Hello blank fragment</string>\r\n    <string name=\"illumination\">Illumination</string>\r\n    <string name=\"closing\">closing</string>\r\n    <string name=\"opening\">opening</string>\r\n    <string name=\"battery_power\">Battery power:</string>\r\n    <string name=\"compressive_force\">Compressive force</string>\r\n    <string name=\"blocking\">Blocking</string>\r\n    <string name=\"roughness_of_sensors\">Roughness of sensors</string>\r\n    <string name=\"I_real\">I real:</string>\r\n    <string name=\"I_max\">I max:</string>\r\n    <string name=\"mA\">mA</string>\r\n    <string name=\"inverting\">Inverting</string>\r\n    <string name=\"internal_ADC\">Internal ADC</string>\r\n    <string name=\"save\">save</string>\r\n    <string name=\"single_channel_by_sensor_1\">single channel by sensor 1</string>\r\n    <string name=\"single_channel_by_sensor_2\">single channel by sensor 2</string>\r\n    <string name=\"advanced_settings\">Advanced settings</string>\r\n    <string name=\"ok\">OK</string>\r\n    <string name=\"cancel\" tools:ignore=\"ButtonCase\">cancel</string>\r\n    <string name=\"password\">password</string>\r\n    <string name=\"calibration\">Calibration:</string>\r\n    <string name=\"number_of_channel\">Number of channel:</string>\r\n    <string name=\"speed\">Speed</string>\r\n    <string name=\"angle\">Angle</string>\r\n    <string name=\"input_address\">Input address</string>\r\n    <string name=\"input_temp\">Input temp</string>\r\n    <string name=\"current_control_data\">Current control data</string>\r\n    <string name=\"set\">set</string>\r\n    <string name=\"open\">open</string>\r\n    <string name=\"stop\">stop</string>\r\n    <string name=\"close\">close</string>\r\n    <string name=\"current_control_timeout\">Current control timeout</string>\r\n    <string name=\"x100_ms\">x100 ms</string>\r\n    <string name=\"current_control\">Current control</string>\r\n    <string name=\"currents\">currents</string>\r\n    <string name=\"ete_calib\">EtE   calib</string>\r\n    <string name=\"eeprom_save\">EEPROM save</string>\r\n    <string name=\"angle_fix\">angle fix</string>\r\n    <string name=\"input_open_angle\">Input open angle</string>\r\n    <string name=\"input_close_angle\">Input close angle</string>\r\n    <string name=\"input_wide_angle\">Input wide angle</string>\r\n    <string name=\"magnet_invert\">Magnet invert</string>\r\n    <string name=\"revers_motor\">Revers motor</string>\r\n    <string name=\"zero_crossing\">Zero crossing</string>\r\n    <string name=\"speed_with_space\">\"speed: \"</string>\r\n    <string name=\"use_gesture\">use gesture</string>\r\n    <string name=\"leave\">Exit?</string>\r\n    <string name=\"no\">no</string>\r\n    <string name=\"not_the_right_password\">password not right</string>\r\n    <string name=\"select_channel\">\"select channel \"</string>\r\n    <string name=\"admission_of_inquiry_of_updating\">admission of inquiry of updating</string>\r\n    <string name=\"gesture_1\">Gesture №1</string>\r\n    <string name=\"gesture_2\">Gesture №2</string>\r\n    <string name=\"gesture_3\">Gesture №3</string>\r\n    <string name=\"gesture_4\">Gesture №4</string>\r\n    <string name=\"gesture_5\">Gesture №5</string>\r\n    <string name=\"gesture_6\">Gesture №6</string>\r\n    <string name=\"gesture_7\">Gesture №7</string>\r\n    <string name=\"gesture_8\">Gesture №8</string>\r\n    <string name=\"click_to_edit_start_and_end_states\">Click to edit start and end states</string>\r\n    <string name=\"control_of_an_open_state\">Control of an open state</string>\r\n    <string name=\"control_of_the_closed_state\">Control of the closed state</string>\r\n    <string name=\"allows_you_to_set_the_position_of_the_maximum_open_state\">Allows you to set the position of the maximum open state</string>\r\n    <string name=\"allows_you_to_set_the_position_of_the_maximum_closed_state\">Allows you to set the position of the maximum closed state</string>\r\n    <string name=\"connection_is_absent\">connection is absent</string>\r\n    <string name=\"off_schedules\">off schedules</string>\r\n    <string name=\"on_schedules\">on schedules</string>\r\n    <string name=\"magic_checkbox\">Magic checkbox</string>\r\n    <string name=\"speed_increment\">speed increment</string>\r\n    <string name=\"disable_angel_control\">disable angel control</string>\r\n    <string name=\"gesture_1_btn\">gesture №1</string>\r\n    <string name=\"gesture_2_btn\">gesture №2</string>\r\n    <string name=\"gesture_3_btn\">gesture №3</string>\r\n    <string name=\"gesture_4_btn\">gesture №4</string>\r\n    <string name=\"gesture_5_btn\">gesture №5</string>\r\n    <string name=\"gesture_6_btn\">gesture №6</string>\r\n    <string name=\"gesture_7_btn\">gesture №7</string>\r\n    <string name=\"gesture_8_btn\">gesture №8</string>\r\n    <string name=\"test\">test</string>\r\n    <string name=\"setting_up_gestures\">setting up gestures</string>\r\n    <string name=\"sensor_settings\">sensor settings</string>\r\n    <string name=\"special_settings\">special settings</string>\r\n    <string name=\"driver_0_00v\">driver: 0.00v</string>\r\n    <string name=\"driver\">\"driver: \"</string>\r\n    <string name=\"bms_0_00v\">bms: 0.00v</string>\r\n    <string name=\"bms\">\"bms: \"</string>\r\n    <string name=\"sens_0_00v\">sens: 0.00v</string>\r\n    <string name=\"sens\">\"sens: \"</string>\r\n    <string name=\"open_threshold\">open threshold</string>\r\n    <string name=\"close_threshold\">close threshold</string>\r\n    <string name=\"opening_sensor_sensitivity\">opening sensor sensitivity</string>\r\n    <string name=\"closing_sensor_sensitivity\">closing sensor sensitivity</string>\r\n    <string name=\"settings_blocking\">settings blocking</string>\r\n    <string name=\"close_btn\">close</string>\r\n    <string name=\"open_btn\">open</string>\r\n    <string name=\"swap_sensors\">swap sensors</string>\r\n    <string name=\"swap_button_open_close\">swap button open/close</string>\r\n    <string name=\"single_channel_control\">single channel control</string>\r\n    <string name=\"reset_to_factory_settings\">reset to factory settings</string>\r\n    <string name=\"off\">off</string>\r\n    <string name=\"on\">on</string>\r\n    <string name=\"shutdown_current\">shutdown current</string>\r\n    <string name=\"rotation_thumb\">rotation thumb</string>\r\n    <string name=\"thumb\">thumb</string>\r\n    <string name=\"forefinger\">forefinger</string>\r\n    <string name=\"middle_finger\">middle finger</string>\r\n    <string name=\"ring_finger\">ring finger</string>\r\n    <string name=\"little_finger\">little finger</string>\r\n    <string name=\"open_state\">open</string>\r\n    <string name=\"close_state\">close</string>\r\n    <string name=\"cancel_gripper_settings\">Cancel</string>\r\n    <string name=\"save_gripper_settings\">Save</string>\r\n    <string name=\"gesture\">Gesture </string>\r\n    <string name=\"hand_side\">hand side</string>\r\n    <string name=\"left\">left</string>\r\n    <string name=\"right\">right</string>\r\n    <string name=\"prosthesis_update_ready_for_installation\">Prosthesis update</string>\r\n    <string name=\"do_you_want_to_start_updating\">A new version of the prosthesis software is available. Do you want to install the updated firmware now?</string>\r\n    <string name=\"updating_0\">updating… </string>\r\n    <string name=\"gesture_switching_by_sensors\">gesture switching by sensors</string>\r\n    <string name=\"switching_mode\">switching mode</string>\r\n    <string name=\"time_between_peaks\">time between peaks</string>\r\n    <string name=\"peak_time\">peak time</string>\r\n    <string name=\"gesture_state\">Gesture state:</string>\r\n    <string name=\"finger_position\">Rotation:</string>\r\n    <string name=\"gps_network_not_enabled\">Enabled geolocation is necessary to connect to the prosthesis via bluetooth.</string>\r\n    <string name=\"open_location_settings\">enable geolocation</string>\r\n    <string name=\"we_need_these_permissions\">We need these permissions…</string>\r\n    <string name=\"rotation_state_open\">outside</string>\r\n    <string name=\"rotation_state_close\">inside</string>\r\n    <string name=\"gesture_state_open\">open state</string>\r\n    <string name=\"gesture_state_close\">off-state</string>\r\n    <string name=\"prosthesis_calibrating\">Prosthesis calibrating</string>\r\n    <string name=\"waiting\">waiting...</string>\r\n    <string name=\"get\">get</string>\r\n    <string name=\"telemetry_serial\">telemetry serial</string>\r\n    <string name=\"shutdown_current_1\">shutdown current 1</string>\r\n    <string name=\"shutdown_current_2\">shutdown current 2</string>\r\n    <string name=\"shutdown_current_3\">shutdown current 3</string>\r\n    <string name=\"shutdown_current_4\">shutdown current 4</string>\r\n    <string name=\"shutdown_current_5\">shutdown current 5</string>\r\n    <string name=\"shutdown_current_6\">shutdown current 6</string>\r\n    <string name=\"start_calibration\">start calibration</string>\r\n    <string name=\"not_calibrated_message\">To calibrate it, go to the advanced settings.</string>\r\n    <string name=\"not_calibrated\">The prosthesis is not calibrated</string>\r\n    <string name=\"calibration_status\">calibration status</string>\r\n\r\n    <string-array name=\"numbers\">\r\n        <item>0</item>\r\n        <item>1</item>\r\n        <item>2</item>\r\n        <item>3</item>\r\n        <item>4</item>\r\n        <item>5</item>\r\n        <item>6</item>\r\n        <item>255</item>\r\n    </string-array>\r\n</resources>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/values/strings.xml	(revision 5cac9875d963fb7b862372491e876bbe9ad2f790)
+++ app/src/main/res/values/strings.xml	(date 1638964612031)
@@ -195,6 +195,7 @@
     <string name="not_calibrated_message">To calibrate it, go to the advanced settings.</string>
     <string name="not_calibrated">The prosthesis is not calibrated</string>
     <string name="calibration_status">calibration status</string>
+    <string name="sync">sync: </string>
 
     <string-array name="numbers">
         <item>0</item>
